@page "/reports/ReportTemplate/AddEditReportTemplate/{ReportTemplateId}"
@attribute [Authorize]

@using ClosedXML.Excel
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels
@inject IReportTemplateRepository _reportTemplateRepository
@inject IReportTemplateTypeRepository _reportTemplateTypeRepository
@inject IDataTypeRepository _dataTypeRepository
@inject IMesDepartmentRepository _mesDepartmentRepository
@inject ISettingsRepository _settingsRepository
@inject IWebHostEnvironment _environment
@inject DictionaryManagement_Business.Repository.IAuthorizationRepository _authorizationRepository
@inject ILogEventRepository _logEventRepository
@inject DialogService _dialogService
@inject IUserRepository _userRepository
@inject IReportTemplateFileHistoryRepository _reportTemplateFileHistoryRepository
@inject IReportTemplateToMesParamRepository _reportTemplateToMesParamRepository

<_Dialogs @ref="_dialogs"></_Dialogs>

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    @if (IsLoading)
    {
        <Loading IsLoading="@IsLoading" />
    }
    else
    {
        <EditForm Model="ActiveReportTemplateDTO" OnValidSubmit="AddEditReportTemplateProcedure">
            <DataAnnotationsValidator />

            <RadzenRow Gap="1rem">
                <RadzenColumn Size="12" SizeMD="8">
                    <RadzenStack>
                        <RadzenFieldset Text="Шаблон отчёта" Style="font-weight: bold;">
                            <RadzenStack Gap="1rem">
                                @if (ReportTemplateId != null && ReportTemplateId != Guid.Empty)
                                {
                                    <RadzenFormField Text="ИД шаблона" Variant="@variant" Style="width: 100%;">
                                        <RadzenNumeric @bind-Value="@ActiveReportTemplateDTO.Id" ReadOnly="true" />
                                    </RadzenFormField>

                                    <RadzenFormField Text="Время добавления" Variant="@variant" Style="width: 100%;">
                                        <RadzenNumeric @bind-Value="@ActiveReportTemplateDTO.AddTime" ReadOnly="true" />
                                    </RadzenFormField>
                                    <ValidationMessage For="()=>ActiveReportTemplateDTO.AddTime"></ValidationMessage>

                                    <RadzenFormField Text="Кто добавил" Variant="@variant" Style="width: 100%;">
                                        <RadzenTextBox @bind-Value="@ActiveReportTemplateDTO.AddUserDTOFK.UserName" ReadOnly="true" />
                                    </RadzenFormField>
                                }

                                <RadzenFormField Text="Тип шаблона отчёта" Variant="@variant" Style="width: 100%;">
                                    <RadzenDropDown @ref=@reportTemplateTypeDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                                    Data=@ReportTemplateTypeDTOList TextProperty="Name" ValueProperty="Id" AllowClear="true" @bind-Value="ActiveReportTemplateDTO.ReportTemplateTypeId" Style="width: 100%;"
                                                    Change=@(args => FillDescription().GetAwaiter().GetResult()) />
                                    @* Change=@(args => FillDescription()) *@
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveReportTemplateDTO.ReportTemplateTypeDTOFK"></ValidationMessage>

                                <RadzenFormField Text="Тип выходных данных" Variant="@variant" Style="width: 100%;">
                                    <RadzenDropDown @ref=@dataTypeDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                                    Data=@DataTypeDTOList TextProperty="Name" ValueProperty="Id" AllowClear="true" @bind-Value="ActiveReportTemplateDTO.DestDataTypeId" Style="width: 100%;"
                                                    Change=@(args => FillDescription().GetAwaiter().GetResult()) />
                                    @* Change=@(args => FillDescription()) *@
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveReportTemplateDTO.DestDataTypeDTOFK"></ValidationMessage>

                                <RadzenFormField Text="Производство" Variant="@variant" Style="width: 100%;">
                                    <RadzenDropDown @ref=@mesDepartmentDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                                    Data=@MesDepartmentDTOList TextProperty="ToStringHierarchyShortName" ValueProperty="Id" AllowClear="true" @bind-Value="ActiveReportTemplateDTO.DepartmentId" Style="width: 100%;"
                                                    Change=@(args => FillDescription().GetAwaiter().GetResult()) />
                                    @* Change=@(args => FillDescription()) *@
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveReportTemplateDTO.MesDepartmentDTOFK"></ValidationMessage>

                                @if (ReportTemplateId != null && ReportTemplateId != Guid.Empty)
                                {
                                    <RadzenFormField Text="Имя Файла" Variant="@variant" Style="width: 100%;">
                                        <RadzenTextBox @bind-Value="@ActiveReportTemplateDTO.TemplateFileName" ReadOnly="true" />
                                    </RadzenFormField>

                                    @if (CanCheckReportTemplateFile().GetAwaiter().GetResult())
                                    {
                                        <div class="row">
                                            <div class="col-8">
                                                <a href="/DownloadFileController/DownloadReportTemplateFile/@ReportTemplateId" target="_blank">Скачать файл шаблона</a>
                                            </div>
                                            <div class="col-4 float-right">
                                                <NavLink @onclick="(() => OnClickCheckCurrentReportTemplate(ReportTemplateFile.CurrentFile, ActiveReportTemplateDTO))" class="btn btn-outline-primary">Проверить действующий шаблон</NavLink>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <a href="/DownloadFileController/DownloadReportTemplateFile/@ReportTemplateId" target="_blank">Скачать файл шаблона</a>
                                    }
                                }

                                <RadzenCard Style="width: 100%;">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Выбрать файл шаблона отчёта</RadzenText>
                                    @*                                     <RadzenUpload @ref="upload" Auto="true" ChooseText="Выбрать" Multiple="false" Accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            Url="@("UploadFileController/UploadReportTemplateFile/"+ActiveReportTemplateDTO.Id)"
                            Change=@(args => OnChange(args)) Progress=@(args => OnProgress(args)) Error=@(args => UploadError(args)) /> *@
                                    <RadzenUpload @ref="upload" Auto="true" ChooseText="Выбрать" Multiple="false" Accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                                                  Url="@("UploadFileController/UploadReportTemplateFile/"+ActiveReportTemplateDTO.Id)"
                                                  Progress=@(args => OnProgress(args)) Error=@(args => UploadError(args)) />
                                    @if (!String.IsNullOrEmpty(uploadFileWarning))
                                    {
                                        <br />
                                        @if (showProgress)
                                        {
                                            <RadzenProgressBar Value=@progress class="mt-4" Visible=@showProgress />
                                        }
                                        else
                                        {
                                            @if (CanCheckReportTemplateFile().GetAwaiter().GetResult())
                                            {
                                                <div class="row">
                                                    <div class="col-8">
                                                        <p>@loadedFileName</p>
                                                        <RadzenText class="text-warning" TextStyle="TextStyle.Body1" TagName="TagName.Span">@uploadFileWarning</RadzenText>
                                                    </div>
                                                    <div class="col-4 float-right">
                                                        <NavLink @onclick="(() => OnClickCheckCurrentReportTemplate(ReportTemplateFile.LoadFile, ActiveReportTemplateDTO))" class="btn btn-outline-primary">Проверить загружаемый шаблон</NavLink>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <p>@loadedFileName</p>
                                                <RadzenText class="text-warning" TextStyle="TextStyle.Body1" TagName="TagName.Span">@uploadFileWarning</RadzenText>
                                            }
                                        }
                                    }
                                </RadzenCard>
                            </RadzenStack>
                        </RadzenFieldset>
                    </RadzenStack>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenStack>
                        <RadzenFieldset Text="Авторасчёт шаблона отчёта" Style="font-weight: bold;">
                            <RadzenStack Gap="1rem">
                                @if (ActiveReportTemplateDTO.ReportTemplateTypeDTOFK != null && ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.CanAutoCalc == true)
                                {
                                    <div class="rz-p-12 rz-text-align-center">
                                        <RadzenCheckBox @bind-Value="@ActiveReportTemplateDTO.NeedAutoCalc" Name="CheckBoxNeedAutoCalc" />
                                        <RadzenLabel Text="Включить авторасчёт шаблона отчёта" Component="CheckBoxNeedAutoCalc" Style="margin-left: 8px; vertical-align: middle; font-size: 14px" />
                                        <ValidationMessage For="()=>ActiveReportTemplateDTO.NeedAutoCalc"></ValidationMessage>
                                    </div>
                                    <RadzenFormField Text="Порядок авторасчёта" Variant="@variant" Style="width: 100%; max-width: 700px;">
                                        <RadzenNumeric @bind-Value="@ActiveReportTemplateDTO.AutoCalcOrder" Disabled="@(ActiveReportTemplateDTO.NeedAutoCalc == true ? false : true)" />
                                    </RadzenFormField>
                                    <ValidationMessage For="()=>ActiveReportTemplateDTO.AutoCalcOrder"></ValidationMessage>
                                    <RadzenFormField Text="Количество прогонов шаблона авторасчётом" Variant="@variant" Style="width: 100%; max-width: 700px;">
                                        <RadzenNumeric @bind-Value="@ActiveReportTemplateDTO.AutoCalcNumber" Disabled="@(ActiveReportTemplateDTO.NeedAutoCalc == true ? false : true)" />
                                    </RadzenFormField>
                                    <ValidationMessage For="()=>ActiveReportTemplateDTO.AutoCalcNumber"></ValidationMessage>
                                }
                                else
                                {
                                    <p style="color: lightgrey; font-size: 14px; text-align: center; margin: 2rem;">
                                        @if (ActiveReportTemplateDTO.ReportTemplateTypeDTOFK == null)
                                        {
                                            @("Тип шаблона отчёта не выбран")
                                        }
                                        else
                                        {
                                            @("Тип шаблона отчёта \"" + ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name + "\" отмечен как не доступный для авторасчёта")
                                        }
                                    </p>
                                }
                            </RadzenStack>
                        </RadzenFieldset>
                        <RadzenFieldset Text="Дополнительно" Style="font-weight: bold;">
                            @if (ActiveReportTemplateDTO.ReportTemplateTypeDTOFK != null)
                            {

                                <RadzenStack Gap="1rem">
                                    <div class="rz-text-align-center">
                                        <RadzenLabel Text="@("Vba-скрипт для типа шаблона \"" + ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name + "\"")" Style="margin-left: 8px; vertical-align: middle; font-size: 14px" />
                                    </div>
                                    @if (!String.IsNullOrEmpty(ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.VbaScriptFileName))
                                    {
                                        <div class="rz-text-align-center">
                                            <a href="/DownloadFileController/DownloadAnyFile/@ReportTemplatePath.HideSlash()/@ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.VbaScriptFileName" target="_blank">Скачать файл</a>
                                        </div>
                                    }
                                    else
                                    {
                                        <p style="color: lightgrey; font-size: 14px; text-align: center;">
                                            @("Нет файла")
                                        </p>
                                    }

                                    <div class="rz-text-align-center">
                                        <RadzenLabel Text="@("Файл-образец для типа шаблона \"" + ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name + "\"")" Style="margin-left: 8px; vertical-align: middle; font-size: 14px" />
                                    </div>
                                    @if (!String.IsNullOrEmpty(ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.SampleFileName))
                                    {
                                        <div class="rz-text-align-center">
                                            <a href="/DownloadFileController/DownloadAnyFile/@ReportTemplatePath.HideSlash()/@ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.SampleFileName" target="_blank">Скачать файл</a>
                                        </div>
                                    }
                                    else
                                    {
                                        <p style="color: lightgrey; font-size: 14px; text-align: center;">
                                            @("Нет файла")
                                        </p>
                                    }
                                </RadzenStack>
                            }
                            else
                            {
                                <p style="color: lightgrey; font-size: 14px; text-align: center;">
                                    @("Не выбран тип шаблона отчёта")
                                </p>
                            }
                        </RadzenFieldset>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <div class="form-group py-2">
                <button class="btn btn-success" @onclick="(() => OnClickSave().GetAwaiter().GetResult())"
                        disabled=@(IsSubmited || (IsAdmin != AdminMode.IsAdmin) || (isUploadFileError == true) || (showProgress == true))>
                    @Title
                </button>
                <NavLink @onclick="(() => OnClickCancel())" class="btn btn-secondary">Отмена</NavLink>
            </div>
        </EditForm>
    }
}

@code {

    _Dialogs? _dialogs { get; set; }

    bool showProgress = false;
    int progress;
    bool checkFile = true;

    Guid customParameter;

    [Parameter]
    public Guid ReportTemplateId { get; set; }

    enum ReportTemplateFile
    {
        CurrentFile,
        LoadFile
    }

    bool IsSubmited = false;

    public string ReportTemplatePath;
    public string TempFilePath;

    string loadedFileName = "";

    RadzenUpload upload;

    Variant variant = Variant.Outlined;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }
    public bool isUploadFileError { get; set; } = false;
    public string uploadFileErrorString { get; set; } = "";

    public bool NeedCheckReportTemplateBeforeSaving { get; set; } = false;

    string uploadFileWarning = "";

    string downloadLinkPath = "";

    IEnumerable<MesDepartmentDTO>? MesDepartmentDTOList { get; set; } = new List<MesDepartmentDTO>();
    IEnumerable<ReportTemplateTypeDTO>? ReportTemplateTypeDTOList { get; set; } = new List<ReportTemplateTypeDTO>();
    IEnumerable<DataTypeDTO>? DataTypeDTOList { get; set; } = new List<DataTypeDTO>();

    public ReportTemplateDTO ActiveReportTemplateDTO { get; set; }

    private string Title { get; set; } = "Создать шаблон отчёта";

    RadzenDropDown<int> mesDepartmentDropDown;
    RadzenDropDown<int> reportTemplateTypeDropDown;
    RadzenDropDown<int> dataTypeDropDown;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        customParameter = Guid.NewGuid();

        bool IsSubmited = false;
        IsLoading = true;
        await Task.Delay(100);
        await InvokeAsync(StateHasChanged);

        if (ReportTemplateId == null || ReportTemplateId == Guid.Empty)
        {
            ActiveReportTemplateDTO = new ReportTemplateDTO
                {
                    Id = customParameter,
                    NeedAutoCalc = false,
                    AutoCalcOrder = 1,
                    AutoCalcNumber = 1
                };
        }
        else
        {
            ActiveReportTemplateDTO = await _reportTemplateRepository.GetById(ReportTemplateId);
            Title = "Изменить шаблон отчёта";
            downloadLinkPath = "/DownloadFileController/DownloadReportTemplateFile/" + ReportTemplateId;
        }

        ReportTemplatePath = (await _settingsRepository.GetByName(SD.ReportTemplatePathSettingName)).Value;
        string? needCheckReportTemplateBeforeSaving = (await _settingsRepository.GetByName(SD.NeedCheckReportTemplateBeforeSaving))?.Value;

        NeedCheckReportTemplateBeforeSaving = false;
        if (needCheckReportTemplateBeforeSaving != null)
        {
            if (needCheckReportTemplateBeforeSaving.Trim() == "1" || needCheckReportTemplateBeforeSaving.Trim().ToUpper() == "ДА"
                 || needCheckReportTemplateBeforeSaving.Trim().ToUpper() == "TRUE")
            {
                NeedCheckReportTemplateBeforeSaving = true;
            }
        }
        // IsLoading = false;
        // await Task.Delay(100);
        // await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);

                if (ReportTemplateId == null || ReportTemplateId == Guid.Empty)
                {
                    ActiveReportTemplateDTO = new ReportTemplateDTO
                        {
                            Id = customParameter,
                            NeedAutoCalc = false,
                            AutoCalcOrder = 1,
                            AutoCalcNumber = 1
                        };
                }
                else
                {
                    ActiveReportTemplateDTO = await _reportTemplateRepository.GetById(ReportTemplateId);
                    Title = "Изменить шаблон отчёта";
                }

                MesDepartmentDTOList = (await _mesDepartmentRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly)).OrderBy(u => u.ToStringHierarchyShortName);
                ReportTemplateTypeDTOList = await _reportTemplateTypeRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly);
                DataTypeDTOList = await _dataTypeRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly);
                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/reports/ReportTemplate");
        }
    }

    private async Task AddEditReportTemplateProcedure()
    {
        IsSubmited = true;
        if (IsAdmin == AdminMode.IsAdmin)
        {
            ReportTemplatePath = (await _settingsRepository.GetByName(SD.ReportTemplatePathSettingName)).Value;
            if (String.IsNullOrEmpty(ReportTemplatePath))
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Не найдена настройка с наименованием \"ReportTemplatePath\" либо значение настройки пусто");
                IsSubmited = false;
                return;
            }

            if (!Directory.Exists(ReportTemplatePath))
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Путь \"" + ReportTemplatePath + "\", указанный в качестве значения настройки \"ReportTemplatePath\", не существует или не доступен!");
                IsSubmited = false;
                return;
            }

            TempFilePath = (await _settingsRepository.GetByName(SD.TempFilePathSettingName)).Value;

            if (String.IsNullOrEmpty(TempFilePath))
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Не найдена настройка с наименованием \"TempFilePath\" либо значение настройки пусто");
                IsSubmited = false;
                return;
            }

            if (!Directory.Exists(TempFilePath))
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Путь \"" + TempFilePath + "\", указанный в качестве значения настройки \"TempFilePath\", не существует или не доступен!");
                IsSubmited = false;
                return;
            }
            if (ReportTemplateId == null || ReportTemplateId == Guid.Empty)
            { // создание

                if (String.IsNullOrEmpty(uploadFileWarning))
                {
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Выбор файла шаблона отчёта является обязательным!");
                    IsSubmited = false;
                    return;
                }

                var foundByMult = await _reportTemplateRepository.GetByReportTemplateTypeIdAndDestDataTypeIdAndDepartmentId(ActiveReportTemplateDTO.ReportTemplateTypeId,
                    ActiveReportTemplateDTO.DestDataTypeId, ActiveReportTemplateDTO.DepartmentId);
                if (foundByMult != null)
                {
                    await _jsRuntime.ToastrError("Уже есть шаблон отчёта с типом: '" + ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name + "' Типом вых данных: '"
                    + ActiveReportTemplateDTO.DestDataTypeDTOFK.Name + "' для производства: '" + ActiveReportTemplateDTO.MesDepartmentDTOFK.Name + "'");
                    IsSubmited = false;
                    return;
                }

                IXLWorkbook? xLWorkbook = null;
                bool reportTemplateFileSaveAbordedResult = false;
                IEnumerable<MesParamDTO> mesParamListDTO;
                Tuple<IXLWorkbook?, bool, IEnumerable<MesParamDTO>> tmpVar = await ReportTemplateFileSaveAborded(ActiveReportTemplateDTO.Id, TempFilePath + ActiveReportTemplateDTO.Id + ".xlsx");

                xLWorkbook = tmpVar.Item1;
                reportTemplateFileSaveAbordedResult = tmpVar.Item2;
                mesParamListDTO = tmpVar.Item3;

                if (reportTemplateFileSaveAbordedResult)
                {
                    IsSubmited = false;
                    return;
                }

                ActiveReportTemplateDTO.Description = "Шаблон типа: \"" + ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name + "\" c вых данными: \"" +
                    ActiveReportTemplateDTO.DestDataTypeDTOFK.Name + "\" для производства: \"" + ActiveReportTemplateDTO.MesDepartmentDTOFK.Name + "\"";

                ActiveReportTemplateDTO.Id = customParameter;
                ActiveReportTemplateDTO.TemplateFileName = customParameter + ".xlsx";
                ReportTemplateDTO createdTemplateDTO = await _reportTemplateRepository.Create(ActiveReportTemplateDTO);

                // createdTemplateDTO.TemplateFileName = createdTemplateDTO.Id + ".xlsx";

                // var addedDTO = await _reportTemplateRepository.Update(createdTemplateDTO);

                await _logEventRepository.ToLog<ReportTemplateDTO>(oldObject: null, newObject: createdTemplateDTO, "Добавление шаблона отчёта", "Шаблон отчёта: ", _authorizationRepository);

                //upload.Url = @"UploadFileController/UploadReportTemplateFile/" + createdTemplateDTO.Id;
                //await upload.Upload();

                UserDTO? addedUser = await _authorizationRepository.GetCurrentUserDTO();
                DateTime addedTime = DateTime.Now;

                if (addedUser == null)
                {
                    addedUser = await _userRepository.GetByUserName(SD.DictionaryManagementUserName);
                }
                string oldTemplateFileName = "";

                bool fileSaveSuccess = false;
                try
                {
                    File.Copy(TempFilePath + ActiveReportTemplateDTO.TemplateFileName, ReportTemplatePath + ActiveReportTemplateDTO.TemplateFileName, true);
                    fileSaveSuccess = true;
                }
                catch (Exception copyEx)
                {
                    fileSaveSuccess = false;
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Ошибка при записи файла. Сообщение ошибки: " + copyEx.Message);
                }

                ReportTemplateFileHistoryDTO reportTemplateFileHistoryDTO = new ReportTemplateFileHistoryDTO();
                reportTemplateFileHistoryDTO.ReportTemplateId = ActiveReportTemplateDTO.Id;
                reportTemplateFileHistoryDTO.AddTime = addedTime;
                reportTemplateFileHistoryDTO.AddUserId = addedUser.Id;
                reportTemplateFileHistoryDTO.PreviousFileName = oldTemplateFileName;
                reportTemplateFileHistoryDTO.CurrentFileName = ActiveReportTemplateDTO.TemplateFileName;
                await _reportTemplateFileHistoryRepository.Create(reportTemplateFileHistoryDTO);

                if (fileSaveSuccess)
                {
                    await FillReportTemplateToMesParam(createdTemplateDTO, xLWorkbook, mesParamListDTO);
                }

                await _jsRuntime.ToastrSuccess("Шаблон \"" + ActiveReportTemplateDTO.Description + "\" создан");
                if (isUploadFileError == false)
                    _dialogService.Close(ActiveReportTemplateDTO);
            }
            else
            { // изменение

                var foundByMult = await _reportTemplateRepository.GetByReportTemplateTypeIdAndDestDataTypeIdAndDepartmentId(ActiveReportTemplateDTO.ReportTemplateTypeId,
                    ActiveReportTemplateDTO.DestDataTypeId, ActiveReportTemplateDTO.DepartmentId);

                if ((foundByMult != null) && (foundByMult.Id != ActiveReportTemplateDTO.Id))
                {
                    await _jsRuntime.ToastrError("Уже есть шаблон отчёта с типом: '" + ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name + "' Типом вых данных: '"
                    + ActiveReportTemplateDTO.DestDataTypeDTOFK.Name + "' для производства: '" + ActiveReportTemplateDTO.MesDepartmentDTOFK.Name + "'");
                    IsSubmited = false;
                    return;
                }

                ActiveReportTemplateDTO.Description = "Шаблон типа: \"" + ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name + "\" c вых данными: \"" +
                    ActiveReportTemplateDTO.DestDataTypeDTOFK.Name + "\" для производства: \"" + ActiveReportTemplateDTO.MesDepartmentDTOFK.Name + "\"";

                ActiveReportTemplateDTO.TemplateFileName = ActiveReportTemplateDTO.Id + ".xlsx";

                IXLWorkbook? xLWorkbook = null;
                bool reportTemplateFileSaveAbordedResult = false;
                IEnumerable<MesParamDTO> mesParamListDTO;
                Tuple<IXLWorkbook?, bool, IEnumerable<MesParamDTO>> tmpVar = await ReportTemplateFileSaveAborded(ActiveReportTemplateDTO.Id, TempFilePath + ActiveReportTemplateDTO.Id + ".xlsx");

                xLWorkbook = tmpVar.Item1;
                reportTemplateFileSaveAbordedResult = tmpVar.Item2;
                mesParamListDTO = tmpVar.Item3;

                if (reportTemplateFileSaveAbordedResult)
                {
                    IsSubmited = false;
                    return;
                }

                bool fileSaveSuccess = false;
                if (!String.IsNullOrEmpty(uploadFileWarning))
                {
                    //upload.Url = @"UploadFileController/UploadReportTemplateFile/" + ActiveReportTemplateDTO.Id;
                    //await upload.Upload();

                    UserDTO? addedUser = await _authorizationRepository.GetCurrentUserDTO();
                    DateTime addedTime = DateTime.Now;

                    if (addedUser == null)
                    {
                        addedUser = await _userRepository.GetByUserName(SD.DictionaryManagementUserName);
                    }
                    string oldTemplateFileName = SD.RemoveInvalidCharsFromFilename(addedUser.UserName + "_" + addedTime.ToString() + "_" + ActiveReportTemplateDTO.TemplateFileName);

                    try
                    {
                        File.Copy(ReportTemplatePath + ActiveReportTemplateDTO.TemplateFileName, ReportTemplatePath + oldTemplateFileName, true);
                        File.Copy(TempFilePath + ActiveReportTemplateDTO.TemplateFileName, ReportTemplatePath + ActiveReportTemplateDTO.TemplateFileName, true);
                        fileSaveSuccess = true;
                    }
                    catch (Exception copyEx)
                    {
                        await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Ошибка при записи файла. Сообщение ошибки: " + copyEx.Message);
                        fileSaveSuccess = false;
                    }

                    await _logEventRepository.AddRecord("Изменение шаблона отчёта", addedUser.Id, ActiveReportTemplateDTO.ToString(), ActiveReportTemplateDTO.ToString(), false, "Замена файла шаблона отчёта: " + ActiveReportTemplateDTO.ToString());

                    ReportTemplateFileHistoryDTO reportTemplateFileHistoryDTO = new ReportTemplateFileHistoryDTO();
                    reportTemplateFileHistoryDTO.ReportTemplateId = ActiveReportTemplateDTO.Id;
                    reportTemplateFileHistoryDTO.AddTime = addedTime;
                    reportTemplateFileHistoryDTO.AddUserId = addedUser.Id;
                    reportTemplateFileHistoryDTO.PreviousFileName = oldTemplateFileName;
                    reportTemplateFileHistoryDTO.CurrentFileName = ActiveReportTemplateDTO.TemplateFileName;
                    await _reportTemplateFileHistoryRepository.Create(reportTemplateFileHistoryDTO);
                }

                ReportTemplateDTO oldReportTemplateDTO = await _reportTemplateRepository.GetById(ActiveReportTemplateDTO.Id);

                ReportTemplateDTO newReportTemplateDTO = await _reportTemplateRepository.Update(ActiveReportTemplateDTO);

                await _logEventRepository.ToLog<ReportTemplateDTO>(oldObject: oldReportTemplateDTO, newObject: newReportTemplateDTO, "Изменение шаблона отчёта", "Шаблон отчёта: ", _authorizationRepository);

                if (!String.IsNullOrEmpty(uploadFileWarning) && fileSaveSuccess)
                {
                    await FillReportTemplateToMesParam(newReportTemplateDTO, xLWorkbook, mesParamListDTO);
                }

                await _jsRuntime.ToastrSuccess("Шаблон отчёта \"" + ActiveReportTemplateDTO.Id.ToString() + "\" изменён");
                if (isUploadFileError == false)
                    _dialogService.Close(ActiveReportTemplateDTO);
            }
        }
        IsSubmited = false;
    }

    private async Task FillDescription()
    {
        if (ActiveReportTemplateDTO.ReportTemplateTypeId != null)
        {
            ActiveReportTemplateDTO.ReportTemplateTypeDTOFK = await _reportTemplateTypeRepository.Get(ActiveReportTemplateDTO.ReportTemplateTypeId);
        }

        if (ActiveReportTemplateDTO.DepartmentId != null)
        {
            ActiveReportTemplateDTO.MesDepartmentDTOFK = await _mesDepartmentRepository.GetById(ActiveReportTemplateDTO.DepartmentId);
        }

        if (ActiveReportTemplateDTO.DestDataTypeId != null)
        {
            ActiveReportTemplateDTO.DestDataTypeDTOFK = await _dataTypeRepository.Get(ActiveReportTemplateDTO.DestDataTypeId);
        }

        var repTemplateTypeName = "";
        var dataTypeName = "";
        var depName = "";

        if (ActiveReportTemplateDTO.ReportTemplateTypeDTOFK != null)
        {
            repTemplateTypeName = (String.IsNullOrEmpty(ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name)) ? "" : ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name;
        }
        if (ActiveReportTemplateDTO.DestDataTypeDTOFK != null)
        {
            dataTypeName = (String.IsNullOrEmpty(ActiveReportTemplateDTO.DestDataTypeDTOFK.Name)) ? "" : ActiveReportTemplateDTO.DestDataTypeDTOFK.Name;
        }
        if (ActiveReportTemplateDTO.MesDepartmentDTOFK != null)
        {
            depName = (String.IsNullOrEmpty(ActiveReportTemplateDTO.MesDepartmentDTOFK.ShortName)) ? ("") : (ActiveReportTemplateDTO.MesDepartmentDTOFK.ShortName);
        }

        ActiveReportTemplateDTO.Description = "Шаблон типа: \"" + repTemplateTypeName + "\" c вых данными: \"" +
                dataTypeName + "\" для производства: \"" + depName + "\"";
    }

    private async Task OnClickCancel()
    {
        upload.Dispose();
        _dialogService.Close(null);
    }


    private async Task OnClickCheckCurrentReportTemplate(ReportTemplateFile reportTemplateFile, ReportTemplateDTO reportTemplateDTO)
    {
        IsLoading = true;
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            string? reportTemplateFilePath = "";
            switch (reportTemplateFile)
            {
                case ReportTemplateFile.CurrentFile:
                    {
                        reportTemplateFilePath = (await _settingsRepository.GetByName(SD.ReportTemplatePathSettingName)).Value;
                        break;
                    }
                case ReportTemplateFile.LoadFile:
                    {
                        reportTemplateFilePath = (await _settingsRepository.GetByName(SD.TempFilePathSettingName)).Value;
                        break;
                    }
                default:
                    {
                        await _jsRuntime.ToastrError("Не предусмотренный параметр \"ReportTemplateFile.CurrentFile\" = " + reportTemplateFile.ToString());
                        return;
                    }
            }

            if (String.IsNullOrEmpty(reportTemplateFilePath))
            {
                await _jsRuntime.ToastrError("Не удалось определить путь нахождения файла");
                return;
            }

            if (!System.IO.Directory.Exists(reportTemplateFilePath))
            {
                await _jsRuntime.ToastrError("Не существует путь: " + reportTemplateFilePath);
                return;
            }

            string filepath = reportTemplateFilePath + reportTemplateDTO.Id.ToString() + ".xlsx";

            if (!System.IO.File.Exists(filepath))
            {
                await _jsRuntime.ToastrError("Не найден файл: " + filepath);
                return;
            }

            IsLoading = false;
            await _dialogService.OpenAsync<CheckReportTemplateFile>(
                    "Проверка файла шаблона отчёта - " + reportTemplateDTO.Id.ToString() + " - " + reportTemplateDTO.ReportTemplateTypeDTOFK.Name + " - " + reportTemplateDTO.MesDepartmentDTOFK.Name,
                    new Dictionary
                    <string, object>
                    () { { "ReportTemplateId", reportTemplateDTO.Id },
                         { "ReportTemplateFilePath", filepath.HideSlash() },
                         { "ReportTemplateTypeName" , ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name.Trim().ToUpper()},
                         { "ForSave", false } }
                    , new DialogOptions() { Width = "80vw", Left = "2vw", Top = "1vh", Bottom = "1vh", ShowClose = false });
            //await this.OnAfterRenderAsync(true);
        }
        IsLoading = false;
    }


    private async Task OnClickSave()
    {
        IsSubmited = true;
        if (IsAdmin == AdminMode.IsAdmin)
        {
            UserDTO? currentUserDTO = await _authorizationRepository.GetCurrentUserDTO(SD.MessageBoxMode.Off);
            ActiveReportTemplateDTO.AddTime = DateTime.Now;
            if (currentUserDTO != null)
            {
                ActiveReportTemplateDTO.AddUserId = currentUserDTO.Id;
                ActiveReportTemplateDTO.AddUserDTOFK = currentUserDTO;
                // ActiveReportTemplateDTO.AddUserId = SD.CurrentUserDTO.Id;
                // ActiveReportTemplateDTO.AddUserDTOFK = SD.CurrentUserDTO;
            }
            ActiveReportTemplateDTO.TemplateFileName = "sddsds";
        }
        IsSubmited = false;
    }


    private async Task OnProgress(UploadProgressArgs args)
    {
        if (checkFile)
        {
            checkFile = false;
            uploadFileWarning = "";
            if (args.Files.Count() > 0)
            {
                if (args.Files.ToList()[0].Size > 31457280)
                {
                    uploadFileWarning = "";
                    await upload.ClearFiles();
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Файл не может быть больше 30 МБ");
                    checkFile = true;
                    return;
                }
                else
                {
                    if (Path.GetExtension(args.Files.ToList()[0].Name).ToUpper() != ".XLSX")
                    {
                        uploadFileWarning = "";
                        await upload.ClearFiles();
                        await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Файл должен быть формата xlsx");
                        checkFile = true;
                        return;
                    }
                }
            }
        }
        loadedFileName = "";
        showProgress = true;
        progress = args.Progress;
        await Task.Delay(1);
        await InvokeAsync(StateHasChanged);

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {

                loadedFileName = file.Name;
                checkFile = true;
                if (ReportTemplateId != null && ReportTemplateId != Guid.Empty)
                    uploadFileWarning = "Файл не будет сохранён в базе данных пока не будет нажата кнопка \"Изменить шаблон отчёта\"";
                else
                    uploadFileWarning = "Файл не будет сохранён в базе данных пока не будет нажата кнопка \"Создать шаблон отчёта\"";
                //console.Log($"Uploaded: {file.Name} / {file.Size} bytes");
            }
            showProgress = false;
            await Task.Delay(1);
            await InvokeAsync(StateHasChanged);
        }
    }

    // private async Task OnChange(UploadChangeEventArgs args)
    // {
    //     uploadFileWarning = "";
    //     if (args.Files.Count() > 0)
    //     {

    //         if (args.Files.ToList()[0].Size > 31457280)
    //         {
    //             upload.ClearFiles();
    //             _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Файл не может быть больше 30 МБ");
    //         }
    //         else
    //         {
    //             if (Path.GetExtension(args.Files.ToList()[0].Name).ToUpper() != ".XLSX")
    //             {
    //                 upload.ClearFiles();
    //                 _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Файл должен быть формата xlsx");
    //             }
    //         }

    //         if (ReportTemplateId != null && ReportTemplateId != Guid.Empty)
    //             uploadFileWarning = "Файл не будет сохранён в базе данных пока не будет нажата кнопка \"Изменить шаблон отчёта\"";
    //         else
    //             uploadFileWarning = "Файл не будет сохранён в базе данных пока не будет нажата кнопка \"Создать шаблон отчёта\"";
    //     }
    // }

    private async Task UploadError(UploadErrorEventArgs args)
    {
        isUploadFileError = true;
        uploadFileErrorString = args.Message;
        var dialogResult = _dialogService.OpenAsync<CustomError>("", new Dictionary<string, object>() { { "ErrorString", uploadFileErrorString } }, new DialogOptions() { Width = $"{90}rem", Left = $"calc(50vw - 55rem)" });
    }

    private async Task<bool> CanCheckReportTemplateFile()
    {
        if (ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name.Trim().ToUpper() == SD.EmbReportTemplateTypeName.Trim().ToUpper()
                                                                              || ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name.Trim().ToUpper() == SD.TebReportTemplateTypeName.Trim().ToUpper()
                                                                              || ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name.Trim().ToUpper() == SD.CorrectionReportTemplateTypeName.Trim().ToUpper()
                                                                              || ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name.Trim().ToUpper() == SD.NdoReportTemplateTypeName.Trim().ToUpper())
            return true;
        else
            return false;
    }

    private async Task<Tuple<IXLWorkbook?, bool, IEnumerable<MesParamDTO>>> ReportTemplateFileSaveAborded(Guid reportTemplateId, string fileFullPath)
    {
        if (NeedCheckReportTemplateBeforeSaving)
        {
            if (!String.IsNullOrEmpty(uploadFileWarning))
            {
                if (CanCheckReportTemplateFile().GetAwaiter().GetResult())
                {
                    bool dialogResult = true;
                    Tuple<IXLWorkbook?, bool?, IEnumerable<MesParamDTO>> dialogReturnVar;
                    IsLoading = false;

                    dialogReturnVar = await _dialogService.OpenAsync<CheckReportTemplateFile>(
                        "Проверка файла шаблона отчёта - " + ActiveReportTemplateDTO.Id.ToString() + " - " + ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name + " - " + ActiveReportTemplateDTO.MesDepartmentDTOFK.Name
                        , new Dictionary
                            <string, object>
                     () { { "ReportTemplateId", ActiveReportTemplateDTO.Id},
                         {"ReportTemplateFilePath", fileFullPath.HideSlash() },
                                 { "ReportTemplateTypeName" , ActiveReportTemplateDTO.ReportTemplateTypeDTOFK.Name.Trim().ToUpper()},
                                 { "ForSave", true}}
                            , new DialogOptions() { Width = "80vw", Left = "2vw", Top = "1vh", Bottom = "1vh", ShowClose = false });

                    dialogResult = dialogReturnVar.Item2 == false ? true : false;
                    return new Tuple<IXLWorkbook?, bool, IEnumerable<MesParamDTO>>(dialogReturnVar.Item1, dialogResult, dialogReturnVar.Item3);
                }
            }
        }
        return new Tuple<IXLWorkbook?, bool, IEnumerable<MesParamDTO>>(null, false, new List<MesParamDTO>());
    }


    private async Task FillReportTemplateToMesParam(ReportTemplateDTO reportTemplateDTOPar, IXLWorkbook? workbookPar, IEnumerable<MesParamDTO> mesParamListDTOPar)
    {
        if (workbookPar != null)
        {
            await _reportTemplateToMesParamRepository.DeleteAllByReportTemplateId(reportTemplateDTOPar.Id);
            string reportTeplateTypeName = reportTemplateDTOPar.ReportTemplateTypeDTOFK.Name.Trim().ToUpper();
            if (reportTeplateTypeName == SD.EmbReportTemplateTypeName.Trim().ToUpper()
                || reportTeplateTypeName == SD.CorrectionReportTemplateTypeName.Trim().ToUpper()
                || reportTeplateTypeName == SD.TebReportTemplateTypeName.Trim().ToUpper())
            {
                // добавление тэгов TagLibrary
                await _reportTemplateToMesParamRepository.AddFromWorksheet(reportTemplateDTOPar.Id, workbookPar, "TagLibrary", "A", 1, mesParamListDTOPar);
                // добавление тэгов OutputData
                await _reportTemplateToMesParamRepository.AddFromWorksheet(reportTemplateDTOPar.Id, workbookPar, "OutputData", "A", 1, mesParamListDTOPar);
            }
            if (reportTeplateTypeName == SD.EmbReportTemplateTypeName.Trim().ToUpper()
                || reportTeplateTypeName == SD.TebReportTemplateTypeName.Trim().ToUpper())
            {
                // добавление тэгов Отчет матрица
                await _reportTemplateToMesParamRepository.AddFromWorksheet(reportTemplateDTOPar.Id, workbookPar, "Отчет матрица", "P", 9, mesParamListDTOPar);
            }
            else
            if (reportTeplateTypeName == SD.EmbReportTemplateTypeName.Trim().Replace("е", "ё").ToUpper()
                || reportTeplateTypeName == SD.TebReportTemplateTypeName.Trim().Replace("е", "ё").ToUpper())
            {
                await _reportTemplateToMesParamRepository.AddFromWorksheet(reportTemplateDTOPar.Id, workbookPar, "Отчёт матрица", "P", 9, mesParamListDTOPar);
            }
            if (reportTeplateTypeName == SD.CorrectionReportTemplateTypeName.Trim().ToUpper())
            {
                // добавление тэгов Форма корректировок
                await _reportTemplateToMesParamRepository.AddFromWorksheet(reportTemplateDTOPar.Id, workbookPar, "Форма корректировок", "N", 10, mesParamListDTOPar);
            }
        }
    }
}