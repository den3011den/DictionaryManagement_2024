@page "/reports/ReportTemplateType/AddEditReportTemplateType/{ReportTemplateTypeId}"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels

@inject IJSRuntime _jsRuntime
@inject IReportTemplateTypeRepository _reportTemplateTypeRepository
@inject ISettingsRepository _settingsRepository
@inject DialogService _dialogService

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <div class="row my-2">
        <div class="col-md-10">
            @if (IsLoading)
            {
                <Loading IsLoading="@IsLoading" />
            }
            else
            {
                <EditForm Model="ActiveReportTemplateTypeDTO" OnValidSubmit="AddEditReportTemplateTypeProcedure">
                    <DataAnnotationsValidator />

                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12">
                            <RadzenStack>

                                @if (ReportTemplateTypeId != 0)
                                {
                                    <RadzenFormField Text="ИД" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                        <RadzenNumeric @bind-Value="@ActiveReportTemplateTypeDTO.Id" ReadOnly="true" />
                                    </RadzenFormField>
                                }
                                @if (ControlReportTemplateTypeCantChangeName == true && ActiveReportTemplateTypeDTO.CantChangeName == true)
                                {
                                    <RadzenLabel Text="Наименование данного типа шаблона отчёта нельзя менять" Style="color:salmon"></RadzenLabel>
                                }
                                <RadzenFormField Text="Наименование" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                    <RadzenTextBox @bind-Value="@ActiveReportTemplateTypeDTO.Name" 
                                            Disabled="@(ControlReportTemplateTypeCantChangeName == true && ActiveReportTemplateTypeDTO.CantChangeName == true)"/>
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveReportTemplateTypeDTO.Name"></ValidationMessage>

                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <div class="form-group py-2">
                        <button class="btn btn-primary" 
                                disabled=@(IsAdmin != AdminMode.IsAdmin || (ControlReportTemplateTypeCantChangeName == true && ActiveReportTemplateTypeDTO.CantChangeName == true))>@Title</button>
                        <NavLink @onclick="(() => OnClickCancel())" class="btn btn-secondary">Отмена</NavLink>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}




@code {

    [Parameter]
    public int ReportTemplateTypeId { get; set; }


    Variant variant = Variant.Outlined;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }

    public bool ControlReportTemplateTypeCantChangeName { get; set; } = true;

    public ReportTemplateTypeDTO ActiveReportTemplateTypeDTO { get; set; }

    private string Title { get; set; } = "Создать тип шаблона отчёта";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsLoading = true;
        await Task.Delay(100);
        await InvokeAsync(StateHasChanged);

        if (ReportTemplateTypeId == 0)
        {
            ActiveReportTemplateTypeDTO = new ReportTemplateTypeDTO();
        }
        else
        {
            ActiveReportTemplateTypeDTO = await _reportTemplateTypeRepository.Get(ReportTemplateTypeId);
            Title = "Изменить тип шаблона отчёта";
        }

        var tmpSetting = await _settingsRepository.GetByName(SD.ControlReportTemplateTypeCantChangeNameSettingName);
        if (tmpSetting == null)
        {
            ControlReportTemplateTypeCantChangeName = true;
        }
        else
        {
            ControlReportTemplateTypeCantChangeName = tmpSetting.Value.Trim() == "1" ? true : false;
        }

        IsLoading = false;
        await Task.Delay(100);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                if (ReportTemplateTypeId == 0)
                {
                    ActiveReportTemplateTypeDTO = new ReportTemplateTypeDTO();
                }
                else
                {
                    ActiveReportTemplateTypeDTO = await _reportTemplateTypeRepository.Get(ReportTemplateTypeId);
                    Title = "Изменить тип шаблона отчёта";
                }

                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/reports/ReportTemplateType");
        }
    }

    private async Task AddEditReportTemplateTypeProcedure()
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (ReportTemplateTypeId == 0)
            { // создание
                var foundByName = await _reportTemplateTypeRepository.GetByName(ActiveReportTemplateTypeDTO.Name);
                if (foundByName != null)
                {
                    await _jsRuntime.ToastrError("Уже есть тип шаблона отчёта с наименованием " + foundByName.Name + " (ИД: " + foundByName.Id.ToString() + ")");
                    return;
                }

                await _reportTemplateTypeRepository.Create(ActiveReportTemplateTypeDTO);

                await _jsRuntime.ToastrSuccess("Тип шаблона отчёта \"" + ActiveReportTemplateTypeDTO.Name + "\" создана");

                _dialogService.Close(ActiveReportTemplateTypeDTO);

            }
            else
            { // изменение типа шаблона отчёта

                var foundByName = await _reportTemplateTypeRepository.GetByName(ActiveReportTemplateTypeDTO.Name);
                if ((foundByName != null) && (foundByName.Id != ActiveReportTemplateTypeDTO.Id))
                {
                    await _jsRuntime.ToastrError("Уже есть тип шаблона отчёта с наименованием " + foundByName.Name + " (ИД: " + foundByName.Id.ToString() + ")");
                    return;
                }

                await _reportTemplateTypeRepository.Update(ActiveReportTemplateTypeDTO);

                await _jsRuntime.ToastrSuccess("Тип шаблона отчёта \"" + ActiveReportTemplateTypeDTO.Name + " \" изменен");

                _dialogService.Close(ActiveReportTemplateTypeDTO);
            }
        }

    }

    private async Task OnClickCancel() => _dialogService.Close(null);


}
