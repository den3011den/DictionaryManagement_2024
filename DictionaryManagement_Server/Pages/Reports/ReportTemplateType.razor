@page "/reports/ReportTemplateType"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json
@using static StringExtension;


@inject IJSRuntime _jsRuntime
@inject IReportTemplateTypeRepository _reportTemplateTypeRepository
@inject IReportTemplateRepository _reportTemplateRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository
@inject ILogEventRepository _logEventRepository
@inject DialogService _dialogService
@inject ISettingsRepository _settingsRepository

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">
        <div class="col-12">
            <h6 class="card-title text-primary"><a href="/">Главная</a> - <a href="/reports">Отчёты</a> - <strong><font style="font-size:1.1rem; color:cornflowerblue;text-decoration: cornflowerblue overline; text-underline-offset: 5px; text-decoration-thickness: 4px;">Типы шаблонов отчётов</font></strong></h6>
        </div>

        <RadzenRow AlignItems="AlignItems.Start">
            <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-1 mb-1" Text="Добавить новый тип шаблонов отчётов"
                          Click="@InsertRow" Disabled=@(reportTemplateTypeDTOToInsert != null || reportTemplateTypeDTOToUpdate != null || IsAdmin != AdminMode.IsAdmin || IsLoading) />
            <i class="bi bi-grip-vertical mt-2 mb-1"></i>
            <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Icon="refresh" class="mt-1 mb-1" Text="Обновить"
                          Click="() => OnAfterRenderAsync(true)" Disabled=@(reportTemplateTypeDTOToInsert != null || reportTemplateTypeDTOToUpdate != null || IsLoading) />
            <i class="bi bi-grip-vertical mt-2 mb-1"></i>
            @if (@excelExportFlag)
            {
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel"
                              IsBusy=@excelExportFlag BusyText="Выполняется ..." Disabled=@(reportTemplateTypeDTOToInsert != null || reportTemplateTypeDTOToUpdate != null || IsLoading) />
            }
            else
            {
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())"
                              IsBusy=@excelExportFlag BusyText="Выполняется ..." Disabled=@(reportTemplateTypeDTOToInsert != null || reportTemplateTypeDTOToUpdate != null || IsLoading)>
                    <i class="bi bi-database"></i><i class="bi bi-arrow-right"></i><i class="bi bi-grid-3x3"></i>&nbsp;&nbsp;Выгрузить в Excel
                </RadzenButton>
            }
        </RadzenRow>

        @if (IsLoading != true)
        {
            <RadzenDataGridApp @ref="reportTemplateTypeDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               @bind-Settings="@ReportTemplateTypeGridSettings" SettingsName="ReportTemplateTypeGridSettings"
                               Data="@reportTemplateTypeDTOs" TItem="ReportTemplateTypeDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.Advanced"
                               AllowColumnResize="false"
                               AllowVirtualization="true"
                               GridLines="DataGridGridLines.Both"
                               Style="height:calc(100vh - 158px)"
                               @bind-Value=@selectedTableReportTemplateType
                               RowDoubleClick="() => EditRow(selectedTableReportTemplateType.FirstOrDefault())">
                <Columns>
                    <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Property="Id" Title="Ид записи" Width="120px" />
                    <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Property="Name" Title="Наименование" Width="250px">
                        <Template Context="data">
                            <div style="white-space:pre-wrap">
                                @data.Name
                            </div>
                        </Template>
                        <EditTemplate Context="reportTemplateTypeDTO">
                            <RadzenTextBox @bind-Value="reportTemplateTypeDTO.Name"
                                           Style="@("width:100%; display: block;" + (reportTemplateTypeDTO.CantChangeName == true ? " color:darkgrey;":""))" Name="Name"
                                           Disabled="@(reportTemplateTypeDTO.CantChangeName == true)" />

                            <RadzenRequiredValidator Text="Обязательно к заполнению" Component="Name"/>
                            <RadzenLengthValidator Max=250 Text="Не больше 250 символов" Component="Name"/>
                        </EditTemplate>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Property="CanAutoCalc" Title="Доступен для настройки авторасчёта" Width="150px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.CanAutoCalc ReadOnly="true" TriState="false" TValue="bool?" />
                        </Template>
                        <EditTemplate Context="data">
                            <strong>
                                |
                                <RadzenCheckBox @bind-Value=data.CanAutoCalc TriState="false" TValue="bool?" Change="@(args => CanAutoCalcWarning(data.CanAutoCalc))" />
                                |
                            </strong>
                        </EditTemplate>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Property="CantChangeName" Title="Нельзя переименовать" Width="150px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.CantChangeName ReadOnly="true" TriState="false" TValue="bool?" />
                        </Template>
                        <EditTemplate Context="data">
                            <strong>
                                @((ControlReportTemplateTypeCantChangeName == true && data.OldCantChangeName == true) ? "" : "|")
                                <RadzenCheckBox @bind-Value=data.CantChangeName TriState="false" TValue="bool?"
                                                Disabled="@(ControlReportTemplateTypeCantChangeName == true && data.OldCantChangeName == true)" />
                                @((ControlReportTemplateTypeCantChangeName == true && data.OldCantChangeName == true) ? "" : "|")
                            </strong>
                        </EditTemplate>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Property="IsArchive" Title="Архив" Filterable="true" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="true" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Title="Действия" Context="reportTemplateTypeDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                        <Template Context="reportTemplateTypeDTO">
                            <RadzenButton title="Загрузить/скачать vba-скрипт файл" Icon="code" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@((args) => LoadUploadFile(reportTemplateTypeDTO, "bas"))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton title="Загрузить/скачать образец файла-шаблона" Icon="text_snippet" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@(args => LoadUploadFile(reportTemplateTypeDTO, "xlsx"))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton title="Редактировать" Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@(args => EditRow(reportTemplateTypeDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton>
                            @if (!reportTemplateTypeDTO.IsArchive)
                            {
                                <RadzenButton title="Удалить в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(reportTemplateTypeDTO))" @onclick:stopPropagation="true"
                                              Disabled="@((IsAdmin != AdminMode.IsAdmin) || (ControlReportTemplateTypeCantChangeName == true && reportTemplateTypeDTO.CantChangeName == true))">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton title="Восстановить из архива" ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(reportTemplateTypeDTO))" @onclick:stopPropagation="true"
                                              Disabled="@((IsAdmin != AdminMode.IsAdmin) || (ControlReportTemplateTypeCantChangeName == true && reportTemplateTypeDTO.CantChangeName == true))">
                                </RadzenButton>
                            }
                        </Template>
                        <EditTemplate Context="reportTemplateTypeDTO">
                            <RadzenButton title="Сохранить" Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@((args) => SaveRow(reportTemplateTypeDTO))" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton>
                            <RadzenButton title="Отмена" Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(reportTemplateTypeDTO))">
                            </RadzenButton>
                            @*                             <RadzenButton title="Удалить в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                    Click="@(args => DeleteRow(reportTemplateTypeDTO))"
                    Disabled="@((IsAdmin != AdminMode.IsAdmin) || (ControlReportTemplateTypeCantChangeName == true && reportTemplateTypeDTO.CantChangeName == true))">
                    </RadzenButton>
                    *@
                        </EditTemplate>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            <Loading IsLoading="@IsLoading" />
        }
    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    public string DeleteMessage { get; set; } = "";

    UserDTO? currentUserDTO = null;

    RadzenDataGrid<ReportTemplateTypeDTO> reportTemplateTypeDTOGrid;

    IEnumerable<ReportTemplateTypeDTO> reportTemplateTypeDTOs;

    IList<ReportTemplateTypeDTO>? selectedTableReportTemplateType;

    ReportTemplateTypeDTO reportTemplateTypeDTOToInsert;
    ReportTemplateTypeDTO reportTemplateTypeDTOToUpdate;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }
    public bool excelExportFlag { get; set; } = false;

    public bool ControlReportTemplateTypeCantChangeName { get; set; } = true;
    public bool CantChangeName { get; set; } = true;

    DataGridSettings _reportTemplateTypeGridSettings;
    public DataGridSettings ReportTemplateTypeGridSettings
    {
        get
        {
            return _reportTemplateTypeGridSettings;
        }
        set
        {
            if (_reportTemplateTypeGridSettings != value)
            {
                _reportTemplateTypeGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;
        if (!(await SD.CheckPageSettingsVersion("ReportTemplateTypeGridSettings", _jsRuntime)))
            return;
        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "ReportTemplateTypeGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _reportTemplateTypeGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }
    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;
        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('ReportTemplateTypeGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(ReportTemplateTypeGridSettings)}')");
        await SD.SetPageSettingsVersion("ReportTemplateTypeGridSettings", _jsRuntime);
    }


    void Reset()
    {
        reportTemplateTypeDTOToInsert = null;
        reportTemplateTypeDTOToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                currentUserDTO = await _authorizationRepository.GetCurrentUserDTO();
                await LoadStateAsync();
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                reportTemplateTypeDTOs = _reportTemplateTypeRepository.GetAll(SD.SelectDictionaryScope.All).Result;
                if (reportTemplateTypeDTOs != null)
                {
                    foreach (var item in reportTemplateTypeDTOs)
                        item.OldCantChangeName = item.CantChangeName;
                }
                var tmpSetting = await _settingsRepository.GetByName(SD.ControlReportTemplateTypeCantChangeNameSettingName);
                if (tmpSetting == null)
                {
                    ControlReportTemplateTypeCantChangeName = true;
                }
                else
                {
                    ControlReportTemplateTypeCantChangeName = tmpSetting.Value.Trim() == "1" ? true : false;
                }

                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/reports");
        }
    }

    async Task EditRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            reportTemplateTypeDTO.OldCantChangeName = reportTemplateTypeDTO.CantChangeName;
            reportTemplateTypeDTOToUpdate = reportTemplateTypeDTO;
            await reportTemplateTypeDTOGrid.EditRow(reportTemplateTypeDTO);
        }
    }

    async Task OnUpdateRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (reportTemplateTypeDTO == reportTemplateTypeDTOToInsert)
            {
                reportTemplateTypeDTOToInsert = null;
            }

            reportTemplateTypeDTOToUpdate = null;

            var objectForRestore = await _reportTemplateTypeRepository.Get(reportTemplateTypeDTO.Id);

            var objectForCheckName = await _reportTemplateTypeRepository.GetByName(reportTemplateTypeDTO.Name);
            if (objectForCheckName != null)
            {
                if (objectForCheckName.Id != reportTemplateTypeDTO.Id)
                {

                    reportTemplateTypeDTO.Name = objectForRestore.Name;
                    reportTemplateTypeDTO.NeedAutoCalc = objectForRestore.NeedAutoCalc;
                    reportTemplateTypeDTO.CanAutoCalc = objectForRestore.CanAutoCalc;
                    reportTemplateTypeDTO.CantChangeName = objectForRestore.CantChangeName;
                    reportTemplateTypeDTO.OldCantChangeName = objectForRestore.CantChangeName;
                    await reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTO);
                    await reportTemplateTypeDTOGrid.Reload();
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть запись типа шаблона отчётов с наименованием \"" + objectForCheckName.Name + "\" с ИД записи = " + objectForCheckName.Id.ToString());
                    return;
                }
            }

            if (reportTemplateTypeDTO.CanAutoCalc != objectForRestore.CanAutoCalc)
            {
                IEnumerable<ReportTemplateDTO> reportTemplateListForCheck = (await _reportTemplateRepository.GetAll(SD.SelectDictionaryScope.All))
                    .Where(u => u.ReportTemplateTypeId == reportTemplateTypeDTO.Id && u.NeedAutoCalc != reportTemplateTypeDTO.CanAutoCalc);

                if (reportTemplateListForCheck != null)
                {
                    if (reportTemplateListForCheck.Count() > 0)
                    {
                        bool needChangeReportTemplates = false;
                        if (reportTemplateTypeDTO.CanAutoCalc == true)
                        {
                            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Изменение доступности для авторасчёта",
                                "Вы устанавливаете доступность авторасчёта для типа шаблона отчёта \"" + reportTemplateTypeDTO.Name +
                                "\". Есть шаблоны отчётов, для которых не включен признак необходимости авторасчётов в количестве " +
                                reportTemplateListForCheck.Count().ToString() + ". Включить для них необходимость авторасчётов ?",
                                "Включить", "Не включать");
                            if (selectionResult == true)
                            {
                                needChangeReportTemplates = true;
                            }
                        }

                        if (reportTemplateTypeDTO.CanAutoCalc == false)
                        {
                            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Изменение доступности для авторасчёта",
                                "Вы отключаете доступность авторасчёта для типа шаблона отчёта \"" + reportTemplateTypeDTO.Name +
                                "\". Есть шаблоны отчётов, для которых включен признак необходимости авторасчётов в количестве " +
                                reportTemplateListForCheck.Count().ToString() + ". Выключить для них необходимость авторасчётов ?",
                                "Выключить", "Не выключать");
                            if (selectionResult == true)
                            {
                                needChangeReportTemplates = true;
                            }
                        }

                        if (needChangeReportTemplates == true)
                        {
                            foreach (var item in reportTemplateListForCheck)
                            {
                                item.NeedAutoCalc = reportTemplateTypeDTO.CanAutoCalc;
                                if (reportTemplateTypeDTO.CanAutoCalc == true)
                                {
                                    if (item.AutoCalcNumber == null || item.AutoCalcNumber <= 0)
                                    {
                                        item.AutoCalcNumber = 1;
                                    }
                                    if (item.AutoCalcOrder == null || item.AutoCalcOrder <= 0)
                                    {
                                        item.AutoCalcOrder = 1;
                                    }
                                }
                                await _reportTemplateRepository.Update(item);
                            }
                        }
                    }
                }
            }
            ReportTemplateTypeDTO oldReportTemplateTypeDTO = await _reportTemplateTypeRepository.Get(reportTemplateTypeDTO.Id);
            ReportTemplateTypeDTO newReportTemplateTypeDTO = await _reportTemplateTypeRepository.Update(reportTemplateTypeDTO, SD.UpdateMode.Update);
            await _logEventRepository.ToLog<ReportTemplateTypeDTO>(oldObject: oldReportTemplateTypeDTO, newObject: newReportTemplateTypeDTO, "Изменение типа шаблона отчёта", "Тип шаблона отчёта: ", _authorizationRepository);
        }
    }

    async Task SaveRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
            await reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTO);
    }

    async Task LoadUploadFile(ReportTemplateTypeDTO reportTemplateTypeDTO, string fileExtension)
    {
        IsLoading = true;
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            if (fileExtension.Trim().ToUpper() != "BAS" && fileExtension.Trim().ToUpper() != "XLSX")
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "В качестве параметра получено расширение для файла: " + fileExtension + ". Процедура работает только с расширениями \"vba\" и \"xlsx\"");
                return;
            }
            string filePath = "";
            string fileName = "";

            SettingsDTO? settingsDTO = await _settingsRepository.GetByName(SD.ReportTemplatePathSettingName);
            if (settingsDTO != null)
            {
                filePath = settingsDTO.Value.Trim();
            }
            else
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Не найдена настройка с наименованием " + SD.TempFilePathSettingName + " в таблице настроек settings");
                return;
            }

            if (String.IsNullOrEmpty(filePath))
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Пустое значение настройки с наименованием " + SD.TempFilePathSettingName + " в таблице настроек settings");
                return;
            }

            if (!System.IO.Directory.Exists(filePath))
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Не найден путь: " + filePath);
                return;
            }

            if (fileExtension.Trim().ToUpper() == "BAS")
            {
                if (reportTemplateTypeDTO.VbaScriptFileName != null && !String.IsNullOrEmpty(reportTemplateTypeDTO.VbaScriptFileName.Trim()))
                    fileName = reportTemplateTypeDTO.VbaScriptFileName.Trim();
                else
                    fileName = reportTemplateTypeDTO.Name.TranslitLatToKir() + "_VbaScriptFile_" + reportTemplateTypeDTO.Id.ToString() + "." + fileExtension.Trim();
            }
            else
            {
                if (reportTemplateTypeDTO.SampleFileName != null && !String.IsNullOrEmpty(reportTemplateTypeDTO.SampleFileName.Trim()))
                    fileName = reportTemplateTypeDTO.SampleFileName.Trim();
                else
                    fileName = reportTemplateTypeDTO.Name.TranslitLatToKir() + "_SampleFile_" + reportTemplateTypeDTO.Id.ToString() + "." + fileExtension.Trim();
            }
            fileName = SD.RemoveInvalidCharsFromFilename(fileName);

            IsLoading = false;
            bool dialogResult = await _dialogService.OpenAsync<LoadUploadFile>(fileExtension.Trim().ToUpper() == "BAS" ? "Файл Vba-скрипт для " + reportTemplateTypeDTO.Name : "Файл-образец для типа шаблона отчёта " + reportTemplateTypeDTO.Name, new Dictionary
                        <string, object>
                () { { "Title", fileExtension.Trim().ToUpper() == "BAS" ? "Файл Vba-скрипт для " + reportTemplateTypeDTO.Name : "Файл-образец для типа шаблона отчёта " + reportTemplateTypeDTO.Name}
                            ,{ "FilePath", filePath.HideSlash() }
                            ,{ "FileName", fileName }
                            ,{ "FileExtension", fileExtension }}
                        , new DialogOptions() { Width = $"{60}rem", Left = "calc(50vw - 40rem)", ShowClose = false });
            if (dialogResult == true)
            {
                ReportTemplateTypeDTO? reportTemplateTypeChangedDTO = await _reportTemplateTypeRepository.Get(reportTemplateTypeDTO.Id);
                if (reportTemplateTypeChangedDTO != null)
                {
                    if (fileExtension.Trim().ToUpper() == "BAS")
                        reportTemplateTypeChangedDTO.VbaScriptFileName = fileName;
                    else
                        reportTemplateTypeChangedDTO.SampleFileName = fileName;

                    await _reportTemplateTypeRepository.Update(reportTemplateTypeChangedDTO, UpdateMode.Update);
                    await _logEventRepository.AddRecord("Изменение типа шаблона отчёта", currentUserDTO.Id, fileName, fileName, false
                    , fileExtension.Trim().ToUpper() == "BAS" ? "Файл vba-скрипт для типа шаблона отчёта " + reportTemplateTypeDTO.Name + " изменён" : "Файл - образец для типа шаблона отчёта " + reportTemplateTypeDTO.Name + " изменён");
                }
            }
        }
        IsLoading = false;
    }


    void CancelEdit(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (reportTemplateTypeDTO == reportTemplateTypeDTOToInsert)
        {
            reportTemplateTypeDTOToInsert = null;
        }

        reportTemplateTypeDTOToUpdate = null;

        var objectForRestore = _reportTemplateTypeRepository.Get(reportTemplateTypeDTO.Id).GetAwaiter().GetResult();
        if (objectForRestore != null)
        {
            reportTemplateTypeDTO.Name = objectForRestore.Name;
            reportTemplateTypeDTO.NeedAutoCalc = objectForRestore.NeedAutoCalc;
            reportTemplateTypeDTO.CanAutoCalc = objectForRestore.CanAutoCalc;
            reportTemplateTypeDTO.CantChangeName = objectForRestore.CantChangeName;
            reportTemplateTypeDTO.OldCantChangeName = objectForRestore.CantChangeName;
            reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTO);
        }
        reportTemplateTypeDTOGrid.Reload();
        reportTemplateTypeDTOGrid.CancelEditRow(reportTemplateTypeDTO);
    }

    async Task DeleteRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (_dialogs != null)
            {
                if (reportTemplateTypeDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление типа шаблона отчётов", "Удалить тип шаблона \"" + reportTemplateTypeDTO.Name + "\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление типа шаблона отчётов", "Восстановить тип шаблона \"" + reportTemplateTypeDTO.Name + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }
                }
            }

            if (reportTemplateTypeDTO == reportTemplateTypeDTOToInsert)
            {
                reportTemplateTypeDTOToInsert = null;
            }

            if (reportTemplateTypeDTO == reportTemplateTypeDTOToUpdate)
            {
                reportTemplateTypeDTOToUpdate = null;
            }

            if (reportTemplateTypeDTOs.Contains(reportTemplateTypeDTO))
            {
                ReportTemplateTypeDTO oldReportTemplateTypeDTO = await _reportTemplateTypeRepository.Get(reportTemplateTypeDTO.Id);
                ReportTemplateTypeDTO newReportTemplateTypeDTO = new ReportTemplateTypeDTO();
                string logEventTypeName = "";
                if (reportTemplateTypeDTO.IsArchive)
                {
                    await _reportTemplateTypeRepository.Update(reportTemplateTypeDTO, SD.UpdateMode.RestoreFromArchive);
                    reportTemplateTypeDTO.IsArchive = false;
                    await _jsRuntime.ToastrSuccess("Тип шаблона отчёта " + reportTemplateTypeDTO.Name + " восстановлен из архива");
                    logEventTypeName = "Восстановление из архива типа шаблона отчёта";
                }
                else
                {
                    await _reportTemplateTypeRepository.Update(reportTemplateTypeDTO, SD.UpdateMode.MoveToArchive);
                    reportTemplateTypeDTO.IsArchive = true;
                    await _jsRuntime.ToastrSuccess("Тип шаблона отчёта " + reportTemplateTypeDTO.Name + " удален в архив");
                    logEventTypeName = "Удаление в архив типа шаблона отчёта";
                }
                await _logEventRepository.ToLog<ReportTemplateTypeDTO>
                    (oldObject: oldReportTemplateTypeDTO, newObject: newReportTemplateTypeDTO, logEventTypeName, "Тип шаблона отчёта: ", _authorizationRepository);
                await reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTO);
                //await sapEquipmentDTOGrid.Reload();
            }
            else
            {
                reportTemplateTypeDTOGrid.CancelEditRow(reportTemplateTypeDTO);
                await reportTemplateTypeDTOGrid.Reload();
            }
        }
    }

    async Task InsertRow()
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            reportTemplateTypeDTOToInsert = new ReportTemplateTypeDTO();
            reportTemplateTypeDTOToInsert.NeedAutoCalc = false;
            reportTemplateTypeDTOToInsert.CanAutoCalc = false;
            reportTemplateTypeDTOToInsert.CantChangeName = false;
            reportTemplateTypeDTOToInsert.OldCantChangeName = false;
            await reportTemplateTypeDTOGrid.InsertRow(reportTemplateTypeDTOToInsert);
        }
    }

    async Task OnCreateRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            reportTemplateTypeDTOToInsert = null;
            var objectForCheckName = await _reportTemplateTypeRepository.GetByName(reportTemplateTypeDTO.Name);
            if (objectForCheckName != null)
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть запись типа шаблона отчётов с наименованием \"" + objectForCheckName.Name + "\" с ИД записи = " + objectForCheckName.Id.ToString());
                reportTemplateTypeDTOGrid.CancelEditRow(reportTemplateTypeDTO);
                await reportTemplateTypeDTOGrid.Reload();
                return;
            }

            var newDTO = await _reportTemplateTypeRepository.Create(reportTemplateTypeDTO);
            await _logEventRepository.ToLog<ReportTemplateTypeDTO>
                (oldObject: null, newObject: newDTO, "Добавление типа шаблона отчёта", "Тип шаблона отчёта: ", _authorizationRepository);
            //reportTemplateTypeDTOToInsert.Id = newDTO.Id;
            //await reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTOToInsert);

            await OnAfterRenderAsync(true);
        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "ReportTemplateType_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelReportTemplateType(filename, (IEnumerable<ReportTemplateTypeDTO>
                )reportTemplateTypeDTOGrid.View);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }

    async Task CanAutoCalcWarning(bool? CanAutoCalcVar)
    {
        if (CanAutoCalcVar == true)
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "Данная настройка не будет иметь эффекта, если в AutoCalc не предусмотрен авторасчёт " +
            "для данного типа шаблона отчёта, а так же если в \"Отчёты - Шаблоны отчётов\" не включен авторасчёт для конкретных шаблонов отчётов.");
        }
    }
}



