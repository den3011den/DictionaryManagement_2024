@page "/reports/ReportEntity"
@attribute [Authorize]
@using System.Text.Json;
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels;


@inject IJSRuntime _jsRuntime
@inject IReportEntityRepository _reportEntityRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository

@inject DialogService _dialogService

@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/reports">Отчёты</a> - <a href="/reports/ReportEntity">Журнал экземпляров отчётов</a></h6>
        </div>


        @if (IsLoading != true)
        {

            <RadzenRow Gap="1rem" Class="rz-p-0 rz-p-lg-2">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack>
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenRadioButtonList @bind-Value=@applyRadioGroupValue TValue="int" Change="@(args => ChangeEndDate())">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="По дате скачивания из СИР" Value="1" />
                                        <RadzenRadioButtonListItem Text="По дате загрузки в СИР" Value="2" />
                                    </Items>
                                </RadzenRadioButtonList>
                                <RadzenDatePicker @bind-Value=@startDate Change="@(args => ChangeStartDate())" ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenDatePicker @bind-Value=@endDate Change="@(args => ChangeEndDate())" Min=minEndDate Max=@maxEndDate ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Disabled="@ApplyButtonDisabled" Text="Применить" Click="@(args => GetRows())" />
                                <RadzenButton title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>


            <RadzenDataGridApp @bind-Settings="@ReportEntityGridSettings" SettingsName="ReportEntityGridSettings" @ref="reportEntityDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               Data="@reportEntityDTOs" TItem="ReportEntityDTO"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.SimpleWithMenu"
                               Density=Density.Compact
                               ShowPagingSummary="true"
                               GridLines="DataGridGridLines.Both"
                               AllowVirtualization="true"
                               Style="height:calc(100vh - 190px)"
                               ShowCleanGridSettingsHeaderButton="false"
                               ShowCleanGridFiltersHeaderButton="false"
                               ShowCleanGridSortsHeaderButton="false">
                <HeaderTemplate>
                    <RadzenButton Size="ButtonSize.Small" Text="Очистить настройки интерфейса страницы" Icon="settings"
                                  ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="(args) => CleanPageSettingsCustom()">
                    </RadzenButton>
                    <RadzenButton Size="ButtonSize.Small" Text="Очистить все фильтры" Icon="filter_alt"
                                  ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="(args) => CleanAllFiltersCustom()">
                    </RadzenButton>

                    <RadzenButton Size="ButtonSize.Small" Text="Очистить все сортировки" Icon="swap_vert"
                                  ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="(args) => CleanAllOrdersCustom()">
                    </RadzenButton>
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumnApp TItem="ReportEntityDTO" Property="ToStringId" Title="Ид экземпляра отчёта" Width="100px" TextAlign="TextAlign.Center"
                                             FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId">
                        <Template Context="data1">
                            <div style="white-space:pre-wrap; font-size: 12px">
                                <strong>
                                    @data1.ToStringId
                                </strong>
                            </div>
                        </Template>

                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportEntityDTO" Title="Производство" Property="ReportDepartmentDTOFK.ToStringHierarchyShortName" Type="typeof(IEnumerable<string>)" Width="150px"
                                             FilterValue="@selectedDepartments" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedDepartments
                                            Change=OnSelectedDepartmentsChange Data="@(distinctDepartmentsInList)" AllowClear="true" Multiple="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width: 300px; font-size:0.75rem"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @(data1.ReportDepartmentDTOFK == null ? "" : data1.ReportDepartmentDTOFK.ToStringHierarchyShortName)
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportEntityDTO" Title="Шаблон отчёта" Property="ReportTemplateDTOFK.ReportTemplateTypeDTOFK.Name" Type="typeof(IEnumerable<string>)" Width="120px"
                                             FilterValue="@selectedReportTemplateTypes" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedReportTemplateTypes
                                            Change=OnSelectedReportTemplateTypesChange Data="@(distinctReportTemplateTypesInList)" AllowClear="true" Multiple="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width: 300px; font-size:0.75rem"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.ReportTemplateDTOFK.ReportTemplateTypeDTOFK.Name
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportEntityDTO" Property="DownloadTime" Title="Скачан из СИР" Width="150px" TextAlign="TextAlign.Center"
                                             Filterable="true" Sortable="true" FilterOperator="FilterOperator.Equals">
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportEntityDTO" Title="Кто скачал" Property="DownloadUserDTOFK.UserName" Type="typeof(IEnumerable<string>)" Width="160px"
                                             FilterValue="@selectedDownloadUsers" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedDownloadUsers
                                            Change=OnSelectedDownloadUsersChange Data="@(distinctDownloadUsersInList)" AllowClear="true" Multiple="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width: 300px; font-size:0.75rem"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>

                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.DownloadUserDTOFK.UserName
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportEntityDTO" Property="DownloadSuccessFlag" Title="Файл" Width="35px" TextAlign="TextAlign.Center" Filterable="false" Sortable="false">
                        <Template Context="data">
                            <RadzenButton title="Скачать файл" Icon="download" ButtonStyle="ButtonStyle.Light" Disabled="@(String.IsNullOrEmpty(data.DownloadReportFileName))" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadReportEntityDownloadFile(data.Id))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportEntityDTO" Property="UploadTime" Title="Загружен в СИР" Width="150px" TextAlign="TextAlign.Center"
                                             Filterable="true" Sortable="true" FilterOperator="FilterOperator.Equals">
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp TItem="ReportEntityDTO" Title="Кто загрузил" Property="UploadUserDTOFK.UserName" Type="typeof(IEnumerable<string>)" Width="160px"
                                             FilterValue="@selectedUploadUsers" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedUploadUsers
                                            Change=OnSelectedUploadUsersChange Data="@(distinctUploadUsersInList)" AllowClear="true" Multiple="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width: 300px; font-size:0.75rem"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>

                        <Template Context="data1">
                            @if (data1.UploadUserDTOFK != null)
                            {
                                <div style="white-space:pre-wrap; font-size: 12px">
                                    @data1.UploadUserDTOFK.UserName
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp TItem="ReportEntityDTO" Property="UploadSuccessFlag" Title="Файл" Filterable="false" Sortable="false" Width="35px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenButton title="Скачать файл" Icon="download" ButtonStyle="ButtonStyle.Light" Disabled="@(String.IsNullOrEmpty(data.UploadReportFileName))" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadReportEntityUploadFile(data.Id))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp Title="Действия" TItem="ReportEntityDTO" Context="reportEntityDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                        <Template Context="reportEntityDTO">
                            <RadzenButton title="Детали" ButtonStyle="ButtonStyle.Info" Icon="info" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => ShowReportEntityDetails(reportEntityDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }

    </div>
}

<style>
    .rz-dropdown-item, .rz-menuitem, .rz-autocomplete-list-item, .rz-multiselect-item, .rz-dropdown-items li, .rz-autocomplete-items li, .rz-multiselect-items li {
        font-size: 0.75rem;
    }
</style>

@code {

    [CascadingParameter]
    bool iconMenuActive { get; set; }

    _Dialogs? _dialogs { get; set; }

    IEnumerable<ReportEntityDTO>? reportEntityDTOs;

    IEnumerable<string> selectedDepartments;
    IEnumerable<string> selectedReportTemplateTypes;
    IEnumerable<string> selectedDownloadUsers;
    IEnumerable<string> selectedUploadUsers;

    List<string> distinctDepartmentsInList = new List<string>();
    List<string> distinctReportTemplateTypesInList = new List<string>();
    List<string> distinctDownloadUsersInList = new List<string>();
    List<string> distinctUploadUsersInList = new List<string>();

    RadzenDataGrid<ReportEntityDTO> reportEntityDTOGrid;
    DateTime startDate = DateTime.Today.AddMonths(-1);
    DateTime endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime minEndDate = DateTime.Today.AddMonths(-1).AddDays(-1);

    bool excelExportFlag = false;

    int applyRadioGroupValue = 1;

    bool ApplyButtonDisabled = true;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {
                applyRadioGroupValue = 1;
                ApplyButtonDisabled = false;

                //await GetRows();

                startDate = DateTime.Today.AddMonths(-1);
                endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                minEndDate = DateTime.Today.AddMonths(-1).AddDays(-1);

                IsLoading = true;
                await LoadStateAsync();
                StateHasChanged();
                await GetRows();

                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/reports");
    }


    DataGridSettings _reportEntityGridSettings;
    public DataGridSettings ReportEntityGridSettings
    {
        get
        {
            return _reportEntityGridSettings;
        }
        set
        {
            if (_reportEntityGridSettings != value)
            {
                _reportEntityGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        if (!(await SD.CheckPageSettingsVersion("ReportEntityGridSettings", _jsRuntime)))
            return;
        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "ReportEntityGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _reportEntityGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
            if (_reportEntityGridSettings != null)
            {
                var col_var = _reportEntityGridSettings.Columns.Where(c => c.Property == "ReportDepartmentDTOFK.ToStringHierarchyShortName").FirstOrDefault();
                if (col_var.FilterValue != null)
                {
                    selectedDepartments = JsonSerializer.Deserialize<List<string>>(col_var.FilterValue.ToString());
                }
                var col_var2 = _reportEntityGridSettings.Columns.Where(c => c.Property == "ReportTemplateDTOFK.ReportTemplateTypeDTOFK.Name").FirstOrDefault();
                if (col_var2.FilterValue != null)
                {
                    selectedReportTemplateTypes = JsonSerializer.Deserialize<List<string>>(col_var2.FilterValue.ToString());
                }
                var col_var3 = _reportEntityGridSettings.Columns.Where(c => c.Property == "DownloadUserDTOFK.UserName").FirstOrDefault();
                if (col_var3.FilterValue != null)
                {
                    selectedDownloadUsers = JsonSerializer.Deserialize<List<string>>(col_var3.FilterValue.ToString());
                }
                var col_var4 = _reportEntityGridSettings.Columns.Where(c => c.Property == "UploadUserDTOFK.UserName").FirstOrDefault();
                if (col_var4.FilterValue != null)
                {
                    selectedUploadUsers = JsonSerializer.Deserialize<List<string>>(col_var4.FilterValue.ToString());
                }
            }

        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;
        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('ReportEntityGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(ReportEntityGridSettings)}')");
        await SD.SetPageSettingsVersion("ReportEntityGridSettings", _jsRuntime);
    }

    async Task DownloadReportEntityDownloadFile(Guid id)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            //_navigationManager.NavigateTo("/DownloadFileController/DownloadReportTemplateFile/" + id.ToString());
            await _jsRuntime.InvokeVoidAsync("open", "/DownloadFileController/DownloadReportEntityDownloadFile/" + id.ToString(), "_blank");
        }
    }

    async Task DownloadReportEntityUploadFile(Guid id)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            //_navigationManager.NavigateTo("/DownloadFileController/DownloadReportTemplateFile/" + id.ToString());
            await _jsRuntime.InvokeVoidAsync("open", "/DownloadFileController/DownloadReportEntityUploadFile/" + id.ToString(), "_blank");
        }
    }

    private async Task ChangeStartDate()
    {
        ApplyButtonDisabled = false;
        maxEndDate = startDate.AddMonths(1).AddSeconds(-1);
        minEndDate = startDate.AddDays(-1);
        if (endDate > maxEndDate)
            endDate = maxEndDate;

    }

    private async Task ChangeEndDate()
    {

        ApplyButtonDisabled = false;
    }


    async Task GetRows()
    {
        IsLoading = true;
        await LoadStateAsync();
        StateHasChanged();
        if (applyRadioGroupValue == 1)
            reportEntityDTOs = await _reportEntityRepository.GetAllByDownloadTimeInterval(startDate, endDate);
        else
            reportEntityDTOs = await _reportEntityRepository.GetAllByUploadTimeInterval(startDate, endDate);

        List<string> distinctDepartmentsInList = new List<string>();
        List<string> distinctReportTemplateTypesInList = new List<string>();
        List<string> distinctDownloadUsersInList = new List<string>();
        List<string> distinctUploadUsersInList = new List<string>();

        await GetDistincts();

        ApplyButtonDisabled = true;
        IsLoading = false;
        StateHasChanged();

    }



    async Task ShowReportEntityDetails(ReportEntityDTO reportEntityDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsLoading = true;

            ReportEntityDTO dialogResult = null;

            if (reportEntityDTO == null)
            {
                await _jsRuntime.ToastrError("Пустой объект для отображения деталей записи");
                IsLoading = false;
                return;
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<ReportEntityDetails>("Подробно по экземпляру отчёта " + reportEntityDTO.Id.ToString(), new Dictionary
                    <string, object>
                    () { { "ReportEntityId", reportEntityDTO.Id } }, new DialogOptions() { Width = iconMenuActive ? $"{1700}px" : $"{1560}px", Left = $"{20}px" });
            }

            IsLoading = false;
        }
    }
    async Task ExcelExport()
    {

        var ttt = reportEntityDTOGrid;
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "ReportEntity_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelReportEntity(filename, (IEnumerable<ReportEntityDTO>)reportEntityDTOGrid.View);

            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }

    void OnSelectedDepartmentsChange(object value)
    {
        if (selectedDepartments != null && !selectedDepartments.Any())
        {
            selectedDepartments = null;
        }
    }

    void OnSelectedReportTemplateTypesChange(object value)
    {
        if (selectedReportTemplateTypes != null && !selectedReportTemplateTypes.Any())
        {
            selectedReportTemplateTypes = null;
        }
    }

    void OnSelectedDownloadUsersChange(object value)
    {
        if (selectedDownloadUsers != null && !selectedDownloadUsers.Any())
        {
            selectedDownloadUsers = null;
        }
    }

    void OnSelectedUploadUsersChange(object value)
    {
        if (selectedUploadUsers != null && !selectedUploadUsers.Any())
        {
            selectedUploadUsers = null;
        }
    }


    private async Task CleanPageSettingsCustom()
    {
        await Task.CompletedTask;
        var selectionResult = await _dialogService.Confirm("Будут очищены пользовательские настройки страницы: видимость колонок, порядок следования колонок, ширина колонок, применённые фильтры", "Сбросить настройки интерфейса страницы",
            new ConfirmOptions { OkButtonText = "Очистить", CancelButtonText = "Отмена", Left = "300px" });

        if (selectionResult != true)
        {
            await InvokeAsync(SaveStateAsync);
            return;
        }

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.removeItem", "ReportEntityGridSettings");

        ReportEntityGridSettings = null;

        selectedDepartments = null;
        selectedReportTemplateTypes = null;
        selectedDownloadUsers = null;
        selectedUploadUsers = null;

        if (reportEntityDTOs != null)
        {
            await GetDistincts();
        }

        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);

    }

    async Task CleanAllFiltersCustom()
    {
        var selectionResult = await _dialogService.Confirm("Будут очищены все фильтры", "Очистить фильтры",
            new ConfirmOptions { OkButtonText = "Очистить", CancelButtonText = "Отмена", Left = "300px" });

        if (selectionResult != true)
        {
            await InvokeAsync(SaveStateAsync);
            return;
        }

        if (ReportEntityGridSettings != null)
        {
            foreach (var c in ReportEntityGridSettings.Columns)
            {
                c.FilterValue = null;
                c.SecondFilterValue = null;
            }

        }

        selectedDepartments = null;
        selectedReportTemplateTypes = null;
        selectedDownloadUsers = null;
        selectedUploadUsers = null;

        if (reportEntityDTOs != null)
        {
            await GetDistincts();
        }

        await InvokeAsync(SaveStateAsync);
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);

    }

    async Task CleanAllOrdersCustom()
    {

        var selectionResult = await _dialogService.Confirm("Будут очищены все сортировки", "Очистить сортировки",
            new ConfirmOptions { OkButtonText = "Очистить", CancelButtonText = "Отмена", Left = "300px" });

        if (selectionResult != true)
        {
            await InvokeAsync(SaveStateAsync);
            return;
        }

        if (ReportEntityGridSettings != null)
        {
            foreach (var c in ReportEntityGridSettings.Columns)
            {
                c.SortOrder = null;
            }
            await InvokeAsync(SaveStateAsync);
            await Task.Delay(200);
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task GetDistincts()
    {
        if (reportEntityDTOs != null)
        {
            distinctDepartmentsInList = (List<string>)reportEntityDTOs.Where(u => u.ReportDepartmentDTOFK != null).OrderBy(u => u.ReportDepartmentDTOFK.ToStringHierarchyShortName)
                .Select(u => u.ReportDepartmentDTOFK.ToStringHierarchyShortName).Distinct().ToList();
            distinctReportTemplateTypesInList = (List<string>)reportEntityDTOs.OrderBy(u => u.ReportTemplateDTOFK.ReportTemplateTypeDTOFK.Name)
                .Select(u => u.ReportTemplateDTOFK.ReportTemplateTypeDTOFK.Name).Distinct().ToList();
            distinctDownloadUsersInList = (List<string>)reportEntityDTOs.Where(u => u.DownloadUserDTOFK != null).OrderBy(u => u.DownloadUserDTOFK.UserName)
                .Select(u => u.DownloadUserDTOFK.UserName).Distinct().ToList();
            distinctUploadUsersInList = (List<string>)reportEntityDTOs.Where(u => u.UploadUserDTOFK != null).OrderBy(u => u.UploadUserDTOFK.UserName)
                .Select(u => u.UploadUserDTOFK.UserName).Distinct().ToList();
        }
    }

}


