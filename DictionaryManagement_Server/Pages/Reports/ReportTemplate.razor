@page "/reports/ReportTemplate"
@attribute [Authorize]
@using ClosedXML.Excel
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Business.Repository;
@using DictionaryManagement_Common;
@using DictionaryManagement_Models.IntDBModels;
@using System.Text.Json;
@using Microsoft.Data.SqlClient

@inject IJSRuntime _jsRuntime
@inject IReportTemplateRepository _reportTemplateRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository
@inject ILogEventRepository _logEventRepository
@inject DialogService _dialogService
@inject NavigationManager _navigationManager
@inject IMesParamRepository _mesParamRepository
@inject ISettingsRepository _settingsRepository
@inject IReportTemplateToMesParamRepository _reportTemplateToMesParamRepository

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">
        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/reports">Отчёты</a> - <a href="/reports/ReportTemplate">Шаблоны отчётов</a></h6>
        </div>

        @if (IsLoading != true)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-1 mb-1" Text="Добавить новый шаблон отчёта"
                              Click="@(args => EditRow(null))" Disabled="@(IsAdmin != AdminMode.IsAdmin || LoadTagsFromAllReportTemplatesFlag)" />
                <i class="bi bi-grip-vertical mt-2 mb-1"></i>
                @if (@excelExportFlag)
                {
                    <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" IsBusy=@excelExportFlag BusyText="Выполняется ..." Disabled=LoadTagsFromAllReportTemplatesFlag />
                }
                else
                {
                    <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on"
                                  Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." Disabled=LoadTagsFromAllReportTemplatesFlag>
                        <i class="bi bi-database"></i><i class="bi bi-arrow-right"></i><i class="bi bi-grid-3x3"></i>&nbsp;&nbsp;Выгрузить в Excel
                    </RadzenButton>
                }
                @if (ShowLoadTagsFromAllReportTemplatesButtonFlag)
                {
                    <i class="bi bi-grip-vertical mt-2 mb-1"></i>
                    <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" class="mt-1 mb-1" title="Загрузка списков тэгов с листов файлов всех поддерживаемых шаблонов отчётов в таблицу ReportTemplateToMesParam"
                                  Text="Перезагрузить списки тэгов из файлов шаблонов отчётов" Click="@(args => LoadTagsFromAllReportTemplates())" IsBusy="@LoadTagsFromAllReportTemplatesFlag" BusyText="@LoadTagsFromAllReportTemplatesText"
                                  Disabled="@(IsAdmin != AdminMode.IsAdmin)"
                                  Image="/css/bootstrap-icons-1.10.5/bi--tags-fill.svg">
                    </RadzenButton>
                }
            </RadzenRow>

            <RadzenDataGridApp @bind-Settings="@ReportTemplateGridSettings" SettingsName="ReportTemplateGridSettings" @ref="reportTemplateDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               Data="@reportTemplateDTOs" TItem="ReportTemplateDTO"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.Advanced"
                               Density=Density.Compact
                               ShowPagingSummary="true"
                               AllowColumnReorder="true"
                               AllowColumnResize="true"
                               AllowColumnPicking="true"
                               SelectionMode="DataGridSelectionMode.Single"
                               AllowRowSelectOnRowClick=true
                               ColumnWidth="200px"
                               AllowVirtualization="true"
                               GridLines="DataGridGridLines.Both"
                               Style=@(iconMenuActive ? "height:calc(100vh - 160px); width:calc(100vw - 120px)" : "height:calc(100vh - 160px); width:calc(100vw - 280px);")
                               ShowCleanGridSortsHeaderButton="false"
                               ShowCleanGridFiltersHeaderButton="false"
                               ShowCleanGridSettingsHeaderButton="false"
                               @bind-Value=@selectedTableReportTemplates
                               RowDoubleClick="() => EditRow(selectedTableReportTemplates.FirstOrDefault())">
                <HeaderTemplate>
                    <RadzenButton Size="ButtonSize.Small" Text="Очистить настройки интерфейса страницы" Icon="settings"
                                  ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="(args) => CleanPageSettingsCustom()">
                    </RadzenButton>
                    <RadzenButton Size="ButtonSize.Small" Text="Очистить все фильтры" Icon="filter_alt"
                                  ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="(args) => CleanAllFiltersCustom()">
                    </RadzenButton>

                    <RadzenButton Size="ButtonSize.Small" Text="Очистить все сортировки" Icon="swap_vert"
                                  ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="(args) => CleanAllOrdersCustom()">
                    </RadzenButton>
                    <RadzenButton Style="text-transform:none" Size="ButtonSize.Small" Text=@("Записей с учётом фильтров "+ @reportTemplateDTOGrid.View.Count().ToString()+" из "+(reportTemplateDTOs == null ? "0" : reportTemplateDTOs.Count().ToString())+" в выборке")
                                  ButtonStyle="ButtonStyle.Primary" Variant="Variant.Text">
                    </RadzenButton>
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Property="ToStringId" Title="Ид шаблона отчёта"
                                             FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.ToStringId
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Property="AddTime" Title="Время добавления" FilterOperator="FilterOperator.Equals">
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Title="Добавил" Property="AddUserDTOFK.UserName" Type="typeof(IEnumerable<string>)"
                                             FilterValue="@selectedAddUsers" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedAddUsers
                                            Change=OnSelectedAddUsersChange Data="@(distinctAddUsersInList)" AllowClear="true" Multiple="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width: 30vw; font-size:0.75rem"
                                            PopupStyle="max-height:40vh"
                                            Chips="true"
                                            OpenOnFocus="true"
                                            FilterPlaceholder="Поиск..."
                                            MaxSelectedLabels="10"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>
                        <Template Context="data1">
                            <div style="white-space:pre-wrap" id="@(data1.ToStringId.ToUpper())">
                                @data1.AddUserDTOFK.UserName
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Title="Тип отчёта" Property="ReportTemplateTypeDTOFK.Name" Type="typeof(IEnumerable<string>)"
                                             FilterValue="@selectedReportTemplates" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedReportTemplates
                                            Change=OnSelectedReportTemplatesChange Data="@(distinctReportTemplatesInList)" AllowClear="true" Multiple="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width: 30vw; font-size:0.75rem"
                                            PopupStyle="max-height:40vh"
                                            Chips="true"
                                            OpenOnFocus="true"
                                            FilterPlaceholder="Поиск..."
                                            MaxSelectedLabels="10"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>
                        <Template Context="data1">
                            <div style="white-space:pre-wrap">
                                @data1.ReportTemplateTypeDTOFK.Name
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Title="Производство" Property="MesDepartmentDTOFK.ToStringHierarchyShortName" Type="typeof(IEnumerable<string>)"
                                             FilterProperty="MesDepartmentDTOFK.ToStringHierarchyShortName" SortProperty="MesDepartmentDTOFK.ToStringHierarchyShortName" FilterValue="@selectedMesDepartments"
                                             FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedMesDepartments
                                            Change=OnSelectedMesDepartmentsChange Data="@(distinctMesDepartmentsInList)" AllowClear="true" Multiple="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width: 30vw; font-size:0.75rem"
                                            PopupStyle="max-height:40vh"
                                            Chips="true"
                                            OpenOnFocus="true"
                                            FilterPlaceholder="Поиск..."
                                            MaxSelectedLabels="10"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>
                        <Template Context="data1">
                            <div style="white-space:pre-wrap">
                                <strong>
                                    @data1.MesDepartmentDTOFK.ToStringHierarchyShortName
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Title="Тип выходных данных" Property="DestDataTypeDTOFK.Name" Type="typeof(IEnumerable<string>)"
                                             FilterValue="@selectedDestDataTypes" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">

                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedDestDataTypes
                                            Change=OnSelectedDestDataTypesChange Data="@(distinctDestDataTypesInList)" AllowClear="true" Multiple="true" Style="width: 30vw;"
                                            PopupStyle="max-height:40vh"
                                            Chips="true"
                                            OpenOnFocus="true"
                                            FilterPlaceholder="Поиск..."
                                            MaxSelectedLabels="10"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>

                        <Template Context="data1">
                            <div style="white-space:pre-wrap">
                                @data1.DestDataTypeDTOFK.Name
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Property="NeedAutoCalc" Title="Авторасчёт" Filterable="true" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.NeedAutoCalc ReadOnly="true" TriState="false" TValue="bool?" />
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Property="AutoCalcOrder" Title="Порядок авторасчёта" Filterable="true" TextAlign="TextAlign.Center">
                        <Template Context="data1">
                            @if (data1.NeedAutoCalc == true)
                            {
                                <div style="white-space:pre-wrap; font-weight:700">
                                    @data1.AutoCalcOrder.ToString()
                                </div>
                            }
                            else
                            {
                                <div style="white-space:pre-wrap; color: #E3E8EB;">
                                    @data1.AutoCalcOrder.ToString()
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Property="AutoCalcNumber" Title="Кол-во прогонов авторасчёта" Filterable="true" TextAlign="TextAlign.Center">
                        <Template Context="data1">
                            @if (data1.NeedAutoCalc == true)
                            {
                                <div style="white-space:pre-wrap; font-weight:700">
                                    @data1.AutoCalcNumber.ToString()
                                </div>
                            }
                            else
                            {
                                <div style="white-space:pre-wrap; color: #E3E8EB;">
                                    @data1.AutoCalcNumber.ToString()
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="ReportTemplateDTO" Property="IsArchive" Title="Арх" Filterable="true" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp Title="Действия" TItem="ReportTemplateDTO" Context="reportTemplateDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="85px" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="reportTemplateDTO">
                            <div class="row">
                                <div class="col-3">
                                    <RadzenButton title="Тэги шаблона отчёта" Variant=" Variant.Flat" Size="ButtonSize.ExtraSmall"
                                                  Click="@(args => ShowReportTemplateTags(reportTemplateDTO))" @onclick:stopPropagation="true"
                                                  ButtonStyle="ButtonStyle.Light" 
                                                  Disabled="@(reportTemplateDTO.ReportTemplateToMesParamListDTO == null || !reportTemplateDTO.ReportTemplateToMesParamListDTO.Any() || LoadTagsFromAllReportTemplatesFlag)" class="my-1 ms-1 p-0">
                                        <i class="bi bi-tags-fill"></i>
                                    </RadzenButton>
                                </div>

                                <div class="col-3">
                                    <RadzenButton title="@((reportTemplateDTO.ReportTemplateFileHistoryListDTO == null || !reportTemplateDTO.ReportTemplateFileHistoryListDTO.Any()) ? "Нет истории изменения файла (появилась с версии 0.15.2.3)" : "История изменений файла шаблона")" Icon="history"
                                                  ButtonStyle="ButtonStyle.Light" Variant=" Variant.Flat" Size="ButtonSize.ExtraSmall"
                                                  Click="@(args => ShowFileHistory(reportTemplateDTO))" @onclick:stopPropagation="true"
                                                  Disabled="@(reportTemplateDTO.ReportTemplateFileHistoryListDTO == null || !reportTemplateDTO.ReportTemplateFileHistoryListDTO.Any() || LoadTagsFromAllReportTemplatesFlag)" class="my-1 ms-1 p-0">
                                    </RadzenButton>
                                </div>
                                <div class="col-3">
                                    <RadzenButton title="Скачать файл шаблона" Icon="download" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                                  Click="@(args => DownloadTemplate(reportTemplateDTO.Id))" @onclick:stopPropagation="true" Disabled="@LoadTagsFromAllReportTemplatesFlag" class="my-1 ms-1 p-0">
                                    </RadzenButton>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-3">
                                </div>
                                <div class="col-3">
                                    <RadzenButton title="Редактировать" Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall"
                                                  Click="@(args => EditRow(reportTemplateDTO))" @onclick:stopPropagation="true" Disabled="@LoadTagsFromAllReportTemplatesFlag" class="my-1 ms-1 p-0">
                                    </RadzenButton>
                                </div>

                                @if (!reportTemplateDTO.IsArchive)
                                {
                                    <div class="col-3">
                                        <RadzenButton title="Удалить в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" class="my-1 ms-1 p-0"
                                                      Click="@(args => DeleteRow(reportTemplateDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin || LoadTagsFromAllReportTemplatesFlag)">
                                        </RadzenButton>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-3">
                                        <RadzenButton title="Восстановить из архива" ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" class="my-1 ms-1 p-0"
                                                      Click="@(args => DeleteRow(reportTemplateDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin || LoadTagsFromAllReportTemplatesFlag)">
                                        </RadzenButton>
                                    </div>
                                }
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            <Loading IsLoading="@IsLoading" />
        }
    </div>
}
<style>
    .rz-dropdown-item, .rz-menuitem, .rz-autocomplete-list-item, .rz-multiselect-item, .rz-dropdown-items li, .rz-autocomplete-items li, .rz-multiselect-items li {
        font-size: 0.75rem;
    }
</style>

@code {

    [CascadingParameter]
    bool iconMenuActive { get; set; }
    _Dialogs? _dialogs { get; set; }

    ReportTemplateDTO? selectedToRemember = null;

    IEnumerable<ReportTemplateDTO>? reportTemplateDTOs;

    RadzenDataGrid<ReportTemplateDTO> reportTemplateDTOGrid;

    IList<ReportTemplateDTO>? selectedTableReportTemplates;

    IEnumerable<string> selectedReportTemplates;
    IEnumerable<string> selectedDestDataTypes;
    IEnumerable<string> selectedMesDepartments;
    IEnumerable<string> selectedAddUsers;

    List<string> distinctReportTemplatesInList = new List<string>();
    List<string> distinctDestDataTypesInList = new List<string>();
    List<string> distinctMesDepartmentsInList = new List<string>();
    List<string> distinctAddUsersInList = new List<string>();

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }
    public bool excelExportFlag { get; set; } = false;
    public bool LoadTagsFromAllReportTemplatesFlag = false;
    public bool ShowLoadTagsFromAllReportTemplatesButtonFlag = false;

    public string LoadTagsFromAllReportTemplatesText = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                try
                {
                    reportTemplateDTOs = await _reportTemplateRepository.GetAll(SD.SelectDictionaryScope.All);
                }
                catch (SqlException ex) when (ex.Number == -2)
                {
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "Превышен интервал запроса к БД, равный " + SD.SqlCommandConnectionTimeout.ToString() + " сек.");
                    reportTemplateDTOs = new List<ReportTemplateDTO>();
                }

                ShowLoadTagsFromAllReportTemplatesButtonFlag = false;
                var settingsDTO = await _settingsRepository.GetByName(SD.ShowFillReportTemplateToMesParamTableForAllReportTemplatesButtonSettingName);
                if (settingsDTO != null)
                    if (settingsDTO.Value.Trim() == "1")
                        ShowLoadTagsFromAllReportTemplatesButtonFlag = true;
                await GetDistincts();
                await LoadStateAsync();
                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/reports");
        }
    }

    DataGridSettings _reportTemplateGridSettings;
    public DataGridSettings ReportTemplateGridSettings
    {
        get
        {
            return _reportTemplateGridSettings;
        }
        set
        {
            if (_reportTemplateGridSettings != value)
            {
                _reportTemplateGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;
        if (!(await SD.CheckPageSettingsVersion("ReportTemplateGridSettings", _jsRuntime)))
            return;

        var result = (await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "ReportTemplateGridSettings"));
        if (!string.IsNullOrEmpty(result))
        {

            _reportTemplateGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
            if (_reportTemplateGridSettings != null)
            {
                var col_var = _reportTemplateGridSettings.Columns.Where(c => c.Property == "ReportTemplateTypeDTOFK.Name").FirstOrDefault();
                if (col_var.FilterValue != null)
                {
                    selectedReportTemplates = JsonSerializer.Deserialize<List<string>>(col_var.FilterValue.ToString());
                }
                var col_var2 = _reportTemplateGridSettings.Columns.Where(c => c.Property == "DestDataTypeDTOFK.Name").FirstOrDefault();
                if (col_var2.FilterValue != null)
                {
                    selectedDestDataTypes = JsonSerializer.Deserialize<List<string>>(col_var2.FilterValue.ToString());
                }
                var col_var3 = _reportTemplateGridSettings.Columns.Where(c => c.Property == "MesDepartmentDTOFK.ToStringHierarchyShortName").FirstOrDefault();
                if (col_var3.FilterValue != null)
                {
                    selectedMesDepartments = JsonSerializer.Deserialize<List<string>>(col_var3.FilterValue.ToString());
                }
                var col_var4 = _reportTemplateGridSettings.Columns.Where(c => c.Property == "AddUserDTOFK.UserName").FirstOrDefault();
                if (col_var4.FilterValue != null)
                {
                    selectedAddUsers = JsonSerializer.Deserialize<List<string>>(col_var4.FilterValue.ToString());
                }
            }
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;
        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('ReportTemplateGridSettings',
            '{JsonSerializer.Serialize<DataGridSettings>(ReportTemplateGridSettings)}')");
        await SD.SetPageSettingsVersion("ReportTemplateGridSettings", _jsRuntime);
    }

    async Task DownloadTemplate(Guid id)
    {
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            //_navigationManager.NavigateTo("/DownloadFileController/DownloadReportTemplateFile/" + id.ToString());
            await _jsRuntime.InvokeVoidAsync("open", "/DownloadFileController/DownloadReportTemplateFile/" + id.ToString(), "_blank");
        }
    }

    async Task EditRow(ReportTemplateDTO reportTemplateDTO)
    {

        if ((IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly) && !LoadTagsFromAllReportTemplatesFlag)
        {
            IsLoading = true;
            ReportTemplateDTO dialogResult = null;
            if (reportTemplateDTO == null)
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditReportTemplate>("Добавить шаблон отчёта", new Dictionary<string, object>() { { "ReportTemplateId", Guid.Empty } }, new DialogOptions() { Width = $"{90}rem", Left = $"calc(50vw - 55rem)" });
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditReportTemplate>("Изменить шаблон отчёта", new Dictionary<string, object>() { { "ReportTemplateId", reportTemplateDTO.Id } }, new DialogOptions() { Width = $"{90}rem", Left = $"calc(50vw - 55rem)" });
            }

            if (dialogResult != null)
            {
                await SetPosition(dialogResult);

                IsLoading = true;
                await LoadStateAsync();
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                reportTemplateDTOs = await _reportTemplateRepository.GetAll(SD.SelectDictionaryScope.All);
                await GetDistincts();
                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1000);
                await GoToPosition(selectedToRemember);
                await Task.Delay(10);
                await InvokeAsync(StateHasChanged);
            }
            IsLoading = false;
        }
    }

    async Task ShowFileHistory(ReportTemplateDTO reportTemplateDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            IsLoading = true;
            ReportTemplateDTO dialogResult = null;
            if (reportTemplateDTO == null)
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Пустой объект шаблона отчёта");
            }
            else
            {
                if (reportTemplateDTO.ReportTemplateFileHistoryListDTO == null || !reportTemplateDTO.ReportTemplateFileHistoryListDTO.Any())
                {
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Отсутствует история изменения файла шаблона отчёта");
                }
                else
                {
                    IsLoading = false;
                    dialogResult = await _dialogService.OpenAsync<ShowReportTemplateFileHistory>("История изменений шаблона отчёта " + reportTemplateDTO.Id.ToString(), new Dictionary
                            <string, object>
                            () { { "DataList", (IEnumerable<ReportTemplateFileHistoryDTO>)reportTemplateDTO.ReportTemplateFileHistoryListDTO.OrderByDescending(u => u.AddTime) } }
                            , new DialogOptions() { Width = $"{70}vw", Left = "10vw" });
                    IsLoading = false;
                }
            }
            IsLoading = false;
        }
    }

    async Task ShowReportTemplateTags(ReportTemplateDTO reportTemplateDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            IsLoading = true;
            ReportTemplateDTO dialogResult = null;
            if (reportTemplateDTO == null)
            {

            }
            else
            {
                if (reportTemplateDTO.ReportTemplateFileHistoryListDTO == null || reportTemplateDTO.ReportTemplateFileHistoryListDTO.Count() <= 0)
                {
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Отсутствует список тэгов шаблона отчёта");
                }
                else
                {
                    IsLoading = false;
                    dialogResult = await _dialogService.OpenAsync<ShowReportTemplateTags>("Тэги шаблона отчёта " + reportTemplateDTO.Id.ToString(), new Dictionary
                            <string, object>
                           () { { "DataList", (IEnumerable<ReportTemplateToMesParamDTO>)reportTemplateDTO.ReportTemplateToMesParamListDTO.OrderBy(u => u.SheetName).ThenBy(u => u.MesParamCode) } }
                            , new DialogOptions() { Width = $"{85}vw", Left = "1vw" });
                    IsLoading = false;
                }
            }
            IsLoading = false;
        }
    }


    async Task DeleteRow(ReportTemplateDTO reportTemplateDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (_dialogs != null)
            {
                if (reportTemplateDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление шаблона отчёта", "<strong>Удалить</strong> шаблон:<br/>\"" + reportTemplateDTO.Description + "\"<br/><strong>в архив ?</strong>", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление шаблона отчёта", "Восстановить шаблон отчёта \"" + reportTemplateDTO.Description + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }

                    var settingDTO = await _settingsRepository.GetByName(SD.ReportOutputSheetSettingName);

                    if (settingDTO != null)
                    {
                        var mesParamCodeList = await _reportTemplateToMesParamRepository.GetTagListInOtherNotArchiveReportTemplatesBySheetName(reportTemplateDTO.Id, settingDTO.Value, settingDTO.Value);
                        if (mesParamCodeList != null && mesParamCodeList.Any())
                        {
                            string reportsStr = "";
                            string templateStrId = "";
                            string templateStrType = "";
                            string templateStrDepartment = "";
                            foreach (var item in mesParamCodeList)
                            {
                                templateStrId = item.ReportTemplateId.ToString();
                                templateStrType = item.ReportTemplateDTOFK != null ? item.ReportTemplateDTOFK.ReportTemplateTypeDTOFK.Name : "";
                                templateStrDepartment = item.ReportTemplateDTOFK != null ? (item.ReportTemplateDTOFK.MesDepartmentDTOFK != null ? item.ReportTemplateDTOFK.MesDepartmentDTOFK.ToStringHierarchyShortName : "") : "";
                                reportsStr = reportsStr + "<li>Тэг: " + item.MesParamCode
                                    + "<br/> Ид шаблона: " + templateStrId + "<br/> Тип: "
                                    + templateStrType + "<br/> Производство: "
                                    + templateStrDepartment + "</li><br/>";

                            }
                            bool selectionResult2 = await _dialogs.ShowYesOrNoDialogBox("Восстановление шаблона отчёта",
                                "<strong><div style=\"color:red\">Тэги листа OutputData встречаются на листе OutputData других не архивных шаблонов отчётов.</div><br/>"
                                + "ВСЁ РАВНО ВОССТАНОВИТЬ?</strong>", "Восстановить", "Отмена", reportsStr);
                            if (selectionResult2 == false)
                            {
                                await _jsRuntime.ToastrSuccess("Отмена восстановления");
                                return;
                            }
                        }
                    }
                }
            }

            ReportTemplateDTO oldReportTemplateDTO = await _reportTemplateRepository.GetById(reportTemplateDTO.Id);

            if (reportTemplateDTO.IsArchive)
            {
                await _reportTemplateRepository.Delete(reportTemplateDTO.Id, SD.UpdateMode.RestoreFromArchive);
                reportTemplateDTO.IsArchive = false;
                await _logEventRepository.ToLog<ReportTemplateDTO>(oldReportTemplateDTO, reportTemplateDTO, "Восстановление из архива шаблона отчёта", "Шаблон отчёта: ", _authorizationRepository);
                await _jsRuntime.ToastrSuccess("Шаблон отчёта \"" + reportTemplateDTO.Description + "\" восстановлен из архива");
            }
            else
            {
                await _reportTemplateRepository.Delete(reportTemplateDTO.Id, SD.UpdateMode.MoveToArchive);
                reportTemplateDTO.IsArchive = true;
                await _logEventRepository.ToLog<ReportTemplateDTO>(oldReportTemplateDTO, reportTemplateDTO, "Удаление в архив шаблона отчёта", "Шаблон отчёта: ", _authorizationRepository);
                await _jsRuntime.ToastrSuccess("Шаблон отчёта \"" + reportTemplateDTO.Description + "\" удалён в архив");
            }
            await reportTemplateDTOGrid.UpdateRow(reportTemplateDTO);
        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "ReportTemplate_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelReportTemplate(filename, (IEnumerable<ReportTemplateDTO>)reportTemplateDTOGrid.View);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }

    void OnSelectedReportTemplatesChange(object value)
    {
        if (selectedReportTemplates != null && !selectedReportTemplates.Any())
        {
            selectedReportTemplates = null;
        }
    }

    void OnSelectedDestDataTypesChange(object value)
    {
        if (selectedDestDataTypes != null && !selectedDestDataTypes.Any())
        {
            selectedDestDataTypes = null;
        }
    }

    void OnSelectedMesDepartmentsChange(object value)
    {
        if (selectedMesDepartments != null && !selectedMesDepartments.Any())
        {
            selectedMesDepartments = null;
        }
    }

    void OnSelectedAddUsersChange(object value)
    {
        if (selectedAddUsers != null && !selectedAddUsers.Any())
        {
            selectedAddUsers = null;
        }
    }

    private async Task CleanPageSettingsCustom()
    {
        await Task.CompletedTask;
        var selectionResult = await _dialogService.Confirm("Будут очищены пользовательские настройки страницы: видимость колонок, порядок следования колонок, ширина колонок, применённые фильтры", "Сбросить настройки интерфейса страницы",
            new ConfirmOptions { OkButtonText = "Очистить", CancelButtonText = "Отмена", Left = "30vw" });

        if (selectionResult != true)
        {
            await InvokeAsync(SaveStateAsync);
            return;
        }

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.removeItem", "ReportTemplateGridSettings");

        if (ReportTemplateGridSettings != null)
        {
            foreach (var c in ReportTemplateGridSettings.Columns)
            {
                c.SortOrder = null;
                c.FilterValue = null;
                c.SecondFilterValue = null;
                c.Visible = true;
                c.OrderIndex = 0;
                if (reportTemplateDTOGrid.ColumnWidth != null)
                    c.Width = reportTemplateDTOGrid.ColumnWidth;
            }
        }

        selectedReportTemplates = null;
        selectedDestDataTypes = null;
        selectedMesDepartments = null;
        selectedAddUsers = null;

        if (reportTemplateDTOs != null)
        {
            await GetDistincts();
        }
        await SaveStateAsync();
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }

    async Task CleanAllFiltersCustom()
    {
        var selectionResult = await _dialogService.Confirm("Будут очищены все фильтры", "Очистить фильтры",
            new ConfirmOptions { OkButtonText = "Очистить", CancelButtonText = "Отмена", Left = "30vw" });

        if (selectionResult != true)
        {
            await InvokeAsync(SaveStateAsync);
            return;
        }

        if (ReportTemplateGridSettings != null)
        {
            foreach (var c in ReportTemplateGridSettings.Columns)
            {
                c.FilterValue = null;
                c.SecondFilterValue = null;
            }

        }

        selectedReportTemplates = null;
        selectedDestDataTypes = null;
        selectedMesDepartments = null;
        selectedAddUsers = null;

        if (reportTemplateDTOs != null)
        {
        }

        await InvokeAsync(SaveStateAsync);
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);

    }

    async Task CleanAllOrdersCustom()
    {

        var selectionResult = await _dialogService.Confirm("Будут очищены все сортировки", "Очистить сортировки",
            new ConfirmOptions { OkButtonText = "Очистить", CancelButtonText = "Отмена", Left = "30vw" });

        if (selectionResult != true)
        {
            await InvokeAsync(SaveStateAsync);
            return;
        }

        if (ReportTemplateGridSettings != null)
        {
            foreach (var c in ReportTemplateGridSettings.Columns)
            {
                c.SortOrder = null;
            }
            await InvokeAsync(SaveStateAsync);
            await Task.Delay(200);
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task GetDistincts()
    {
        distinctReportTemplatesInList = (List<string>)reportTemplateDTOs.OrderBy(u => u.ReportTemplateTypeDTOFK.Name)
    .Select(u => u.ReportTemplateTypeDTOFK.Name).Distinct().ToList();
        distinctDestDataTypesInList = (List<string>)reportTemplateDTOs.OrderBy(u => u.DestDataTypeDTOFK.Name)
            .Select(u => u.DestDataTypeDTOFK.Name).Distinct().ToList();
        distinctMesDepartmentsInList = (List<string>)reportTemplateDTOs.OrderBy(u => u.MesDepartmentDTOFK.ToStringHierarchyShortName)
            .Select(u => u.MesDepartmentDTOFK.ToStringHierarchyShortName).Distinct().ToList();
        distinctAddUsersInList = (List<string>)reportTemplateDTOs.OrderBy(u => u.AddUserDTOFK.UserName)
            .Select(u => u.AddUserDTOFK.UserName).Distinct().ToList();
    }

    async Task LoadTagsFromAllReportTemplates()
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            await Task.Delay(200);
            await InvokeAsync(StateHasChanged);

            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Загрузка тэгов из шаблонов отчётов",
                "Будут перезагружены списки тэгов для всех шаблонов отчётов в таблицу ReportTemplateToMesParam. Процедура продолжительная. Запустить загрузку ?", "Загрузить", "Отмена");
            if (selectionResult == false)
            {
                await _jsRuntime.ToastrSuccess("Отмена");
                return;
            }

            //IsLoading = true;
            LoadTagsFromAllReportTemplatesFlag = true;
            LoadTagsFromAllReportTemplatesText = "Выбирается список поддерживаемых шаблонов отчётов ...";
            await Task.Delay(20);
            await InvokeAsync(StateHasChanged);

            var reportTemplateList = await _reportTemplateRepository.GetAll(SelectDictionaryScope.All);

            if (reportTemplateList == null || !reportTemplateList.Any())
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Получен пустой список шаблонов отчётов");
                //IsLoading = false;
                LoadTagsFromAllReportTemplatesFlag = false;
                LoadTagsFromAllReportTemplatesText = "";
                await Task.Delay(20);
                await InvokeAsync(StateHasChanged);
                return;
            }

            var reportTemplateListResult = reportTemplateList
                .Where(u => u.ReportTemplateTypeDTOFK.Name.Trim().ToUpper() == SD.EmbReportTemplateTypeName.Trim().ToUpper()
                    || u.ReportTemplateTypeDTOFK.Name.Trim().ToUpper() == SD.CorrectionReportTemplateTypeName.Trim().ToUpper()
                    || u.ReportTemplateTypeDTOFK.Name.Trim().ToUpper() == SD.TebReportTemplateTypeName.Trim().ToUpper()).ToList();

            if (reportTemplateListResult == null || !reportTemplateListResult.Any())
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Получен пустой список шаблонов отчётов");
                //IsLoading = false;
                LoadTagsFromAllReportTemplatesFlag = false;
                LoadTagsFromAllReportTemplatesText = "";
                await Task.Delay(20);
                await InvokeAsync(StateHasChanged);
                return;
            }

            var settingDTO = await _settingsRepository.GetByName(SD.ReportTemplatePathSettingName);

            if (settingDTO == null)
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Не найдена настройка с наименованием \"" + SD.ReportTemplatePathSettingName + "\" в справочнике настроек.");
                //IsLoading = false;
                LoadTagsFromAllReportTemplatesFlag = false;
                LoadTagsFromAllReportTemplatesText = "";
                await Task.Delay(20);
                await InvokeAsync(StateHasChanged);
                return;
            }

            string reportTemplatePath = settingDTO.Value;

            if (!System.IO.Directory.Exists(reportTemplatePath))
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Не найден путь \"" + reportTemplatePath + "\"");
                //IsLoading = false;
                LoadTagsFromAllReportTemplatesFlag = false;
                LoadTagsFromAllReportTemplatesText = "";
                await Task.Delay(20);
                await InvokeAsync(StateHasChanged);
                return;
            }

            await SetPosition();

            IEnumerable<MesParamDTO> mesParamDTOList = await _mesParamRepository.GetAll(SelectDictionaryScope.All);

            int reportTemplateCount = reportTemplateListResult.Count();
            int reportTemplateNumber = 0;

            string reportTemplateFilePath = "";
            bool errorFlag = false;

            foreach (var item in reportTemplateListResult)
            {
                reportTemplateNumber++;

                LoadTagsFromAllReportTemplatesText = "Обрабатывается файл " + reportTemplateNumber.ToString() + " из " + reportTemplateCount.ToString() + " ... ";
                await Task.Delay(20);
                await InvokeAsync(StateHasChanged);

                reportTemplateFilePath = reportTemplatePath + item.Id.ToString() + ".xlsx";

                if (!System.IO.File.Exists(reportTemplateFilePath))
                {
                    await _jsRuntime.ToastrSuccess("Не найден файл \"" + reportTemplateFilePath + "\"");
                    errorFlag = true;
                    continue;
                }
                try
                {
                    IXLWorkbook? workbook = null;
                    workbook = new XLWorkbook(reportTemplateFilePath);

                    await _reportTemplateToMesParamRepository.DeleteAllByReportTemplateId(item.Id);
                    string reportTeplateTypeName = item.ReportTemplateTypeDTOFK.Name.Trim().ToUpper();

                    if (reportTeplateTypeName == SD.EmbReportTemplateTypeName.Trim().ToUpper()
                            || reportTeplateTypeName == SD.CorrectionReportTemplateTypeName.Trim().ToUpper()
                            || reportTeplateTypeName == SD.TebReportTemplateTypeName.Trim().ToUpper())
                    {
                        // добавление тэгов TagLibrary
                        await _reportTemplateToMesParamRepository.AddFromWorksheet(item.Id, workbook, "TagLibrary", "A", 1, mesParamDTOList);
                        // добавление тэгов OutputData
                        await _reportTemplateToMesParamRepository.AddFromWorksheet(item.Id, workbook, "OutputData", "A", 1, mesParamDTOList);
                    }
                    if (reportTeplateTypeName == SD.EmbReportTemplateTypeName.Trim().ToUpper()
                        || reportTeplateTypeName == SD.TebReportTemplateTypeName.Trim().ToUpper())
                    {
                        // добавление тэгов Отчет матрица
                        await _reportTemplateToMesParamRepository.AddFromWorksheet(item.Id, workbook, "Отчет матрица", "P", 9, mesParamDTOList);
                    }
                    else
                    if (reportTeplateTypeName == SD.EmbReportTemplateTypeName.Trim().Replace("е", "ё").ToUpper()
                        || reportTeplateTypeName == SD.TebReportTemplateTypeName.Trim().Replace("е", "ё").ToUpper())
                    {
                        await _reportTemplateToMesParamRepository.AddFromWorksheet(item.Id, workbook, "Отчёт матрица", "P", 9, mesParamDTOList);
                    }
                    if (reportTeplateTypeName == SD.CorrectionReportTemplateTypeName.Trim().ToUpper())
                    {
                        // добавление тэгов Форма корректировок
                        await _reportTemplateToMesParamRepository.AddFromWorksheet(item.Id, workbook, "Форма корректировок", "N", 10, mesParamDTOList);
                    }
                }
                catch (Exception ex)
                {
                    errorFlag = true;
                    await _jsRuntime.ToastrError("Ошибка: " + ex.Message);
                }
            }

            if (errorFlag)
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "Выполнено с ошибками");
            else
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "success", "Готово");

            //IsLoading = false;
            LoadTagsFromAllReportTemplatesFlag = false;
            LoadTagsFromAllReportTemplatesText = "";
            // await Task.Delay(20);
            // await InvokeAsync(StateHasChanged);

            await LoadStateAsync();
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
            reportTemplateDTOs = await _reportTemplateRepository.GetAll(SD.SelectDictionaryScope.All);
            await GetDistincts();
            IsLoading = false;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1000);
            await GoToPosition(selectedToRemember);
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
            return;
        }
    }

    async Task SetPosition(ReportTemplateDTO? reportTemplateDTO = null)
    {
        await Task.CompletedTask;
        if (reportTemplateDTO != null)
            selectedToRemember = reportTemplateDTO;
        else
        {
            if (selectedTableReportTemplates != null && selectedTableReportTemplates.Any())
                selectedToRemember = selectedTableReportTemplates.First();
        }
    }

    async Task GoToPosition(ReportTemplateDTO? reportTemplateDTO)
    {
        if (reportTemplateDTO != null)
        {
            var selectedItem = reportTemplateDTOGrid.View.FirstOrDefault(u => u.Id == reportTemplateDTO.Id);
            await reportTemplateDTOGrid.SelectRow(selectedItem, true);
            await _jsRuntime.InvokeVoidAsync("eval", "(document.getElementById('" + reportTemplateDTO.ToStringId.ToUpper() + "') !==null) ? (document.getElementById('" + reportTemplateDTO.ToStringId.ToUpper() + "').scrollIntoView({ behavior: 'smooth',  block: 'center',})) : null");
        }
    }
}
