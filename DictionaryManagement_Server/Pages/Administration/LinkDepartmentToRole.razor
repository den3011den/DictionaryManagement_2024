@page "/administration/Role/LinkDepartmentToRole/{RoleId}"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels

@inject IJSRuntime _jsRuntime
@inject IRoleVMRepository _roleVMRepository
@inject IMesDepartmentRepository _mesDepartmentRepository
@inject IRoleToDepartmentRepository _roleToDepartmentRepository
@inject DialogService _dialogService
@inject ILogEventRepository _logEventRepository;

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row my-2">
        <div class="col-md-12">
            @if (IsLoading)
            {
                <Loading IsLoading="@IsLoading" />
            }
            else
            {
                <EditForm Model="ActiveRoleVMDTO" OnSubmit="AddMesDepartmentToRoleProcedure">
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12">
                            <RadzenStack>
                                <RadzenStack Gap="1rem">
                                    <RadzenDataGridApp AllowAlternatingRows="true" AllowFiltering="true" PageSize="10" AllowPaging="true" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                                                       Data="MesDepartmentList" TItem="MesDepartmentDTO"
                                                       FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                       FilterMode="FilterMode.Simple"
                                                       Density=Density.Compact
                                                       ShowPagingSummary="true"
                                                       AllowVirtualization="true"
                                                       ShowCleanGridSettingsHeaderButton="false"
                                                       ShowCleanGridFiltersHeaderButton="false"
                                                       ShowCleanGridSortsHeaderButton="false">
                                        <Columns>
                                            <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="Checked" Title=" " Filterable="true" Width="15px">
                                                <Template Context="data">
                                                    <RadzenCheckBox @bind-Value=data.Checked Disabled="false" TriState="false" TValue="bool" />
                                                </Template>
                                            </RadzenDataGridColumnApp>

                                            <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="ToStringId" Filterable="true" FilterProperty="ToStringId" Title="Ид" Width="75px">
                                            </RadzenDataGridColumnApp>
                                            <RadzenDataGridColumnApp TItem="MesDepartmentDTO" SortProperty="ToStringHierarchyShortName" FilterProperty="ToStringHierarchyShortName" Property="ToStringHierarchyShortName" Title="Наименование" Width="330px">
                                                <Template Context="data">
                                                    <div style="white-space:pre-line; word-wrap: break-word;">
                                                        @data.ToStringHierarchyShortName
                                                    </div>
                                                </Template>
                                            </RadzenDataGridColumnApp>
                                        </Columns>
                                    </RadzenDataGridApp>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <div class="form-group py-2">
                        <button title="Привязать отмеченные производства к роли" style="pointer-events: auto;" class="btn btn-success" disabled=@(IsAdmin != AdminMode.IsAdmin)>@Title</button>
                        <NavLink @onclick="(() => OnClickCancel())" class="btn btn-secondary">Отмена</NavLink>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}




@code {

    _Dialogs? _dialogs { get; set; }

    [Parameter]
    public Guid RoleId { get; set; }

    Variant variant = Variant.Outlined;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }

    RoleVMDTO ActiveRoleVMDTO { get; set; }
    IEnumerable<MesDepartmentDTO> MesDepartmentList { get; set; } = new List<MesDepartmentDTO>();

    private string Title { get; set; } = "Привязать производства к роли";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsLoading = true;
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
        ActiveRoleVMDTO = await _roleVMRepository.Get(RoleId);
        Title = "Добавить производства к роли";
        IsLoading = false;
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await Task.Delay(10);
                await InvokeAsync(StateHasChanged);
                MesDepartmentList = (await _mesDepartmentRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly)).OrderBy(u => u.ToStringHierarchyShortName);
                IsLoading = false;
                await Task.Delay(10);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/administration/Role");
        }
    }

    private async Task AddMesDepartmentToRoleProcedure()
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            var checkedMesDepartmentDTOList = MesDepartmentList.Where(u => u.Checked);
            if (checkedMesDepartmentDTOList.Count() <= 0)
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Не отмечено ни одного производства для добавления к роли");
                return;
            }

            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Добавление производств к роли", "Количество отмеченных производств: " + checkedMesDepartmentDTOList.Count().ToString()
                + ". Добавить ? ", "Добавить", "Отмена");
            if (selectionResult == false)
            {
                return;
            }

            RoleToDepartmentDTO addedRoleToDepartmentDTOItem = null;
            int addedCount = 0;
            foreach (var checkedMesDepartmentDTOItem in checkedMesDepartmentDTOList)
            {
                addedRoleToDepartmentDTOItem = await _roleVMRepository.AddRoleToDepartment(ActiveRoleVMDTO, checkedMesDepartmentDTOItem);

                if (addedRoleToDepartmentDTOItem == null)
                {
                    await _jsRuntime.ToastrError("Не удалось добавить производство \"" + checkedMesDepartmentDTOItem.ShortName + "\"!");
                }
                else
                {
                    addedCount = addedCount + 1;
                    Guid userId = (await _authorizationRepository.GetCurrentUserDTO()).Id;
                    await _logEventRepository.AddRecord("Добавление связки производства с ролью", userId, "<Пусто>",
                        ActiveRoleVMDTO.Name + " --> " + checkedMesDepartmentDTOItem.ShortName, false,
                        "Роль: " + ActiveRoleVMDTO.Name + " Производство: " + checkedMesDepartmentDTOItem.ToStringHierarchyShortName);
                }
            }

            if (addedCount == checkedMesDepartmentDTOList.Count())
            {
                await _jsRuntime.ToastrSuccess("Добавлено производств " + addedCount.ToString() + " из " + checkedMesDepartmentDTOList.Count().ToString());
            }
            else
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Добавлено производств " +
                    addedCount.ToString() + " из " + checkedMesDepartmentDTOList.Count().ToString() + ". НЕ ВСЕ ПРОИЗВОДСТВА ДОБАВЛЕНЫ!");
            }

            ActiveRoleVMDTO = await _roleVMRepository.Get(RoleId);

            _dialogService.Close(ActiveRoleVMDTO);
        }
    }

    private async Task OnClickCancel() => _dialogService.Close(null);

}
