@page "/administration/Role/AddEditRole/{RoleId}"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels

@inject IJSRuntime _jsRuntime
@inject IRoleRepository _roleRepository
@inject IRoleVMRepository _roleVMRepository
@inject DialogService _dialogService
@inject ILogEventRepository _logEventRepository

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <div class="row my-2">

        <div class="col-md-10">
            @if (IsLoading)
            {
                <Loading IsLoading="@IsLoading" />
            }
            else
            {
                <EditForm Model="ActiveRoleDTO" OnValidSubmit="AddEditRoleProcedure">
                    <DataAnnotationsValidator />
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12">
                            <RadzenStack>
                                @if (RoleId != Guid.Empty)
                                {
                                    <RadzenFormField Text="ИД записи" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                        <RadzenNumeric @bind-Value="@ActiveRoleDTO.Id" ReadOnly="true" />
                                    </RadzenFormField>
                                }

                                <RadzenFormField Text="Наименование" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                    <RadzenTextBox @bind-Value="@ActiveRoleDTO.Name" />
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveRoleDTO.Name"></ValidationMessage>

                                <RadzenFormField Text="Описание" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                    <RadzenTextBox @bind-Value="@ActiveRoleDTO.Description" />
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveRoleDTO.Description"></ValidationMessage>

                                <RadzenLabel Text="Использование Админки чтение/запись:" Component="CheckBox1" Style="margin-left: 8px; margin-top: 8px;" />
                                <RadzenSelectBar @bind-Value="@ActiveRoleDTO.IsAdmin" TValue="bool" class="mb-4" Name="CheckBox1">
                                    <Items>
                                        <RadzenSelectBarItem Text="Да" Value="true" />
                                        <RadzenSelectBarItem Text="Нет" Value="false" />
                                    </Items>
                                </RadzenSelectBar>

                                <RadzenLabel Text="Использование Админки только чтение:" Component="CheckBox2" Style="margin-left: 8px; margin-top: 8px;" />
                                <RadzenSelectBar @bind-Value="@ActiveRoleDTO.IsAdminReadOnly" TValue="bool" class="mb-4" Name="CheckBox2">
                                    <Items>
                                        <RadzenSelectBarItem Text="Да" Value="true" />
                                        <RadzenSelectBarItem Text="Нет" Value="false" />
                                    </Items>
                                </RadzenSelectBar>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <div class="form-group py-2">
                        <button title="Сохранить изменения" style="pointer-events: auto;" class="btn btn-success" disabled=@(IsAdmin != AdminMode.IsAdmin)>@Title</button>
                        <NavLink @onclick="(() => OnClickCancel())" class="btn btn-secondary">Отмена</NavLink>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}




@code {

    [Parameter]
    public Guid RoleId { get; set; }


    Variant variant = Variant.Outlined;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }

    public RoleDTO ActiveRoleDTO { get; set; }

    IEnumerable<RoleDTO> RoleDTOList { get; set; } = new List<RoleDTO>();

    public IEnumerable<object> CheckedValues { get; set; } = new List<object>();

    private string Title { get; set; } = "Создать роль СИР";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IsLoading = true;
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
        if (RoleId == Guid.Empty)
        {
            ActiveRoleDTO = new RoleDTO();
        }
        else
        {
            ActiveRoleDTO = await _roleRepository.GetById(RoleId);
            Title = "Изменить роль СИР";
        }
        IsLoading = false;
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await Task.Delay(10);
                await InvokeAsync(StateHasChanged);
                if (RoleId == Guid.Empty)
                {
                    ActiveRoleDTO = new RoleDTO();
                }
                else
                {
                    ActiveRoleDTO = await _roleRepository.GetById(RoleId);
                    Title = "Изменить роль СИР";
                }
                RoleDTOList = await _roleRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly);

                IsLoading = false;
                await Task.Delay(10);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/administration/Role");
        }
    }

    private async Task AddEditRoleProcedure()
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (RoleId == Guid.Empty)
            { // создание
                var foundByName = await _roleRepository.GetByName(ActiveRoleDTO.Name);
                if (foundByName != null)
                {
                    await _jsRuntime.ToastrError("Уже есть роль с наименованием " + foundByName.Name + " (ИД: " + foundByName.Id.ToString() + ")");
                    return;
                }

                RoleDTO addedDTO = await _roleRepository.Create(ActiveRoleDTO);
                await _logEventRepository.ToLog<RoleDTO>(oldObject: null, newObject: addedDTO, "Добавление роли", "Роль: ", _authorizationRepository);
                await _jsRuntime.ToastrSuccess("Роль \"" + ActiveRoleDTO.Name + "\" создана");

                _dialogService.Close(ActiveRoleDTO);

            }
            else
            { // изменение роли

                var foundByName = await _roleRepository.GetByName(ActiveRoleDTO.Name);
                if ((foundByName != null) && (foundByName.Id != ActiveRoleDTO.Id))
                {
                    await _jsRuntime.ToastrError("Уже есть роль с наименованием " + foundByName.Name + " (ИД: " + foundByName.Id.ToString() + ")");
                    return;

                }


                RoleDTO oldRoleDTO = await _roleRepository.GetById(ActiveRoleDTO.Id);
                RoleDTO newRoleDTO = await _roleRepository.Update(ActiveRoleDTO);
                await _logEventRepository.ToLog<RoleDTO>(oldObject: oldRoleDTO, newObject: newRoleDTO, "Изменение роли", "Роль: ", _authorizationRepository);

                await _jsRuntime.ToastrSuccess("Роль \"" + ActiveRoleDTO.Name + "\" изменена");

                _dialogService.Close(ActiveRoleDTO);
            }
        }

    }

    private async Task OnClickCancel() => _dialogService.Close(null);
}