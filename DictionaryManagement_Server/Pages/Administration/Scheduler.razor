@page "/administration/Scheduler"
@attribute [Authorize]
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Business.Repository;
@using DictionaryManagement_Models.IntDBModels;
@using System.Text.Json;

@inject IJSRuntime _jsRuntime
@inject ISchedulerRepository _schedulerRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository
@inject ILogEventRepository _logEventRepository
@inject DialogService _dialogService

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

@*         <div class="col-6">
            <h6 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/Scheduler">Расписания авторасчётов (AutoCalc)</a></h6>
        </div> *@

        <div class="col-12">
            <h6 class="card-title text-primary"><a href="/">Главная</a> - <a href="/administration">Администрирование</a> - <strong><font style="font-size:1.1rem; color:cornflowerblue;text-decoration: cornflowerblue overline; text-underline-offset: 5px; text-decoration-thickness: 4px;">Расписания авторасчётов (AutoCalc)</font></strong></h6>
        </div>

        <RadzenRow AlignItems="AlignItems.Start">
            <RadzenButton title="Добавить задание" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-1 mb-1" Text="Добавить задание"
                          Click="@(args => EditRow(null))" Disabled="@(IsAdmin != AdminMode.IsAdmin || IsLoading)" />
            <i class="bi bi-grip-vertical mt-2 mb-1"></i>
            <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Icon="refresh" class="mt-1 mb-1" Text="Обновить"
                          Click="() => OnAfterRenderAsync(true)"
                          Disabled="@(IsLoading)" />
            <i class="bi bi-grip-vertical mt-2 mb-1"></i>
            @if (@excelExportFlag)
            {
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" 
                    IsBusy=@excelExportFlag BusyText="Выполняется ..."
                              Disabled="@(IsLoading)" />
            }
            else
            {
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" 
                    IsBusy=@excelExportFlag BusyText="Выполняется ..."
                    Disabled="@(IsLoading)">
                    <i class="bi bi-database"></i><i class="bi bi-arrow-right"></i><i class="bi bi-grid-3x3"></i>&nbsp;&nbsp;Выгрузить в Excel
                </RadzenButton>
            }
        </RadzenRow>

        @if (IsLoading != true)
        {
            <RadzenDataGridApp @bind-Settings="@SchedulerGridSettings" SettingsName="SchedulerGridSettings" @ref="schedulerDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               Data="@schedulerDTOs" TItem="SchedulerDTO"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.Advanced"
                               Density=Density.Compact
                               ShowPagingSummary="true"
                               AllowVirtualization="true"
                               AllowColumnResize="false"
                               GridLines="DataGridGridLines.Both"
                               Style="height:calc(100vh - 158px)"
                               @bind-Value=@selectedScheduler
                               RowDoubleClick="() => EditRow(selectedScheduler.FirstOrDefault())">
                <Columns>
                    <RadzenDataGridColumnApp TItem="SchedulerDTO" Property="Id" Title="Ид записи" Width="70px">
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="SchedulerDTO" Property="ModuleName" Title="Наименование модуля" Width="100px">
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="SchedulerDTO" Property="StartTime" Title="Время начала" Width="60px">
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="SchedulerDTO" Property="LastExecuted" Title="Время последнего выполнения" Width="120px">
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="SchedulerDTO" Property="IsRunningNow" Title="Выполняется сейчас" Width="120px">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsRunningNow ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp Title="Действия" TItem="SchedulerDTO" Context="SchedulerDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
                        <Template Context="schedulerDTO">
                            <RadzenButton title="Редактировать" Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@(args => EditRow(schedulerDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton title="Удалить" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                          Click="@(args => DeleteRow(schedulerDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            <Loading IsLoading="@IsLoading" />
        }
    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<SchedulerDTO>? schedulerDTOs;

    RadzenDataGrid<SchedulerDTO> schedulerDTOGrid;

    IList<SchedulerDTO>? selectedScheduler;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }
    public bool excelExportFlag { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await LoadStateAsync();
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                schedulerDTOs = await _schedulerRepository.GetAll();
                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/administration");
        }
    }


    DataGridSettings _schedulerGridSettings;
    public DataGridSettings SchedulerGridSettings
    {
        get
        {
            return _schedulerGridSettings;
        }
        set
        {
            if (_schedulerGridSettings != value)
            {
                _schedulerGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        if (!(await SD.CheckPageSettingsVersion("SchedulerGridSettings", _jsRuntime)))
            return;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "SchedulerGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _schedulerGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('SchedulerGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(SchedulerGridSettings)}')");
        await SD.SetPageSettingsVersion("SchedulerGridSettings", _jsRuntime);
    }


    async Task EditRow(SchedulerDTO schedulerDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            IsLoading = true;

            SchedulerDTO dialogResult = null;

            if (schedulerDTO == null)
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditScheduler>("Добавить задание", new Dictionary<string, object>() { { "SchedulerId", 0 } }, new DialogOptions() { Width = $"{500}px", Left = $"calc(50vw - 300px)" });
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditScheduler>("Изменить задание", new Dictionary<string, object>() { { "SchedulerId", schedulerDTO.Id } }, new DialogOptions() { Width = $"{500}px", Left = $"calc(50vw - 300px)" });
            }

            if (dialogResult != null)
            {
                IsLoading = true;
                await LoadStateAsync();
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                schedulerDTOs = await _schedulerRepository.GetAll();
                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            IsLoading = false;
        }
    }


    async Task DeleteRow(SchedulerDTO schedulerDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (_dialogs != null)
            {
                bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление задания", "Удалить задание для модуля \"" + schedulerDTO.ModuleName + "\" с временем старта " +
                    schedulerDTO.StartTime.ToString() + " ?", "Удалить", "Отмена");
                if (selectionResult == false)
                {
                    await _jsRuntime.ToastrSuccess("Отмена удаления");
                    return;
                }
            }
            Guid addedUserId = (await _authorizationRepository.GetCurrentUserDTO()).Id;
            await _logEventRepository.AddRecord("Удаление расписания", addedUserId, "", "", false, "Расписание: " + schedulerDTO.ToString());

            await _schedulerRepository.Delete(schedulerDTO.Id);
            schedulerDTOs = await _schedulerRepository.GetAll();
            schedulerDTOGrid.Reload();

        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "Scheduler_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelScheduler(filename, (IEnumerable<SchedulerDTO>)schedulerDTOGrid.View);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }
}
