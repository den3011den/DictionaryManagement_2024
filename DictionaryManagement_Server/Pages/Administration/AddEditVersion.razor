@page "/administration/Version/AddEditVersion/{version}"
@attribute [Authorize]


@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels

@inject IJSRuntime _jsRuntime
@inject IVersionRepository _versionRepository
@inject DialogService _dialogService

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <div class="row my-2">

        <div class="col-md-10">
            @if (IsLoading)
            {
                <Loading IsLoading="@IsLoading" />
            }
            else
            {
                <EditForm Model="ActiveVersionDTO" OnValidSubmit="AddEditVersionProcedure">
                    <DataAnnotationsValidator />

                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12">
                            <RadzenStack>

                                <RadzenFormField Text="Версия базы данных СИР" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                    <RadzenTextBox @bind-Value="@ActiveVersionDTO.version" />
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveVersionDTO.version"></ValidationMessage>

                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <div class="form-group py-2">
                        <button title="Изменить версию БД" style="pointer-events: auto;" class="btn btn-primary" disabled=@(IsAdmin != AdminMode.IsAdmin)>@Title</button>
                        <NavLink @onclick="(() => OnClickCancel())" class="btn btn-secondary">Отмена</NavLink>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}

@code {

    [Parameter]
    public string version { get; set; }

    Variant variant = Variant.Outlined;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }

    public VersionDTO ActiveVersionDTO { get; set; }

    private string Title { get; set; } = "Изменить версию БД СИР";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsLoading = true;
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
        ActiveVersionDTO = await _versionRepository.Get();
        IsLoading = false;
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await Task.Delay(10);
                await InvokeAsync(StateHasChanged);
                ActiveVersionDTO = await _versionRepository.Get();
                IsLoading = false;
                await Task.Delay(10);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/administration");
        }
    }

    private async Task AddEditVersionProcedure()
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            await _versionRepository.Set(ActiveVersionDTO);
            await _jsRuntime.ToastrSuccess("Версия БД СИР изменена");
            _dialogService.Close(ActiveVersionDTO);
        }
    }

    private async Task OnClickCancel() => _dialogService.Close(null);

}
