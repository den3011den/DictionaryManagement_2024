@page "/administration/User"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json;

@inject IJSRuntime _jsRuntime
@inject IUserRepository _userRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository
@inject ILogEventRepository _logEventRepository
@inject DialogService _dialogService

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/User">Пользователи</a></h6>
        </div>

        @if (IsLoading != true)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenButton title="Добавить нового пользователя" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-1 mb-1" Text="Добавить нового пользователя" Click="@(args => EditRow(null))" Disabled="@(IsAdmin != AdminMode.IsAdmin)" />
                <i class="bi bi-grip-vertical mt-2 mb-1"></i>
                @if (@excelExportFlag)
                {
                    <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
                }
                else
                {
                    <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ...">
                        <i class="bi bi-database"></i><i class="bi bi-arrow-right"></i><i class="bi bi-grid-3x3"></i>&nbsp;&nbsp;Выгрузить в Excel
                    </RadzenButton>
                }
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" ButtonStyle="ButtonStyle.Success" title="Загрузка данных из Excel в справочник Тэгов СИР" Text="Импорт из Excel <--" Icon="grid_on" Click="@(args => ExcelImport())">
                    <i class="bi bi-database"></i><i class="bi bi-arrow-left"></i><i class="bi bi-grid-3x3"></i>&nbsp;&nbsp;Загрузить из Excel
                </RadzenButton>
            </RadzenRow>
            <RadzenDataGridApp @bind-Settings="@UserGridSettings" SettingsName="UserGridSettings" @ref="userDTOGrid" AllowAlternatingRows="true"
                               AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single" GridLines="DataGridGridLines.Both"
                               Data="@userDTOs" TItem="UserDTO"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.Advanced"
                               AllowColumnResize="false"
                               Density=Density.Compact
                               ShowPagingSummary="true"
                               AllowVirtualization="true"
                               Style="height:calc(100vh - 155px)"
                               @bind-Value=@selectedUser
                               RowDoubleClick="() => EditRow(selectedUser.FirstOrDefault())">
                <Columns>
                    <RadzenDataGridColumnApp TItem="UserDTO" Property="ToStringId" Title="Ид пользователя" Width="30px"
                                             FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId">
                        <Template Context="data1">
                            <div style="white-space:pre-wrap; font-size: 10px">
                                @data1.ToStringId
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="UserDTO" Property="Login" Title="Логин" Width="35px" FilterProperty="Login" SortProperty="Login" FilterOperator="FilterOperator.Contains">
                        <Template Context="data2">
                            <div style="white-space:pre-wrap; font-size: 12px">
                                <strong>
                                    @data2.Login
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="UserDTO" Property="UserName" Title="ФИО" Width="35px" FilterProperty="UserName" SortProperty="UserName" FilterOperator="FilterOperator.Contains">
                        <Template Context="data2">
                            <div style="white-space:pre-wrap; font-size: 12px">
                                <strong>
                                    @data2.UserName
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="UserDTO" Property="Description" Title="Описание" Width="33px" FilterProperty="Description" SortProperty="Description" FilterOperator="FilterOperator.Contains">
                        <Template Context="data3">
                            <div style="white-space:pre-wrap; font-size: 10px">
                                @data3.Description
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="UserDTO" Property="IsSyncWithAD" Title="Автомат" Filterable="true" Width="30px" TextAlign="TextAlign.Center">
                        <Template Context="data4">
                            <RadzenCheckBox @bind-Value=data4.IsSyncWithAD ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="UserDTO" Property="IsServiceUser" Title="Сервис" Filterable="true" Width="30px" TextAlign="TextAlign.Center">
                        <Template Context="data4">
                            <RadzenCheckBox @bind-Value=data4.IsServiceUser ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>


                    <RadzenDataGridColumnApp TItem="UserDTO" Property="SyncWithADGroupsLastTime" Title="Время посл. синх. AD" Width="40px" TextAlign="TextAlign.Center">
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="UserDTO" Property="IsArchive" Title="Арх" Filterable="true" Width="20px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp Title="Действия" TItem="UserDTO" Context="userDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="16px">
                        <Template Context="userDTO">
                            <RadzenButton title="Редактировать пользователя" Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(userDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            @if (!userDTO.IsArchive)
                            {
                                <RadzenButton title="Удалить пользователя в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(userDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton title="Восстановить пользователя из архива" ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(userDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                                </RadzenButton>
                            }
                        </Template>
                    </RadzenDataGridColumnApp>

                </Columns>
            </RadzenDataGridApp>

        }
        else
        {
            <Loading IsLoading="@IsLoading" />
        }
    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<UserDTO>? userDTOs;

    IList<UserDTO>? selectedUser;

    RadzenDataGrid<UserDTO> userDTOGrid;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }
    public bool excelExportFlag { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {

                IsLoading = true;
                await LoadStateAsync();
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                userDTOs = await _userRepository.GetAll(SD.SelectDictionaryScope.All);
                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/administration");
        }
    }

    DataGridSettings _userGridSettings;
    public DataGridSettings UserGridSettings
    {
        get
        {
            return _userGridSettings;
        }
        set
        {
            if (_userGridSettings != value)
            {
                _userGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;
        if (!(await SD.CheckPageSettingsVersion("UserGridSettings", _jsRuntime)))
            return;
        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "UserGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _userGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;
        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('UserGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(UserGridSettings)}')");
        await SD.SetPageSettingsVersion("UserGridSettings", _jsRuntime);
    }



    async Task EditRow(UserDTO userDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            IsLoading = true;

            UserDTO dialogResult;

            if (userDTO == null)
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditUser>("Создать пользователя", new Dictionary<string, object>() { { "UserId", Guid.Empty } }, new DialogOptions() { Width = $"{700}px", Left = $"calc(50vw - 450px)" });
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditUser>("Изменить пользователя", new Dictionary<string, object>() { { "UserId", userDTO.Id } }, new DialogOptions() { Width = $"{700}px", Left = $"calc(50vw - 450px)" });
            }

            if (dialogResult != null)
            {
                if (userDTO == null)
                {
                    IsLoading = true;
                    await LoadStateAsync();
                    await Task.Delay(100);
                    await InvokeAsync(StateHasChanged);
                    userDTOs = await _userRepository.GetAll(SD.SelectDictionaryScope.All);
                    IsLoading = false;
                    await Task.Delay(100);
                    await InvokeAsync(StateHasChanged);
                    IsLoading = false;
                }
                else
                {
                    userDTO.Login = dialogResult.Login;
                    userDTO.UserName = dialogResult.UserName;
                    userDTO.Description = dialogResult.Description;
                    userDTO.IsSyncWithAD = dialogResult.IsSyncWithAD;
                    userDTO.IsServiceUser = dialogResult.IsServiceUser;
                    userDTO.SyncWithADGroupsLastTime = dialogResult.SyncWithADGroupsLastTime;

                    await userDTOGrid.UpdateRow(userDTO);
                }
            }
        }

    }


    async Task DeleteRow(UserDTO userDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (_dialogs != null)
            {
                if (userDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление пользователя", "Удалить пользователя \"" + userDTO.UserName
                        + " (" + userDTO.Login + ")\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление пользователя", "Восстановить пользователя \"" + userDTO.UserName
                        + " (" + userDTO.Login + ")\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        return;
                    }
                }
            }

            UserDTO oldUserDTO = await _userRepository.Get(userDTO.Id);

            if (userDTO.IsArchive)
            {
                await _userRepository.Update(userDTO, SD.UpdateMode.RestoreFromArchive);
                userDTO.IsArchive = false;
                await _logEventRepository.ToLog<UserDTO>(oldUserDTO, userDTO, "Восстановление из архива пользователя", "Пользователь: ", _authorizationRepository);
                await _jsRuntime.ToastrSuccess("Пользователь \"" + userDTO.UserName + " (" + userDTO.Login + ")\" восстановлен из архива");
            }
            else
            {
                await _userRepository.Update(userDTO, SD.UpdateMode.MoveToArchive);
                userDTO.IsArchive = true;
                await _logEventRepository.ToLog<UserDTO>(oldUserDTO, userDTO, "Удаление в архив пользователя", "Пользователь: ", _authorizationRepository);
                await _jsRuntime.ToastrSuccess("Пользователь \"" + userDTO.UserName + " (" + userDTO.Login + ")\" удалён в архив");
            }
            await userDTOGrid.UpdateRow(userDTO);
        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "Users_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelUsers(filename, (IEnumerable<UserDTO>)userDTOGrid.View);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }

    async Task ExcelImport()
    {
        IsLoading = true;
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            SapMaterialDTO dialogResult = null;
            IsLoading = false;
            dialogResult = await _dialogService.OpenAsync<LoadFromExcel>("Загрузка данных из Excel (Пользователи)", new Dictionary
                    <string, object>
                    () { { "LoadFromExcelReportTemplateTypeNameSettingName", SD.UsersLoadFromExcelReportTemplateTypeNameSettingName }
                        ,{"DataList", (IEnumerable<UserDTO>)userDTOGrid.View }}
                        , new DialogOptions() { Width = $"{60}rem", Left = "calc(50vw - 40rem)" });
            IsLoading = false;
            await this.OnAfterRenderAsync(true);
        }
        IsLoading = false;
    }

}