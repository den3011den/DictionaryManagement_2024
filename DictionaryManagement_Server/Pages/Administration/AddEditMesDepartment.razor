@page "/administration/MesDepartment/AddEditMesDepartment/{MesDepartmentId}"

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Common;
@using DictionaryManagement_Models.IntDBModels

@inject IJSRuntime _jsRuntime
@inject IMesDepartmentRepository _mesDepartmentRepository
@inject DialogService _dialogService
@inject ILogEventRepository _logEventRepository

@*@inject NavigationManager _navigationManager*@

<div class="row my-2">
    <div class="col-md-10">
        @if (IsLoading)
        {
            <Loading IsLoading="@IsLoading" />
        }
        else
        {
            <EditForm Model="ActiveMesDepartmentDTO" OnValidSubmit="AddEditMesDepartmentProcedure">
                <DataAnnotationsValidator />

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12">
                        <RadzenStack>
                            @if (MesDepartmentId > 0)
                            {
                                <RadzenFormField Text="ИД записи" Variant="@variant" Style="width: 100%; max-width: 1100px;">
                                    <RadzenNumeric @bind-Value="@ActiveMesDepartmentDTO.Id" ReadOnly="true" />
                                </RadzenFormField>
                            }
                            <RadzenFormField Text="Код производства" Variant="@variant" Style="width: 100%; max-width: 1100px;">
                                <RadzenNumeric @bind-Value="@ActiveMesDepartmentDTO.MesCode" ReadOnly="@(IsRoleModelChangeDisabled)" />
                            </RadzenFormField>
                            <ValidationMessage For="()=>ActiveMesDepartmentDTO.MesCode"></ValidationMessage>

                            <RadzenFormField Text="Наименование" Variant="@variant" Style="width: 100%; max-width: 1100px;">
                                <RadzenTextBox @bind-Value="@ActiveMesDepartmentDTO.Name" ReadOnly="@(IsRoleModelChangeDisabled)" />
                            </RadzenFormField>
                            <ValidationMessage For="()=>ActiveMesDepartmentDTO.Name"></ValidationMessage>
                            <RadzenFormField Text="Сокр. наименование" Variant="@variant" Style="width: 100%; max-width: 1100px;">
                                <RadzenTextBox @bind-Value="@ActiveMesDepartmentDTO.ShortName" ReadOnly="@(IsRoleModelChangeDisabled)" />
                            </RadzenFormField>
                            <ValidationMessage For="()=>ActiveMesDepartmentDTO.ShortName"></ValidationMessage>
                            
                            <RadzenFormField Text="Родительское производство" Variant="@variant"
                                             Style="@(IsRoleModelChangeDisabled ? "width: 100%; max-width: 1100px;pointer-events: none;" :"width: 100%; max-width: 1100px; pointer-events:auto;")">
                                <RadzenDropDown @ref=@mesDepartmentDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                                Data=@MesDepartmentDTOList TextProperty="ToStringHierarchyShortName" ValueProperty="Id" AllowClear="true"
                                                @bind-Value="ActiveMesDepartmentDTO.ParentDepartmentId" Style="width: 100%; max-width: 1100px;"
                                                ReadOnly="@(IsRoleModelChangeDisabled)" />
                            </RadzenFormField>
                            <ValidationMessage For="()=>ActiveMesDepartmentDTO.ParentDepartmentId"></ValidationMessage>                            
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                @if (!IsRoleModelChangeDisabled)
                {
                    <div class="form-group py-2">
                        <button title="Сохранить изменения" style="pointer-events: auto;" class="btn btn-success" disabled=@(IsAdmin != AdminMode.IsAdmin)>@Title</button>
                    <NavLink @onclick="(() => OnClickCancel())" class="btn btn-secondary">Отмена</NavLink>
                    </div>
                }
                else
                {
                    <div class="form-group py-2">
                        <NavLink @onclick="(() => OnClickCancel())" class="btn btn-info">Закрыть</NavLink>
                    </div>
                }
            </EditForm>
        }
    </div>
</div>



@code {

    [Parameter]
    public int MesDepartmentId { get; set; }

    [Parameter]
    public bool IsRoleModelChangeDisabled { get; set; } = false;

    Variant variant = Variant.Outlined;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }

    public MesDepartmentDTO ActiveMesDepartmentDTO { get; set; }

    IEnumerable<MesDepartmentDTO> MesDepartmentDTOList { get; set; } = new List<MesDepartmentDTO>();

    public IEnumerable<object> CheckedValues { get; set; } = new List<object>();

    private string Title { get; set; } = "Создать производство";

    RadzenDropDown<int?> mesDepartmentDropDown;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsLoading = true;
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);

        if (MesDepartmentId <= 0)
        {
            ActiveMesDepartmentDTO = new MesDepartmentDTO();
        }
        else
        {
            ActiveMesDepartmentDTO = await _mesDepartmentRepository.GetById(MesDepartmentId);
            Title = "Изменить производство";
        }

        @if(IsRoleModelChangeDisabled)
        {
            Title = "Просмотр данных производства";
        }

        IsLoading = false;
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);

        //employees = dbContext.Employees.Where(e => e.ReportsTo == null);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            IsLoading = true;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);

            if (MesDepartmentId <= 0)
            {
                ActiveMesDepartmentDTO = new MesDepartmentDTO();
            }
            else
            {
                ActiveMesDepartmentDTO = await _mesDepartmentRepository.GetById(MesDepartmentId);
                Title = "Изменить производство";
            }


            MesDepartmentDTOList = (await _mesDepartmentRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly)).OrderBy(u => u.ToStringHierarchyShortName);

            IsLoading = false;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
        }

        //base.OnAfterRender(firstRender);
    }

    private async Task AddEditMesDepartmentProcedure()
    {

        if (MesDepartmentId <= 0)
        { // создание
            var foundByCode = await _mesDepartmentRepository.GetByCode(ActiveMesDepartmentDTO.MesCode);
            if (foundByCode != null)
            {
                if (foundByCode.ParentDepartmentId == ActiveMesDepartmentDTO.ParentDepartmentId)
                {
                    await _jsRuntime.ToastrError("Уже есть производство с кодом " + foundByCode.MesCode.ToString() + " внутри родительского производства (наименование: " + foundByCode.ShortName + " ИД: " + foundByCode.Id.ToString() + ")");
                    return;
                }
            }
            var foundByName = await _mesDepartmentRepository.GetByName(ActiveMesDepartmentDTO.Name);
            if (foundByName != null)
            {
                if (foundByName.ParentDepartmentId == ActiveMesDepartmentDTO.ParentDepartmentId)
                {
                    await _jsRuntime.ToastrError("Уже есть производство с наименованием " + foundByName.Name + " внутри родительского производства (Код: " + foundByName.MesCode.ToString() + " ИД: " + foundByName.Id.ToString() + ")");
                    return;
                }
            }

            var foundByShortName = await _mesDepartmentRepository.GetByShortName(ActiveMesDepartmentDTO.ShortName);
            if (foundByShortName != null)
            {
                if (foundByShortName.ParentDepartmentId == ActiveMesDepartmentDTO.ParentDepartmentId)
                {
                    await _jsRuntime.ToastrError("Уже есть производство с сокр. наименованием внутри родительского производства " + foundByShortName.ShortName + " (Код: " + foundByShortName.MesCode.ToString() + " ИД: " + foundByShortName.Id.ToString() + ")");
                    return;
                }
            }
            MesDepartmentDTO addedMesDepartmentDTO = await _mesDepartmentRepository.Create(ActiveMesDepartmentDTO);
            await _logEventRepository.ToLog<MesDepartmentDTO>(oldObject: null, newObject: addedMesDepartmentDTO, "Добавление производства", "Производство: ", _authorizationRepository);
            await _jsRuntime.ToastrSuccess("Производство \"" + ActiveMesDepartmentDTO.ShortName + "\" создано");
            _dialogService.Close(addedMesDepartmentDTO);

        }
        else
        { // изменение производства

            var foundByCode = await _mesDepartmentRepository.GetByCode(ActiveMesDepartmentDTO.MesCode);
            if ((foundByCode != null) && (foundByCode.Id != ActiveMesDepartmentDTO.Id))
            {
                if (foundByCode.ParentDepartmentId == ActiveMesDepartmentDTO.ParentDepartmentId)
                {
                    await _jsRuntime.ToastrError("Уже есть производство с кодом " + foundByCode.MesCode.ToString() + " внутри родительского производства (наименование: " + foundByCode.ShortName + " ИД: " + foundByCode.Id.ToString() + ")");
                    return;
                }
            }
            var foundByName = await _mesDepartmentRepository.GetByName(ActiveMesDepartmentDTO.Name);
            if ((foundByName != null) && (foundByName.Id != ActiveMesDepartmentDTO.Id))
            {
                if (foundByName.ParentDepartmentId == ActiveMesDepartmentDTO.ParentDepartmentId)
                {
                    await _jsRuntime.ToastrError("Уже есть производство с наименованием " + foundByName.Name + " внутри родительского производства (Код: " + foundByName.MesCode.ToString() + " ИД: " + foundByName.Id.ToString() + ")");
                    return;
                }
            }
            var foundByShortName = await _mesDepartmentRepository.GetByShortName(ActiveMesDepartmentDTO.ShortName);
            if ((foundByShortName != null) && (foundByShortName.Id != ActiveMesDepartmentDTO.Id))
            {
                if (foundByShortName.ParentDepartmentId == ActiveMesDepartmentDTO.ParentDepartmentId)
                {
                    await _jsRuntime.ToastrError("Уже есть производство с сокр. наименованием " + foundByShortName.ShortName + " внутри родительского производства (Код: " + foundByShortName.MesCode.ToString() + " ИД: " + foundByShortName.Id.ToString() + ")");
                    return;
                }
            }
            MesDepartmentDTO oldMesDepartmentDTO = await _mesDepartmentRepository.GetById(ActiveMesDepartmentDTO.Id);
            MesDepartmentDTO newMesDepartmentDTO = await _mesDepartmentRepository.Update(ActiveMesDepartmentDTO);
            await _logEventRepository.ToLog<MesDepartmentDTO>(oldObject: oldMesDepartmentDTO, newObject: newMesDepartmentDTO, "Изменение производства", "Производство: ", _authorizationRepository);
            await _jsRuntime.ToastrSuccess("Производство \"" + ActiveMesDepartmentDTO.ShortName + "\" изменено");

            _dialogService.Close(newMesDepartmentDTO);
        }
    }

    private async Task OnClickCancel()
    {
        _dialogService.Close(null);
    }
}
