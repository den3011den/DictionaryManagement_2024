@page "/administration/Role/LinkReportTemplateTypeToRole/{RoleId}"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels


@inject IJSRuntime _jsRuntime

@inject IRoleVMRepository _roleVMRepository
@inject DialogService _dialogService
@inject ILogEventRepository _logEventRepository;

@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row my-2">

        <div class="col-md-12">
            @if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                <EditForm Model="ActiveRoleVMDTO" OnSubmit="AddReportTemplateTypesToRoleProcedure">

                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12">
                            <RadzenStack>
                                <RadzenStack Gap="1rem">
                                    <RadzenDataGridApp AllowAlternatingRows="true" AllowFiltering="true" PageSize="15" AllowPaging="true" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                                                    Data="ReportTemplateTypeDTOList" TItem="ReportTemplateTypeDTO"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterMode="FilterMode.Simple"
                                                    Density=Density.Compact
                                                    ShowPagingSummary="true"
                                                    EmptyText="Нет записей для отображения"
                                                    AllowVirtualization="true"
                                                    ShowCleanGridSettingsHeaderButton="false"
                                                    ShowCleanGridFiltersHeaderButton="false"
                                                    ShowCleanGridSortsHeaderButton="false">
                                        <Columns>

                                            <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Property="ToStringId" Filterable="true" FilterProperty="ToStringId" Title="Ид" Width="20px">
                                            </RadzenDataGridColumnApp>
                                            <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Property="Name" Title="Наименование" Width="90px">
                                            </RadzenDataGridColumnApp>

                                            <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Property="CanDownload" Title="Чтение" Filterable="true" Width="15px">
                                                <Template Context="data">
                                                    <RadzenCheckBox @bind-Value=data.CanDownload Disabled="false" TriState="false" TValue="bool" />
                                                </Template>
                                            </RadzenDataGridColumnApp>

                                            <RadzenDataGridColumnApp TItem="ReportTemplateTypeDTO" Property="CanUpload" Title="Запись" Filterable="true" Width="15px">
                                                <Template Context="data">
                                                    <RadzenCheckBox @bind-Value=data.CanUpload Disabled="false" TriState="false" TValue="bool" />
                                                </Template>
                                            </RadzenDataGridColumnApp>
                                        </Columns>
                                    </RadzenDataGridApp>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>

                    <br />
                    <RadzenText class="text-warning" TextStyle="TextStyle.Body1" TagName="TagName.Span">
                        * в списке только НЕ архивные типы шаблонов отчётов и не включённые в роль @ActiveRoleVMDTO.Name
                    </RadzenText>

                    <div class="form-group py-2">
                        <button class="btn btn-primary">@Title</button>
                        <NavLink @onclick="(() => OnClickCancel())" class="btn btn-secondary">Отмена</NavLink>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}




@code {

    _Dialogs? _dialogs { get; set; }

    [Parameter]
    public Guid RoleId { get; set; }


    Variant variant = Variant.Outlined;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }

    RoleVMDTO ActiveRoleVMDTO { get; set; }
    IEnumerable<ReportTemplateTypeDTO> ReportTemplateTypeDTOList { get; set; } = new List<ReportTemplateTypeDTO>();

    private string Title { get; set; } = "Привязать типы шаблонов отчётов к роли";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsLoading = true;
        StateHasChanged();

        IsLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {

                IsLoading = true;
                StateHasChanged();

                ActiveRoleVMDTO = await _roleVMRepository.Get(RoleId);
                Title = "Добавить типы шаблонов отчётов к роли";

                ReportTemplateTypeDTOList = await _roleVMRepository.GetAllNotArchiveReportTemplateTypesExceptAlreadyInRole(ActiveRoleVMDTO.Id);

                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/administration/Role");
    }

    private async Task AddReportTemplateTypesToRoleProcedure()
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {

            var checkedReportTemplateTypeDTOList = ReportTemplateTypeDTOList.Where(u => (u.CanDownload == true || u.CanUpload == true));
            if (checkedReportTemplateTypeDTOList.Count() <= 0)
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Не отмечено ни одного типа шаблона отчётов для добавления к роли");
                return;
            }

            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Добавление типов шаблонов отчётов к роли", "Количество отмеченных типов шаблонов отчётов: " + checkedReportTemplateTypeDTOList.Count().ToString()
                + ". Добавить ? ", "Добавить", "Отмена");
            if (selectionResult == false)
            {
                return;
            }

            ReportTemplateTypeTоRoleDTO addedReportTemplateTypeTоRoleDTOItem = null;
            int addedCount = 0;
            foreach (var checkedReportTemplateTypeDTOItem in checkedReportTemplateTypeDTOList)
            {
                addedReportTemplateTypeTоRoleDTOItem = await _roleVMRepository.AddReportTemplateTypeToRole(ActiveRoleVMDTO, checkedReportTemplateTypeDTOItem);

                if (addedReportTemplateTypeTоRoleDTOItem == null)
                {
                    await _jsRuntime.ToastrError("Не удалось добавить тип шаблона отчёта \"" + checkedReportTemplateTypeDTOItem.Name + " \"!");
                }
                else
                {
                    addedCount = addedCount + 1;
                    Guid userId = (await _authorizationRepository.GetCurrentUserDTO()).Id;
                    await _logEventRepository.AddRecord("Добавление связки типа шаблона отчёта с ролью", userId, "<Пусто>",
                        ActiveRoleVMDTO.Name + " --> " + checkedReportTemplateTypeDTOItem.ToString(), false,
                        "Роль: " + ActiveRoleVMDTO.Name + " Тип шаблона отчёта: " + checkedReportTemplateTypeDTOItem.ToString() +
                        " Чтение: " + (checkedReportTemplateTypeDTOItem.CanDownload == true ? "Да": "Нет") +
                        " Запись: " + (checkedReportTemplateTypeDTOItem.CanUpload == true ? "Да" : "Нет"));
                }
            }

            if (addedCount == checkedReportTemplateTypeDTOList.Count())
            {
                await _jsRuntime.ToastrSuccess("Добавлено типов шаблонов отчётов " + addedCount.ToString() + " из " + checkedReportTemplateTypeDTOList.Count().ToString());
            }
            else
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Добавлено типов шаблонов отчётов " +
                    addedCount.ToString() + " из " + checkedReportTemplateTypeDTOList.Count().ToString() + ". НЕ ВСЕ ТИПЫ ШАБЛОНОВ ОТЧЁТОВ ДОБАВЛЕНЫ!");
            }

            ActiveRoleVMDTO = await _roleVMRepository.Get(RoleId);

            _dialogService.Close(ActiveRoleVMDTO);

        }

    }

    private async Task OnClickCancel() => _dialogService.Close(null);

}
