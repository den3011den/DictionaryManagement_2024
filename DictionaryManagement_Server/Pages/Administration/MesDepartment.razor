@page "/administration/MesDepartment"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json;



@inject IJSRuntime _jsRuntime
@inject IMesDepartmentRepository _mesDepartmentRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository
@inject ILogEventRepository _logEventRepository

@inject DialogService _dialogService

@*<head>
    <style type="text/css">
        .rz-celldata td {
            padding: 0px;
        }
    </style>
</head>*@


@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/MesDepartment">Производства</a></h6>
        </div>

        @if (IsLoading != true)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новое производство" Click="@(args => EditRow(null))" />
                <RadzenButton class="mt-2 mb-4" title="Простой экспорт в Excel ВСЕХ производств" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
                <RadzenButton class="mt-2 mb-4" title="@(IsExpandModeOn ? "Свернуть всю иерархию производств" : "Развернуть всю иерархию производств")" Text="@(IsExpandModeOn ? "Свернуть" : "Развернуть")"
                              Icon="@(IsExpandModeOn ? "unfold_less" : "unfold_more")" Click="@(args => ToggleRowsExpand(!IsExpandModeOn))"
                              IsBusy=@ExpandInProgressFlag BusyText="Выполняется ..." />
                <div class="mt-2 mb-4 col-6" style="white-space:pre-wrap; font-size: 10px; color:powderblue">
                    <RadzenLabel Text="* фильтр работает только по записям, которые развёрнуты в отображаемом списке" />
                </div>
            </RadzenRow>
            <RadzenDataGridApp @bind-Settings="@MesDepartmentGridSettings" SettingsName="MesDepartmentGridSettings" @ref="mesDepartmentDTOGrid" ExpandMode="DataGridExpandMode.Multiple"
                               Data="@mesDepartmentDTOs" TItem="MesDepartmentDTO" RowRender="@RowRender" LoadChildData="@LoadChildData"
                               AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               EmptyText="Нет записей для отображения"
                               FilterMode="FilterMode.SimpleWithMenu"
                               Density="Density.Compact"
                               AllowColumnResize="false"
                               GridLines="DataGridGridLines.Both"
                               Style="height:calc(100vh - 190px)">
                <Columns>
                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="Name" Title="Наименование" Frozen="true" Width="200px"
                                             FilterOperator="FilterOperator.Contains" SortProperty="Name" FilterProperty="Name">
                        <Template Context="data">
                            <div style="white-space:pre-wrap">
                                <strong>@data.Name</strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="ToStringId" Title="ИД" Width="60px" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId" FilterProperty="ToStringId" />
                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="ToStringMesCode" Title="Код" Width="100px" FilterOperator="FilterOperator.Contains" SortProperty="ToStringMesCode" FilterProperty="ToStringMesCode" />
                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="ShortName" Title="Сокр. наименование" FilterOperator="FilterOperator.Contains" Width="200px">
                        <Template Context="data">
                            <div style="white-space:pre-wrap">
                                @data.ShortName
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="IsArchive" Title="Архив" Filterable="true" Width="30px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value="data.IsArchive" ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp Title="Действия" TItem="MesDepartmentDTO" Context="mesDepartmentDTO" Filterable="true" Sortable="false" TextAlign="TextAlign.Right" Width="70px">
                        <Template Context="mesDepartmentDTO">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(mesDepartmentDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            @if (!mesDepartmentDTO.IsArchive)
                            {
                                <RadzenButton Tooltip="Восстановить из архива" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mesDepartmentDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mesDepartmentDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }

                        </Template>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>

        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }

    </div>

    <css>

    </css>
}

@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<MesDepartmentDTO>? mesDepartmentDTOs;

    RadzenDataGrid<MesDepartmentDTO> mesDepartmentDTOGrid;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }
    public bool ExpandInProgressFlag { get; set; } = false;
    public bool excelExportFlag { get; set; } = false;

    public bool IsExpandModeOn { get; set; } = false;



    // считаем что больше уровней производств вряд ли будет
    public int MaxExpandLevel { get; set; } = 8;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {
                IsLoading = true;
                await LoadStateAsync();
                StateHasChanged();
                mesDepartmentDTOs = await _mesDepartmentRepository.GetAllTopLevel();
                IsLoading = false;
                StateHasChanged();
                await ToggleRowsExpand(!IsExpandModeOn);
            }
        }
        else
            _navigationManager.NavigateTo("/administration");
    }

    DataGridSettings _mesDepartmentGridSettings;
    public DataGridSettings MesDepartmentGridSettings
    {
        get
        {
            return _mesDepartmentGridSettings;
        }
        set
        {
            if (_mesDepartmentGridSettings != value)
            {
                _mesDepartmentGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        if (!(await SD.CheckPageSettingsVersion("MesDepartmentGridSettings", _jsRuntime)))
            return;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "MesDepartmentGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _mesDepartmentGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('MesDepartmentGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(MesDepartmentGridSettings)}')");
        await SD.SetPageSettingsVersion("MesDepartmentGridSettings", _jsRuntime);
    }


    void RowRender(RowRenderEventArgs<MesDepartmentDTO> args)
    {
        args.Expandable = _mesDepartmentRepository.HasChild(args.Data.Id).GetAwaiter().GetResult();
    }

    void LoadChildData(DataGridLoadChildDataEventArgs<MesDepartmentDTO> args)
    {
        args.Data = _mesDepartmentRepository.GetChildList(args.Item.Id).GetAwaiter().GetResult();
    }

    async Task EditRow(MesDepartmentDTO mesDepartmentDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            MesDepartmentDTO dialogResult;

            if (mesDepartmentDTO == null)
            {

                dialogResult = await _dialogService.OpenAsync<AddEditMesDepartment>("Создать производство", new Dictionary<string, object>() { { "MesDepartmentId", 0 } }
                    , new DialogOptions() { Width = $"{1100}px", Left = $"{300}px" });
            }
            else
            {
                dialogResult = await _dialogService.OpenAsync<AddEditMesDepartment>("Изменить производство", new Dictionary<string, object>() { { "MesDepartmentId", mesDepartmentDTO.Id } },
                new DialogOptions() { Width = $"{1100}px", Left = $"{300}px" });
            }


            if (dialogResult != null)
            {

                IsLoading = true;
                await LoadStateAsync();
                StateHasChanged();
                mesDepartmentDTOs = await _mesDepartmentRepository.GetAllTopLevel();
                IsLoading = false;
                StateHasChanged();
            }
        }
    }


    async Task DeleteRow(MesDepartmentDTO mesDepartmentDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (_dialogs != null)
            {                
                if (mesDepartmentDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление производства", "Удалить производство \"" + mesDepartmentDTO.ShortName + "\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление производства", "Восстановить производство \"" + mesDepartmentDTO.ShortName + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }
                }
            }



            //if (mesDepartmentDTOs.Contains(mesDepartmentDTO))
            //{
            MesDepartmentDTO oldMesDepartmentDTO = await _mesDepartmentRepository.GetById(mesDepartmentDTO.Id);
            if (mesDepartmentDTO.IsArchive)
            {
                await _mesDepartmentRepository.Delete(mesDepartmentDTO.Id, SD.UpdateMode.RestoreFromArchive);
                mesDepartmentDTO.IsArchive = false;
                await _logEventRepository.ToLog<MesDepartmentDTO>(oldMesDepartmentDTO, mesDepartmentDTO, "Восстановление из архива производства", "Производство: ", _authorizationRepository);
                await _jsRuntime.ToastrSuccess("Производство \"" + mesDepartmentDTO.Name + "\" восстановлено из архива");
            }
            else
            {
                await _mesDepartmentRepository.Delete(mesDepartmentDTO.Id, SD.UpdateMode.MoveToArchive);
                mesDepartmentDTO.IsArchive = true;
                await _logEventRepository.ToLog<MesDepartmentDTO>(oldMesDepartmentDTO, mesDepartmentDTO, "Удаление в архив производства", "Производство: ", _authorizationRepository);
                await _jsRuntime.ToastrSuccess("Производство \"" + mesDepartmentDTO.Name + "\" удалено в архив");
            }
            await mesDepartmentDTOGrid.UpdateRow(mesDepartmentDTO);
            //}
            //else
            //{
            //    mesDepartmentDTOGrid.CancelEditRow(mesDepartmentDTO);
            //    await mesDepartmentDTOGrid.Reload();
            //}
        }
    }

    async Task ToggleRowsExpand(bool value)
    {
        // ExpandInProgressFlag = true;
        // await Task.Delay(10);
        // await InvokeAsync(StateHasChanged);

        for (int i = 0; i < MaxExpandLevel; i++)
        {
            if (value == true)
            {
                await mesDepartmentDTOGrid.ExpandRows(mesDepartmentDTOGrid.PagedView);
            }
            else if (value == false)
            {
                await mesDepartmentDTOGrid.CollapseRows(mesDepartmentDTOGrid.PagedView);
            }
        }

        IsExpandModeOn = value;
        // ExpandInProgressFlag = false;
        // await Task.Delay(10);
        // await InvokeAsync(StateHasChanged);

    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "MesDepartment_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            int maxLevel = 1;
            Tuple<IEnumerable<MesDepartmentVMDTO>, int> tmp = await _mesDepartmentRepository.GetAllDepartmentWithChildren(null, 1, maxLevel, null);
            IEnumerable<MesDepartmentVMDTO> mesDepartmentVMDTOList = tmp.Item1;
            maxLevel = tmp.Item2;

            await _simpleExcelExportRepository.GenerateExcelMesDepartments(filename, mesDepartmentVMDTOList, maxLevel);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }

}