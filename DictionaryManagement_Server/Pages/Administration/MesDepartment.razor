@page "/administration/MesDepartment"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json;

@inject IJSRuntime _jsRuntime
@inject IMesDepartmentRepository _mesDepartmentRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository
@inject ILogEventRepository _logEventRepository
@inject DialogService _dialogService

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/MesDepartment">Производства</a></h6>
        </div>

        @if (IsLoading != true)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenButton title="Добавить новое производство" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-1 mb-1" Text="Добавить новое производство"
                              Click="@(args => EditRow(null))" Disabled="@(IsAdmin != AdminMode.IsAdmin || ExpandInProgressFlag == true || CollapseInProgressFlag == true || SearchInProgressFlag==true)" />
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel ВСЕХ производств" Text="--> в Excel" Icon="grid_on" Click="@(args => ExcelExport())"
                              IsBusy=@excelExportFlag BusyText="Выполняется ..."
                              Disabled="@(CollapseInProgressFlag==true || ExpandInProgressFlag==true || SearchInProgressFlag==true)" />
                @*                 <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="@(IsExpandModeOn ? "Свернуть всю иерархию производств" : "Развернуть всю иерархию производств")" Text="@(IsExpandModeOn ? "Свернуть" : "Развернуть")"
        Icon="@(IsExpandModeOn ? "unfold_less" : "unfold_more")" Click="@(args => ToggleRowsExpand(!IsExpandModeOn))"
        IsBusy=@ExpandInProgressFlag BusyText="Выполняется ..." />
        *@

                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1"
                              title="@(ExpandLevel < MaxExpandLevel ? "Развернуть уровень " + ExpandLevel.ToString() + " иерархии производств" : "Достигнут максимальный уровень равный " + (MaxExpandLevel-1).ToString())"
                              Text="@(ExpandLevel < MaxExpandLevel ? "Развернуть уровень " + ExpandLevel.ToString():" Maкс уровень " + (MaxExpandLevel-1).ToString())"
                              Icon="unfold_more" Click="@(args => ToggleRowsExpand(true))"
                              IsBusy=@ExpandInProgressFlag BusyText="Выполняется ..."
                              Disabled="@(ExpandLevel >= MaxExpandLevel || CollapseInProgressFlag==true || ExpandInProgressFlag==true || SearchInProgressFlag==true)" />
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1"
                              title="@(ExpandLevel > 2 ? "Свернуть до уровня " + (ExpandLevel-1).ToString() + " иерархии производств" : "Достигнут минимальный уровень равный " + (ExpandLevel-1).ToString())"
                              Text="@(ExpandLevel > 2 ? "Свернуть уровень " + (ExpandLevel-1).ToString():" Мин уровень " + (ExpandLevel-1).ToString())"
                              Icon="unfold_less" Click="@(args => ToggleRowsExpand(false))"
                              IsBusy=@CollapseInProgressFlag BusyText="Выполняется ..."
                              Disabled="@(ExpandLevel <= 2 || CollapseInProgressFlag==true || ExpandInProgressFlag==true || SearchInProgressFlag==true)" />

                <div class="mt-1 mb-1 col-2" style="white-space:pre-wrap; font-size: 10px; color:powderblue">
                    <RadzenLabel Text="@("* фильтр действует только по \"развёрнутым\" записям")" />
                </div>
                <RadzenTextBox Trim="true" Placeholder="Поиск..." class="mt-1 col-2" @bind-Value=@searchString
                               @oninput=@(args => @searchString = args.Value.ToString())
                               @onkeypress=@(args => SearchInputKeyPressed(args))
                               Style="font-size: 0.75rem; height: 80%; max-height: 80%;"/>
                <RadzenButton Size="ButtonSize.Small" class="mt-1"
                              Text="Поиск"
                              title="Поиск по всем элементам справочника"
                              Icon="search" Click="@(() => SearchOnClick(@searchString))"
                              IsBusy=@SearchInProgressFlag BusyText="Поиск ..."
                              Disabled="@(CollapseInProgressFlag==true || ExpandInProgressFlag==true)" />
                @*                     <RadzenButton Size=ButtonSize.Small Style="text-transform:none" ButtonStyle=ButtonStyle.Primary Variant=Variant.Text
        Text="@(String.Concat("Отображается ", mesDepartmentDTOGrid.View == null ? "0" : mesDepartmentDTOGrid.View.Count().ToString(),
        " из ", mesDepartmentFullListDTOs == null ? "0" : mesDepartmentFullListDTOs.Count().ToString(), " записей"))" />
        *@

            </RadzenRow>
            <RadzenDataGridApp @bind-Settings="@MesDepartmentGridSettings" SettingsName="MesDepartmentGridSettings" @ref="mesDepartmentDTOGrid" ExpandMode="DataGridExpandMode.Multiple"
                               Data="@mesDepartmentDTOs" TItem="MesDepartmentDTO" RowRender="@RowRender" LoadChildData="@LoadChildData"
                               AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               EmptyText="Нет записей для отображения"
                               FilterMode="FilterMode.Advanced"
                               Density="Density.Compact"
                               AllowColumnResize="false"
                               GridLines="DataGridGridLines.Both"
                               Style="height:calc(100vh - 160px)"
                               MesDepartmentCount="@mesDepartmentCount"
                               SelectionMode="DataGridSelectionMode.Single"
                               @bind-Value=@selectedDepartments>
                <Columns>
                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="Name" Title="Наименование" Frozen="true" Width="200px"
                                             FilterOperator="FilterOperator.Contains" SortProperty="Name" FilterProperty="Name">
                        <Template Context="data">
                            <div style="white-space:pre-wrap">
                                <strong>@data.Name</strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="ToStringId" Title="ИД" Width="40px" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId" FilterProperty="ToStringId" />
                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="ToStringMesCode" Title="Код" Width="40px" FilterOperator="FilterOperator.Contains" SortProperty="ToStringMesCode" FilterProperty="ToStringMesCode" />
                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="ShortName" Title="Сокр. наименование" FilterOperator="FilterOperator.Contains" Width="200px">
                        <Template Context="data">
                            <div style="white-space:pre-wrap" id="@("id_var_" + data.ToStringId)">
                                @data.ShortName
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="MesDepartmentDTO" Property="IsArchive" Title="Архив" Filterable="true" Width="60px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value="data.IsArchive" ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp Title="Действия" TItem="MesDepartmentDTO" Context="mesDepartmentDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="50px">
                        <Template Context="mesDepartmentDTO">
                            <RadzenButton title="Редактировать производство" Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                                          Size="ButtonSize.Medium" Click="@(args => EditRow(mesDepartmentDTO))"
                                          @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin || CollapseInProgressFlag|| ExpandInProgressFlag || SearchInProgressFlag==true)" />
                            @if (!mesDepartmentDTO.IsArchive)
                            {
                                <RadzenButton title="Удалить в архив производство" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(mesDepartmentDTO))" @onclick:stopPropagation="true"
                                              Disabled="@(IsAdmin != AdminMode.IsAdmin || CollapseInProgressFlag || ExpandInProgressFlag || SearchInProgressFlag==true)">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton title="Восстановить из архива производство" ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter"
                                              Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mesDepartmentDTO))" @onclick:stopPropagation="true"
                                              Disabled="@(IsAdmin != AdminMode.IsAdmin || CollapseInProgressFlag || ExpandInProgressFlag || SearchInProgressFlag==true)">
                                </RadzenButton>
                            }
                        </Template>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            <Loading IsLoading="@IsLoading" />
        }

    </div>
}

<style>
    /*     .rz-textbox {
            font-size: 0.75rem;
            height: 80%;
            max-height: 80%;
        } */    
</style>

@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<MesDepartmentDTO>? mesDepartmentFullListDTOs;
    IEnumerable<MesDepartmentDTO>? mesDepartmentDTOs;
    IList<MesDepartmentDTO>? selectedDepartments;
    RadzenDataGrid<MesDepartmentDTO> mesDepartmentDTOGrid;

    public int ExpandLevel { get; set; } = 1;
    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }
    public bool ExpandInProgressFlag { get; set; } = false;
    public bool CollapseInProgressFlag { get; set; } = false;
    public bool SearchInProgressFlag { get; set; } = false;
    public bool excelExportFlag { get; set; } = false;
    public int? mesDepartmentCount = 0;
    public string searchString { get; set; } = "";

    // считаем что больше уровней производств вряд ли будет
    public int MaxExpandLevel { get; set; } = 5;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await LoadStateAsync();
                await Task.Delay(10);
                await InvokeAsync(StateHasChanged);
                mesDepartmentFullListDTOs = await GetRecords();
                mesDepartmentDTOs = await GetAllTopLevel();
                if (mesDepartmentDTOs != null)
                    mesDepartmentCount = mesDepartmentFullListDTOs.Count();
                IsLoading = false;
                await Task.Delay(10);
                await InvokeAsync(StateHasChanged);
                //await ToggleRowsExpand(true);
            }
            else
                _navigationManager.NavigateTo("/administration");
        }
    }

    DataGridSettings _mesDepartmentGridSettings;
    public DataGridSettings MesDepartmentGridSettings
    {
        get
        {
            return _mesDepartmentGridSettings;
        }
        set
        {
            if (_mesDepartmentGridSettings != value)
            {
                _mesDepartmentGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        if (!(await SD.CheckPageSettingsVersion("MesDepartmentGridSettings", _jsRuntime)))
            return;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "MesDepartmentGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _mesDepartmentGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('MesDepartmentGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(MesDepartmentGridSettings)}')");
        await SD.SetPageSettingsVersion("MesDepartmentGridSettings", _jsRuntime);
    }


    void RowRender(RowRenderEventArgs<MesDepartmentDTO> args)
    {
        args.Expandable = HasChild(args.Data.Id).GetAwaiter().GetResult();
    }

    void LoadChildData(DataGridLoadChildDataEventArgs<MesDepartmentDTO> args)
    {
        args.Data = GetChildList(args.Item.Id).GetAwaiter().GetResult();
    }

    async Task EditRow(MesDepartmentDTO mesDepartmentDTO)
    {        
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            MesDepartmentDTO dialogResult;
            if (mesDepartmentDTO == null)
            {
                dialogResult = await _dialogService.OpenAsync<AddEditMesDepartment>("Создать производство", new Dictionary<string, object>() { { "MesDepartmentId", 0 } }
                    , new DialogOptions() { Width = $"{1100}px", Left = $"calc(50vw - 750px)" });
                if (dialogResult != null)
                {
                    int currentExpandLevel = ExpandLevel;
                    await LoadStateAsync();
                    await Task.Delay(10);
                    await InvokeAsync(StateHasChanged);
                    ExpandLevel = 1;
                    mesDepartmentFullListDTOs = await GetRecords();
                    mesDepartmentDTOs = await GetAllTopLevel();
                    for (int i = 1; i < (currentExpandLevel - 1); i++)
                    {
                        await ToggleRowsExpand(true);
                    }
                    IsLoading = false;
                    await Task.Delay(10);
                    await InvokeAsync(StateHasChanged);
                }
            }
            else
            {
                dialogResult = await _dialogService.OpenAsync<AddEditMesDepartment>("Изменить производство", new Dictionary<string, object>() { { "MesDepartmentId", mesDepartmentDTO.Id } },
                new DialogOptions() { Width = $"{1100}px", Left = $"calc(50vw - 750px)" });
                if (dialogResult != null)
                {
                    if (mesDepartmentDTO.ParentDepartmentId != dialogResult.ParentDepartmentId)
                    {
                        int currentExpandLevel = ExpandLevel;
                        await LoadStateAsync();
                        await Task.Delay(10);
                        await InvokeAsync(StateHasChanged);
                        ExpandLevel = 1;
                        mesDepartmentFullListDTOs = await GetRecords();
                        mesDepartmentDTOs = await GetAllTopLevel();
                        for (int i = 1; i < (currentExpandLevel - 1); i++)
                        {
                            await ToggleRowsExpand(true);
                        }
                        IsLoading = false;
                        await Task.Delay(10);
                        await InvokeAsync(StateHasChanged);
                    }
                    else
                    {
                        mesDepartmentDTO.Name = dialogResult.Name;
                        mesDepartmentDTO.ShortName = dialogResult.ShortName;
                        mesDepartmentDTO.DepLevel = dialogResult.DepLevel;
                        mesDepartmentDTO.DepartmentParentDTO = dialogResult.DepartmentParentDTO;
                        mesDepartmentDTO.IsArchive = dialogResult.IsArchive;
                        mesDepartmentDTO.ParentDepartmentId = dialogResult.ParentDepartmentId;
                        mesDepartmentDTO.MesCode = dialogResult.MesCode;
                        await mesDepartmentDTOGrid.UpdateRow(mesDepartmentDTO);
                        await Task.Delay(10);
                        await InvokeAsync(StateHasChanged);
                    }
                }
            }

            // if (dialogResult != null)
            // {
            //     roleVMDTO.Name = dialogResult.Name;
            //     roleVMDTO.Description = dialogResult.Description;
            //     roleVMDTO.IsAdmin = dialogResult.IsAdmin;
            //     roleVMDTO.IsAdminReadOnly = dialogResult.IsAdminReadOnly;
            //     await roleVMDTOGrid.UpdateRow(roleVMDTO);

            //     IsLoading = true;
            //     await LoadStateAsync();
            //     StateHasChanged();
            //     mesDepartmentDTOs = await _mesDepartmentRepository.GetAllTopLevel();
            //     IsLoading = false;
            //     StateHasChanged();
            // }
        }
    }


    async Task DeleteRow(MesDepartmentDTO mesDepartmentDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (_dialogs != null)
            {
                if (mesDepartmentDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление производства", "Удалить производство \"" + mesDepartmentDTO.ShortName + "\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление производства", "Восстановить производство \"" + mesDepartmentDTO.ShortName + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }
                }
            }

            //if (mesDepartmentDTOs.Contains(mesDepartmentDTO))
            //{
            MesDepartmentDTO oldMesDepartmentDTO = await _mesDepartmentRepository.GetById(mesDepartmentDTO.Id);
            if (mesDepartmentDTO.IsArchive)
            {
                await _mesDepartmentRepository.Delete(mesDepartmentDTO.Id, SD.UpdateMode.RestoreFromArchive);
                mesDepartmentDTO.IsArchive = false;
                await _logEventRepository.ToLog<MesDepartmentDTO>(oldMesDepartmentDTO, mesDepartmentDTO, "Восстановление из архива производства", "Производство: ", _authorizationRepository);
                await _jsRuntime.ToastrSuccess("Производство \"" + mesDepartmentDTO.Name + "\" восстановлено из архива");
            }
            else
            {
                await _mesDepartmentRepository.Delete(mesDepartmentDTO.Id, SD.UpdateMode.MoveToArchive);
                mesDepartmentDTO.IsArchive = true;
                await _logEventRepository.ToLog<MesDepartmentDTO>(oldMesDepartmentDTO, mesDepartmentDTO, "Удаление в архив производства", "Производство: ", _authorizationRepository);
                await _jsRuntime.ToastrSuccess("Производство \"" + mesDepartmentDTO.Name + "\" удалено в архив");
            }
            await mesDepartmentDTOGrid.UpdateRow(mesDepartmentDTO);
            //}
            //else
            //{
            //    mesDepartmentDTOGrid.CancelEditRow(mesDepartmentDTO);
            //    await mesDepartmentDTOGrid.Reload();
            //}
        }
    }

    async Task ToggleRowsExpand(bool value)
    {
        if (value == true)
        {
            ExpandInProgressFlag = true;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
            if (ExpandLevel <= MaxExpandLevel)
            {
                await mesDepartmentDTOGrid.ExpandRows(mesDepartmentDTOGrid.PagedView.Where(u => u.DepLevel == (ExpandLevel - 1)));
                ExpandLevel++;
            }
            ExpandInProgressFlag = false;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
        }
        else if (value == false)
        {
            CollapseInProgressFlag = true;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
            if (ExpandLevel >= 2)
            {
                await mesDepartmentDTOGrid.CollapseRows(mesDepartmentDTOGrid.PagedView.Where(u => u.DepLevel == (ExpandLevel - 2)));
                ExpandLevel--;
            }
            CollapseInProgressFlag = false;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task<IEnumerable<MesDepartmentDTO>?> GetRecords()
    {
        return await _mesDepartmentRepository.GetAll(SD.SelectDictionaryScope.All);
    }

    async Task<bool> HasChild(int id)
    {
        if (mesDepartmentFullListDTOs != null)
            return mesDepartmentFullListDTOs.Where(u => u.ParentDepartmentId == id).Any(); ;
        return false;
    }

    async Task<IEnumerable<MesDepartmentDTO>?> GetAllTopLevel()
    {
        if (mesDepartmentFullListDTOs != null)
        {
            var tempList = mesDepartmentFullListDTOs.Where(u => (u.ParentDepartmentId == null || u.ParentDepartmentId <= 0)).ToList();
            foreach (var item in tempList)
                item.DepLevel = ExpandLevel;
            ExpandLevel++;
            return mesDepartmentFullListDTOs.Where(u => (u.ParentDepartmentId == null || u.ParentDepartmentId <= 0)).ToList();
        }
        return null;
    }

    async Task<IEnumerable<MesDepartmentDTO>?> GetChildList(int id)
    {
        if (id == null)
        {
            var tempList = mesDepartmentFullListDTOs.Where(u => (u.ParentDepartmentId == null || u.ParentDepartmentId == 0
                || u.ParentDepartmentId == u.Id)).ToList();
            foreach (var item in tempList)
                item.DepLevel = ExpandLevel;
            return tempList;
        }
        else
        {
            var tempList = mesDepartmentFullListDTOs.Where(u => u.ParentDepartmentId == id).ToList();
            foreach (var item in tempList)
                item.DepLevel = ExpandLevel;
            return tempList;
        }
    }


    async Task SearchOnClick(string searchStringPar)
    {
        SearchInProgressFlag = true;        
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);

        if (String.IsNullOrEmpty(searchStringPar))
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "Пустая строка поиска");
            SearchInProgressFlag = false;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
            return;
        }

        if (mesDepartmentFullListDTOs == null || mesDepartmentFullListDTOs.Count() <= 0)
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "Справочник производств пустой");
            SearchInProgressFlag = false;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
            return;
        }

        IEnumerable<MesDepartmentDTO>? foundMesDepartmentList = mesDepartmentFullListDTOs.Where(u => u.ForSearchProperty.Contains(searchStringPar.Trim().ToUpper()));

        if (foundMesDepartmentList == null || foundMesDepartmentList.Count() <= 0)
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "Не найдено производств по поисковой строке: \"" + searchStringPar + "\"");
            SearchInProgressFlag = false;
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
            return;
        }

        MesDepartmentDTO dialogResult = await _dialogService.OpenAsync<FoundMesDepartment>("По строке поиска \"" + searchStringPar + "\" найдено производств: " + foundMesDepartmentList.Count().ToString(),
            new Dictionary<string, object>() { { "FoundMesDepartmentList", (IEnumerable<MesDepartmentDTO>)foundMesDepartmentList.OrderBy(u => u.ToStringHierarchyShortName) } }
            , new DialogOptions() { Width = $"{1100}px", Left = $"calc(50vw - 750px)" });

        if (dialogResult != null)
        {            
            MesDepartmentDTO? selectDepartment;
            var selectDepartments = mesDepartmentDTOGrid.View.Where(u => u.Id == dialogResult.Id);
            if (selectDepartments != null && selectDepartments.Count() > 0)
            {
                selectDepartment = selectDepartments.First();
                if (selectDepartment != null)
                {
                    await mesDepartmentDTOGrid.SelectRow(selectDepartment);
                }
            }
            else
            {
                int? parentId = dialogResult.ParentDepartmentId;
                int sortInt = 100;
                List<(MesDepartmentDTO, int)> expandList = new List<(MesDepartmentDTO, int)>();
                while (parentId != null && parentId != 0)
                {
                    var foundItem = mesDepartmentFullListDTOs.First(u => u.Id == parentId);
                    if (foundItem != null)
                    {
                        expandList.Add((foundItem, sortInt));
                        parentId = foundItem.ParentDepartmentId;
                    }
                    else
                        parentId = null;
                    sortInt--;
                }
                expandList = expandList.OrderBy(u => u.Item2).ToList();
                foreach (var item in expandList)
                {
                    if (!mesDepartmentDTOGrid.IsRowExpanded(item.Item1))
                        await mesDepartmentDTOGrid.ExpandRow(item.Item1);
                }

                //await _jsRuntime.InvokeVoidAsync("eval", $"document.getElementById('{dialogResult.ToStringId}').scrollTop = document.getElementById('{dialogResult.ToStringId}').scrollHeight");
                //await _jsRuntime.InvokeVoidAsync("eval", "document.getElementById(\"" + dialogResult.ToStringId + "\").scrollIntoView()");

                //await _jsRuntime.InvokeVoidAsync("eval", $@"document.getElementById('{dialogResult.ToStringId}').scrollIntoView()");

                bool isFilterApplied = false;
                var viewItem = mesDepartmentDTOGrid.View.FirstOrDefault(u => u.Id == dialogResult.Id);
                if (viewItem == null) isFilterApplied = true;

                bool selectionResult = true;
                if (isFilterApplied)
                {
                    selectionResult = await _dialogs.ShowYesOrNoDialogBox("Поиск", "Из-за применённого фильтра не удастся увидеть выбранный элемент. Очистить фильтры?", "Очистить", "Отмена");
                    if (selectionResult == true)
                    {                                                
                        if (MesDepartmentGridSettings != null)
                        {
                            foreach (var c in MesDepartmentGridSettings.Columns)
                            {
                                c.FilterValue = null;
                                c.SecondFilterValue = null;
                            }
                        }
                        await InvokeAsync(SaveStateAsync);
                        await Task.Delay(10);
                        await InvokeAsync(StateHasChanged);
                    }
                }
                await mesDepartmentDTOGrid.SelectRow(dialogResult, true);
                 
                if (isFilterApplied && selectionResult != true)
                {
                    await _jsRuntime.ToastrWarningLight("Запись выделена. Очистите применённые фильтры, чтобы увидеть найденную запись");
                }

            }
        }

        SearchInProgressFlag = false;
        await Task.Delay(10);
        await InvokeAsync(StateHasChanged);
        if (dialogResult != null)
        {
            await _jsRuntime.InvokeVoidAsync("eval",
                "(document.getElementById('id_var_" + dialogResult.ToStringId + "') !==null) ? (document.getElementById('id_var_" + dialogResult.ToStringId + "').scrollIntoView({ behavior: 'smooth',  block: 'center',})) : null");
            await Task.Delay(10);
            await InvokeAsync(StateHasChanged);
        }
    }

    protected async Task SearchInputKeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchOnClick(@searchString);
        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "MesDepartment_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            int maxLevel = 1;
            Tuple<IEnumerable<MesDepartmentVMDTO>, int> tmp = await _mesDepartmentRepository.GetAllDepartmentWithChildren(null, 1, maxLevel, null);
            IEnumerable<MesDepartmentVMDTO> mesDepartmentVMDTOList = tmp.Item1;
            maxLevel = tmp.Item2;

            await _simpleExcelExportRepository.GenerateExcelMesDepartments(filename, mesDepartmentVMDTOList, maxLevel);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }

}