@page "/dictionary/CorrectionReason"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json

@inject DialogService DialogService
@inject IJSRuntime _jsRuntime
@inject ICorrectionReasonRepository _correctionReasonRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository
@inject ILogEventRepository _logEventRepository


@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/dictionary">Справочники</a> - <a href="/dictionary/CorrectionReason">Причины корректировок</a></h6>
        </div>

        @if (IsLoading != true)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-1 mb-1" Text="Добавить новую причину корректировки"
                              Click="@InsertRow" Disabled=@(correctionReasonDTOToInsert != null || correctionReasonDTOToUpdate != null || IsAdmin != AdminMode.IsAdmin) />
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
            </RadzenRow>
            <RadzenDataGridApp @ref="correctionReasonDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               @bind-Settings="@CorrectionReasonGridSettings" SettingsName="CorrectionReasonGridSettings"
                               Data="@correctionReasonDTOs" TItem="CorrectionReasonDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.Advanced"
                               AllowColumnResize="false"
                               GridLines="DataGridGridLines.Both"
                               Style="height:calc(100vh - 155px)"
                               SelectionMode="DataGridSelectionMode.Single"
                               @bind-Value=@selectedTableCorrectionReason
                               RowDoubleClick="() => EditRow(selectedTableCorrectionReason.FirstOrDefault())">                
                <Columns>
                    <RadzenDataGridColumnApp TItem="CorrectionReasonDTO" Property="Id" Title="Ид записи" Width="120px" />
                    <RadzenDataGridColumnApp TItem="CorrectionReasonDTO" Property="Name" Title="Наименование" Width="320px">
                        <Template Context="correctionReasonDTO">
                            <div style="white-space:pre-wrap">
                                @correctionReasonDTO.Name
                            </div>
                        </Template>
                        <EditTemplate Context="correctionReasonDTO">
                            <RadzenTextBox @bind-Value="correctionReasonDTO.Name" Style="width:100%; display: block" Name="Name" />
                            <RadzenRequiredValidator Text="Наименование обязателено к заполнению" Component="Name" Popup="true" />
                            <RadzenLengthValidator Max=250 Text="Наименование не может быть больше 250 символов" Component="Name" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="CorrectionReasonDTO" Property="IsArchive" Title="Архив" Filterable="true" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="true" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp Title="Действия" TItem="CorrectionReasonDTO" Context="correctionReasonDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                        <Template Context="correctionReasonDTO">
                            <RadzenButton title="Редактировать" Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@(args => EditRow(correctionReasonDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton>
                            @if (!correctionReasonDTO.IsArchive)
                            {
                                <RadzenButton title="Восстановить из архива" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(correctionReasonDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton title="Удалить в архив" ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(correctionReasonDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                                </RadzenButton>
                            }
                        </Template>
                        <EditTemplate Context="correctionReasonDTO">
                            <RadzenButton title="Сохранить" Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@((args) => SaveRow(correctionReasonDTO))" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton>
                            <RadzenButton title="Отмена" Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1"
                                          Click="@((args) => CancelEdit(correctionReasonDTO))">
                            </RadzenButton>
                            @* <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                          Click="@(args => DeleteRow(correctionReasonDTO))" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton> *@
                        </EditTemplate>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            <Loading IsLoading="@IsLoading" />
        }
    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }
    public string DeleteMessage { get; set; } = "";

    RadzenDataGrid<CorrectionReasonDTO> correctionReasonDTOGrid;

    IEnumerable<CorrectionReasonDTO> correctionReasonDTOs;

    CorrectionReasonDTO correctionReasonDTOToInsert;
    CorrectionReasonDTO correctionReasonDTOToUpdate;

    IList<CorrectionReasonDTO>? selectedTableCorrectionReason;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }
    public bool excelExportFlag { get; set; } = false;

    DataGridSettings _correctionReasonGridSettings;
    public DataGridSettings CorrectionReasonGridSettings
    {
        get
        {
            return _correctionReasonGridSettings;
        }
        set
        {
            if (_correctionReasonGridSettings != value)
            {
                _correctionReasonGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;
        if (!(await SD.CheckPageSettingsVersion("CorrectionReasonGridSettings", _jsRuntime)))
            return;
        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "CorrectionReasonGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _correctionReasonGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }
    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;
        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('CorrectionReasonGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(CorrectionReasonGridSettings)}')");
        await SD.SetPageSettingsVersion("CorrectionReasonGridSettings", _jsRuntime);
    }


    void Reset()
    {
        correctionReasonDTOToInsert = null;
        correctionReasonDTOToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                await LoadStateAsync();
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                correctionReasonDTOs = await _correctionReasonRepository.GetAll(SD.SelectDictionaryScope.All);
                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/dictionary");
        }
    }

    async Task EditRow(CorrectionReasonDTO correctionReasonDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            correctionReasonDTOToUpdate = correctionReasonDTO;
            await correctionReasonDTOGrid.EditRow(correctionReasonDTO);
        }
    }

    async Task OnUpdateRow(CorrectionReasonDTO correctionReasonDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (correctionReasonDTO == correctionReasonDTOToInsert)
            {
                correctionReasonDTOToInsert = null;
            }

            correctionReasonDTOToUpdate = null;

            var objectForCheckName = await _correctionReasonRepository.GetByName(correctionReasonDTO.Name);
            if (objectForCheckName != null)
            {
                if (objectForCheckName.Id != correctionReasonDTO.Id)
                {
                    var objectForRestore = await _correctionReasonRepository.Get(correctionReasonDTO.Id);
                    correctionReasonDTO.Name = objectForRestore.Name;
                    await correctionReasonDTOGrid.UpdateRow(correctionReasonDTO);
                    await correctionReasonDTOGrid.Reload();
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть запись причины корректировки с наименованием \"" + objectForCheckName.Name + "\" с ИД записи = " + objectForCheckName.Id.ToString());
                    return;
                }
            }
            CorrectionReasonDTO oldCorrectionReasonDTO = await _correctionReasonRepository.Get(correctionReasonDTO.Id);
            CorrectionReasonDTO newCorrectionReasonDTO = await _correctionReasonRepository.Update(correctionReasonDTO, SD.UpdateMode.Update);
            await _logEventRepository.ToLog<CorrectionReasonDTO>(oldObject: oldCorrectionReasonDTO, newObject: newCorrectionReasonDTO, "Изменение причины корректировки", "Причина корректировки: ", _authorizationRepository);
        }
    }

    async Task SaveRow(CorrectionReasonDTO correctionReasonDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            await correctionReasonDTOGrid.UpdateRow(correctionReasonDTO);
        }
    }

    void CancelEdit(CorrectionReasonDTO correctionReasonDTO)
    {
        if (correctionReasonDTO == correctionReasonDTOToInsert)
        {
            correctionReasonDTOToInsert = null;
        }

        correctionReasonDTOToUpdate = null;

        var objectForRestore = _correctionReasonRepository.Get(correctionReasonDTO.Id).GetAwaiter().GetResult();
        if (objectForRestore != null)
        {
            correctionReasonDTO.Name = objectForRestore.Name;
            correctionReasonDTOGrid.UpdateRow(correctionReasonDTO);
        }
        correctionReasonDTOGrid.Reload();

        correctionReasonDTOGrid.CancelEditRow(correctionReasonDTO);

    }

    async Task DeleteRow(CorrectionReasonDTO correctionReasonDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (_dialogs != null)
            {
                if (correctionReasonDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление причины корректировок", "Удалить причину корректировок \"" + correctionReasonDTO.Name + "\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление причины корректировки", "Восстановить причину корректировок \"" + correctionReasonDTO.Name + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }
                }
            }
            if (correctionReasonDTO == correctionReasonDTOToInsert)
            {
                correctionReasonDTOToInsert = null;
            }

            if (correctionReasonDTO == correctionReasonDTOToUpdate)
            {
                correctionReasonDTOToUpdate = null;
            }

            if (correctionReasonDTOs.Contains(correctionReasonDTO))
            {

                CorrectionReasonDTO oldCorrectionReasonDTO = await _correctionReasonRepository.Get(correctionReasonDTO.Id);
                CorrectionReasonDTO newCorrectionReasonDTO = new CorrectionReasonDTO();
                string logEventTypeName = "";

                if (correctionReasonDTO.IsArchive)
                {
                    newCorrectionReasonDTO = await _correctionReasonRepository.Update(correctionReasonDTO, SD.UpdateMode.RestoreFromArchive);
                    correctionReasonDTO.IsArchive = false;
                    await _jsRuntime.ToastrSuccess("Причина корректировки " + correctionReasonDTO.Name + " восстановлена из архива");
                    logEventTypeName = "Восстановление из архива причины корректировки";
                }
                else
                {
                    newCorrectionReasonDTO = await _correctionReasonRepository.Update(correctionReasonDTO, SD.UpdateMode.MoveToArchive);
                    correctionReasonDTO.IsArchive = true;
                    await _jsRuntime.ToastrSuccess("Причина корректировки " + correctionReasonDTO.Name + " удалена в архив");
                    logEventTypeName = "Удаление в архив причины корректировки";
                }
                await _logEventRepository.ToLog<CorrectionReasonDTO>(oldObject: oldCorrectionReasonDTO, newObject: newCorrectionReasonDTO, logEventTypeName, "Причина корректировки: ", _authorizationRepository);
                await correctionReasonDTOGrid.UpdateRow(correctionReasonDTO);
                //await sapEquipmentDTOGrid.Reload();
            }
            else
            {
                correctionReasonDTOGrid.CancelEditRow(correctionReasonDTO);
                await correctionReasonDTOGrid.Reload();
            }
        }
    }

    async Task InsertRow()
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            correctionReasonDTOToInsert = new CorrectionReasonDTO();
            await correctionReasonDTOGrid.InsertRow(correctionReasonDTOToInsert);
        }
    }

    async Task OnCreateRow(CorrectionReasonDTO correctionReasonDTO)
    {

        if (IsAdmin == AdminMode.IsAdmin)
        {
            correctionReasonDTOToInsert = null;

            var objectForCheckName = await _correctionReasonRepository.GetByName(correctionReasonDTO.Name);
            if (objectForCheckName != null)
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть запись причины ошибки с наименованием \"" + objectForCheckName.Name + "\" с ИД записи = " + objectForCheckName.Id.ToString());
                correctionReasonDTOGrid.CancelEditRow(correctionReasonDTO);
                await correctionReasonDTOGrid.Reload();
                return;
            }

            var newDTO = await _correctionReasonRepository.Create(correctionReasonDTO);
            await _logEventRepository.ToLog<CorrectionReasonDTO>(oldObject: null, newObject: newDTO, "Добавление причины корректировки", "Причина корректировки: ", _authorizationRepository);

            //correctionReasonDTOToInsert.Id = newDTO.Id;
            //await correctionReasonDTOGrid.UpdateRow(correctionReasonDTOToInsert);

            await OnAfterRenderAsync(true);
        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "CorrectionReason_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelCorrectionReason(filename, (IEnumerable<CorrectionReasonDTO>)correctionReasonDTOGrid.View);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }
}


