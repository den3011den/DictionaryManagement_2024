@page "/dictionary/MesMaterial"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.Data.SqlClient
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json

@inject DialogService DialogService
@inject IJSRuntime _jsRuntime
@inject IMesMaterialRepository _mesMaterialRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository
@inject ILogEventRepository _logEventRepository
@inject DialogService _dialogService

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/dictionary">Справочники</a> - <a href="/dictionary/MesMaterial">Материалы MES</a></h6>
        </div>

        @if (IsLoading != true)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-1 mb-1" Text="Добавить новый материал MES"
                              Click="@InsertRow" Disabled=@(mesMaterialDTOToInsert != null || mesMaterialDTOToUpdate != null || IsAdmin != AdminMode.IsAdmin) />
                <i class="bi bi-grip-vertical mt-2 mb-1"></i>
                @if (@excelExportFlag)
                {
                    <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
                }
                else
                {
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ...">
                        <i class="bi bi-database"></i><i class="bi bi-arrow-right"></i><i class="bi bi-grid-3x3"></i>&nbsp;&nbsp;Выгрузить в Excel
                </RadzenButton>
                }
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" ButtonStyle="ButtonStyle.Success" title="Загрузка данных из Excel в справочник Материалов MES" Text="Импорт из Excel <--" Icon="grid_on" Click="@(args => ExcelImport())">
                    <i class="bi bi-database"></i><i class="bi bi-arrow-left"></i><i class="bi bi-grid-3x3"></i>&nbsp;&nbsp;Загрузить из Excel
                </RadzenButton>
            </RadzenRow>
            <RadzenDataGridApp @bind-Settings="@MesMaterialGridSettings" SettingsName="MesMaterialGridSettings" @ref="mesMaterialDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               Data="@mesMaterialDTOs" TItem="MesMaterialDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               AllowColumnResize="false"
                               FilterMode="FilterMode.Advanced"
                               GridLines="DataGridGridLines.Both"
                               Style="height:calc(100vh - 155px)"
                               @bind-Value=@selectedTableMesMaterial
                               RowDoubleClick="() => EditRow(selectedTableMesMaterial.FirstOrDefault())">
                <Columns>
                    <RadzenDataGridColumnApp TItem="MesMaterialDTO" Property="Id" Title="Ид записи" Width="120px" />
                    <RadzenDataGridColumnApp TItem="MesMaterialDTO" Property="Code" Title="Код материала" Width="120px">
                        <EditTemplate Context="mesMaterialDTO">
                            <RadzenTextBox @bind-Value="mesMaterialDTO.Code" Style="width:50%; display: block" Name="Code" />
                            <RadzenRequiredValidator Text="Код материала обязателен к заполнению" Component="Code" Popup="true" />
                            <RadzenLengthValidator Max=100 Text="Код материала не может быть больше 100 символов" Component="Code" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="MesMaterialDTO" Property="Name" Title="Наименование" Width="220px">
                        <Template Context="mesMaterialDTO">
                            <div style="white-space:pre-wrap">
                                @mesMaterialDTO.Name
                            </div>
                        </Template>

                        <EditTemplate Context="mesMaterialDTO">
                            <RadzenTextBox @bind-Value="mesMaterialDTO.Name" Style="width:100%; display: block" Name="Name" />
                            <RadzenRequiredValidator Text="Наименование обязателено к заполнению" Component="Name" Popup="true" />
                            <RadzenLengthValidator Max=250 Text="Наименование не может быть больше 250 символов" Component="Name" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="MesMaterialDTO" Property="ShortName" Title="Сокр. наименование" Width="220px">
                        <Template Context="mesMaterialDTO">
                            <div style="white-space:pre-wrap">
                                @mesMaterialDTO.ShortName
                            </div>
                        </Template>
                        <EditTemplate Context="mesMaterialDTO">
                            <RadzenTextBox @bind-Value="mesMaterialDTO.ShortName" Style="width:100%; display: block" Name="ShortName" />
                            <RadzenRequiredValidator Text="Сокр. наименование обязателено к заполнению" Component="ShortName" Popup="true" />
                            <RadzenLengthValidator Max=100 Text="Сокр. наименование не может быть больше 100 символов" Component="ShortName" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="MesMaterialDTO" Property="IsArchive" Title="Архив" Filterable="true" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp Title="Действия" TItem="MesMaterialDTO" Context="mesMaterialDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="86px">
                        <Template Context="mesMaterialDTO">
                            <RadzenButton title="Редактировать" Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@(args => EditRow(mesMaterialDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton>
                            @if (!mesMaterialDTO.IsArchive)
                            {
                                <RadzenButton title="Удалить в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(mesMaterialDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton title="Восстановить из архива" ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(mesMaterialDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                                </RadzenButton>
                            }
                        </Template>
                        <EditTemplate Context="mesMaterialDTO">
                            <RadzenButton title="Сохранить" Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@((args) => SaveRow(mesMaterialDTO))" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton>
                            <RadzenButton title="Отмена" Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1"
                                          Click="@((args) => CancelEdit(mesMaterialDTO))">
                            </RadzenButton>
                            @* <RadzenButton title="Удалить в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                          Click="@(args => DeleteRow(mesMaterialDTO))" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton> *@
                        </EditTemplate>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            <Loading IsLoading="@IsLoading" />
        }
    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    public string DeleteMessage { get; set; } = "";

    RadzenDataGrid<MesMaterialDTO> mesMaterialDTOGrid;

    IEnumerable<MesMaterialDTO> mesMaterialDTOs;

    MesMaterialDTO mesMaterialDTOToInsert;
    MesMaterialDTO mesMaterialDTOToUpdate;

    IList<MesMaterialDTO>? selectedTableMesMaterial;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }

    public bool excelExportFlag { get; set; } = false;

    void Reset()
    {
        mesMaterialDTOToInsert = null;
        mesMaterialDTOToUpdate = null;
    }

    DataGridSettings _mesMaterialGridSettings;
    public DataGridSettings MesMaterialGridSettings
    {
        get
        {
            return _mesMaterialGridSettings;
        }
        set
        {
            if (_mesMaterialGridSettings != value)
            {
                _mesMaterialGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;
        if (!(await SD.CheckPageSettingsVersion("MesMaterialGridSettings", _jsRuntime)))
            return;
        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "MesMaterialGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _mesMaterialGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }
    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;
        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('MesMaterialGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(MesMaterialGridSettings)}')");
        await SD.SetPageSettingsVersion("MesMaterialGridSettings", _jsRuntime);
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await LoadStateAsync();
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                try
                {
                    mesMaterialDTOs = await _mesMaterialRepository.GetAll(SD.SelectDictionaryScope.All);
                }
                catch (SqlException ex) when (ex.Number == -2)
                {
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "Превышен интервал запроса к БД, равный " + SD.SqlCommandConnectionTimeout.ToString() + " сек.");
                    mesMaterialDTOs = new List<MesMaterialDTO>();
                }                
                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/dictionary");
        }
    }

    async Task EditRow(MesMaterialDTO mesMaterialDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            mesMaterialDTOToUpdate = mesMaterialDTO;
            await mesMaterialDTOGrid.EditRow(mesMaterialDTO);
        }
    }

    async Task OnUpdateRow(MesMaterialDTO mesMaterialDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            bool needAskUser = false;

            if (mesMaterialDTO == mesMaterialDTOToInsert)
            {
                mesMaterialDTOToInsert = null;
            }

            mesMaterialDTOToUpdate = null;
            string errorMessage = string.Empty;

            var objectForCheckName = _mesMaterialRepository.GetByName(mesMaterialDTO.Name).Result;

            if (objectForCheckName != null)
            {
                if (objectForCheckName.Id != mesMaterialDTO.Id)
                {
                    if (errorMessage != string.Empty)
                    {
                        errorMessage = errorMessage + "\n";
                    }
                    errorMessage = errorMessage + "Уже есть запись с наименованием материала MES \"" + objectForCheckName.Name + "\" (ИД записи: " + objectForCheckName.Id.ToString() + ")";
                    needAskUser = true;
                }
            }

            var objectForCheckShortName = _mesMaterialRepository.GetByName(mesMaterialDTO.ShortName).Result;

            if (objectForCheckShortName != null)
            {
                if (objectForCheckShortName.Id != mesMaterialDTO.Id)
                {
                    if (errorMessage != string.Empty)
                    {
                        errorMessage = errorMessage + "\n";
                    }
                    errorMessage = errorMessage + "Уже есть запись с сокр. наименованием материала MES \"" + objectForCheckShortName.ShortName + "\" (ИД записи: " + objectForCheckShortName.Id.ToString() + ")";
                    needAskUser = true;
                }
            }

            var objectForCheckCode = _mesMaterialRepository.GetByCode(mesMaterialDTO.Code).Result;
            if (objectForCheckCode != null)
            {
                if (objectForCheckCode.Id != mesMaterialDTO.Id)
                {
                    errorMessage = "Уже есть запись с кодом материала MES \"" + objectForCheckCode.Code + "\" (ИД записи: " + objectForCheckCode.Id.ToString() + ")";
                    needAskUser = true;
                }
            }


            if (errorMessage != string.Empty)
            {
                bool returnFlag = false;
                if (needAskUser)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Изменение материала MES", errorMessage + " Всё равно сохранить изменения ?", "Сохранить", "Отмена");
                    if (selectionResult == false)
                    {
                        returnFlag = true;
                    }
                }
                else
                {
                    returnFlag = true;
                }

                if (returnFlag == true)
                {
                    var objectForRestore = await _mesMaterialRepository.Get(mesMaterialDTO.Id);
                    mesMaterialDTO.Code = objectForRestore.Code;
                    mesMaterialDTO.Name = objectForRestore.Name;
                    mesMaterialDTO.ShortName = objectForRestore.ShortName;
                    await mesMaterialDTOGrid.UpdateRow(mesMaterialDTO);
                    await mesMaterialDTOGrid.Reload();
                    if (needAskUser == false)
                    {
                        await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", errorMessage);
                    }
                    return;
                }
            }

            MesMaterialDTO oldMesMaterialDTO = await _mesMaterialRepository.Get(mesMaterialDTO.Id);
            MesMaterialDTO newMesMaterialDTO = await _mesMaterialRepository.Update(mesMaterialDTO, SD.UpdateMode.Update);
            await _logEventRepository.ToLog<MesMaterialDTO>(oldObject: oldMesMaterialDTO, newObject: newMesMaterialDTO, "Изменение материала MES", "Материал MES: ", _authorizationRepository);
        }
    }

    async Task SaveRow(MesMaterialDTO mesMaterialDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            await mesMaterialDTOGrid.UpdateRow(mesMaterialDTO);
        }
    }

    void CancelEdit(MesMaterialDTO mesMaterialDTO)
    {
        if (mesMaterialDTO == mesMaterialDTOToInsert)
        {
            mesMaterialDTOToInsert = null;
        }

        mesMaterialDTOToUpdate = null;

        mesMaterialDTOGrid.CancelEditRow(mesMaterialDTO);

        var objectForRestore = _mesMaterialRepository.Get(mesMaterialDTO.Id).GetAwaiter().GetResult();
        if (objectForRestore != null)
        {

            mesMaterialDTO.Code = objectForRestore.Code;
            mesMaterialDTO.Name = objectForRestore.Name;
            mesMaterialDTO.ShortName = objectForRestore.ShortName;
            mesMaterialDTOGrid.UpdateRow(mesMaterialDTO);
        }
        mesMaterialDTOGrid.Reload();
    }

    async Task DeleteRow(MesMaterialDTO mesMaterialDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (_dialogs != null)
            {
                if (mesMaterialDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление материала MES", "Удалить материал MES \"" + mesMaterialDTO.ShortName + "\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление материала MES", "Восстановить материал MES \"" + mesMaterialDTO.ShortName + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }
                }
            }

            if (mesMaterialDTO == mesMaterialDTOToInsert)
            {
                mesMaterialDTOToInsert = null;
            }

            if (mesMaterialDTO == mesMaterialDTOToUpdate)
            {
                mesMaterialDTOToUpdate = null;
            }

            if (mesMaterialDTOs.Contains(mesMaterialDTO))
            {
                MesMaterialDTO oldMesMaterialDTO = await _mesMaterialRepository.Get(mesMaterialDTO.Id);
                MesMaterialDTO newMesMaterialDTO = new MesMaterialDTO();
                string logEventTypeName = "";

                if (mesMaterialDTO.IsArchive)
                {
                    newMesMaterialDTO = await _mesMaterialRepository.Update(mesMaterialDTO, SD.UpdateMode.RestoreFromArchive);
                    mesMaterialDTO.IsArchive = false;
                    await _jsRuntime.ToastrSuccess("Материал \"" + mesMaterialDTO.Name + "\" восстановлен из архива");
                    logEventTypeName = "Восстановление из архива материала MES";
                }
                else
                {
                    newMesMaterialDTO = await _mesMaterialRepository.Update(mesMaterialDTO, SD.UpdateMode.MoveToArchive);
                    mesMaterialDTO.IsArchive = true;
                    await _jsRuntime.ToastrSuccess("Материал \"" + mesMaterialDTO.Name + "\" удалён в архив");
                    logEventTypeName = "Удаление в архив материала MES";
                }
                await _logEventRepository.ToLog<MesMaterialDTO>(oldObject: oldMesMaterialDTO, newObject: newMesMaterialDTO, logEventTypeName, "Материал MES: ", _authorizationRepository);
                await mesMaterialDTOGrid.UpdateRow(mesMaterialDTO);
            }
            else
            {
                mesMaterialDTOGrid.CancelEditRow(mesMaterialDTO);
                await mesMaterialDTOGrid.Reload();
            }
        }
    }

    async Task InsertRow()
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            mesMaterialDTOToInsert = new MesMaterialDTO();
            await mesMaterialDTOGrid.InsertRow(mesMaterialDTOToInsert);
        }
    }

    async Task OnCreateRow(MesMaterialDTO mesMaterialDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            mesMaterialDTOToInsert = null;

            bool needAskUser = false;
            string errorMessage = string.Empty;

            var objectForCheckName = _mesMaterialRepository.GetByName(mesMaterialDTO.Name).Result;

            if (objectForCheckName != null)
            {
                if (errorMessage != string.Empty)
                {
                    errorMessage = errorMessage + "\n";
                }
                errorMessage = errorMessage + "Уже есть запись с наименованием материала MES \"" + objectForCheckName.Name + "\" (ИД записи: " + objectForCheckName.Id.ToString() + ")";
                needAskUser = true;
            }

            var objectForCheckShortName = _mesMaterialRepository.GetByName(mesMaterialDTO.ShortName).Result;

            if (objectForCheckShortName != null)
            {
                if (errorMessage != string.Empty)
                {
                    errorMessage = errorMessage + "\n";
                }
                errorMessage = errorMessage + "Уже есть запись с сокр. наименованием материала MES \"" + objectForCheckShortName.ShortName + "\" (ИД записи: " + objectForCheckShortName.Id.ToString() + ")";
                needAskUser = true;
            }

            var objectForCheckCode = _mesMaterialRepository.GetByCode(mesMaterialDTO.Code).Result;
            if (objectForCheckCode != null)
            {
                errorMessage = "Уже есть запись с кодом материала MES \"" + objectForCheckCode.Code + "\" (ИД записи: " + objectForCheckCode.Id.ToString() + ")";
                needAskUser = false;
            }


            if (errorMessage != string.Empty)
            {
                bool returnFlag = false;
                if (needAskUser)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Добавление материала MES", errorMessage + " Всё равно добавить ?", "Добавить", "Отмена");
                    if (selectionResult == false)
                    {
                        returnFlag = true;
                    }
                }
                else
                {
                    returnFlag = true;
                }

                if (returnFlag == true)
                {
                    if (needAskUser == false)
                    {
                        await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", errorMessage);
                    }
                    mesMaterialDTOGrid.CancelEditRow(mesMaterialDTO);
                    await mesMaterialDTOGrid.Reload();
                    return;
                }
            }
            var newDTO = await _mesMaterialRepository.Create(mesMaterialDTO);
            await _logEventRepository.ToLog<MesMaterialDTO>(oldObject: null, newObject: newDTO, "Добавление материала MES", "Материал MES: ", _authorizationRepository);
            await OnAfterRenderAsync(true);
        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "MesMaterial_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelMesMaterial(filename, (IEnumerable<MesMaterialDTO>)mesMaterialDTOGrid.View);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }

    async Task ExcelImport()
    {
        IsLoading = true;
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            bool? dialogResult = false;
            IsLoading = false;
            dialogResult = await _dialogService.OpenAsync<LoadFromExcel>("Загрузка данных из Excel (Материалы MES)", new Dictionary
                    <string, object>
                    () { { "LoadFromExcelReportTemplateTypeNameSettingName", SD.MesMaterialLoadFromExcelReportTemplateTypeNameSettingName }
                    ,{ "DataList", (IEnumerable<MesMaterialDTO>)mesMaterialDTOGrid.View } }
                    , new DialogOptions() { Width = $"{60}rem", Left = "calc(50vw - 40rem)" });
            // if (dialogResult==true)
            // {
            await this.OnAfterRenderAsync(true);
            // }
            IsLoading = false;
        }
        IsLoading = false;
    }


}
