@page "/EventJournal/LogEvent"
@attribute [Authorize]

@using System.Text.Json;
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels;


@inject IJSRuntime _jsRuntime
@inject TooltipService tooltipService
@inject ILogEventRepository _logEventRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository

@inject DialogService _dialogService

@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/EventJournal">Журнал событий</a> - <a href="/EventJournal/LogEvent">Журнал событий</a></h6>
        </div>

        @if (IsLoading != true)
        {

            <RadzenRow Gap="1rem" Class="rz-p-0 rz-p-lg-2">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack>
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenDatePicker @bind-Value=@startDate Change="@(args => ChangeStartDate())" ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenDatePicker @bind-Value=@endDate Change="@(args => ChangeEndDate())" Min=minEndDate Max=@maxEndDate ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Disabled="@ApplyButtonDisabled" Text="Применить" Click="@(args => GetRows())" />
                                <RadzenButton title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="--> в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>

            <RadzenDataGridApp @bind-Settings="@LogEventGridSettings" SettingsName="LogEventGridSettings" @ref="logEventDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               Data="@logEventDTOs" TItem="LogEventDTO"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.SimpleWithMenu"
                               Density=Density.Compact
                               ShowPagingSummary="true"
                               EmptyText="Нет записей для отображения"
                               AllowVirtualization="true"
                               GridLines="DataGridGridLines.Both"
                               Style="height:calc(100vh - 190px)"
                               ShowCleanGridSortsHeaderButton="false"
                               ShowCleanGridFiltersHeaderButton="false"
                               ShowCleanGridSettingsHeaderButton="false">
                <HeaderTemplate>
                    <RadzenButton Size="ButtonSize.Small" Text="Очистить настройки интерфейса страницы" Icon="settings"
                                  ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="(args) => CleanPageSettingsCustom()">
                    </RadzenButton>
                    <RadzenButton Size="ButtonSize.Small" Text="Очистить все фильтры" Icon="filter_alt"
                                  ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="(args) => CleanAllFiltersCustom()">
                    </RadzenButton>

                    <RadzenButton Size="ButtonSize.Small" Text="Очистить все сортировки" Icon="swap_vert"
                                  ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="(args) => CleanAllOrdersCustom()">
                    </RadzenButton>
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumnApp TItem="LogEventDTO" Property="ToStringId" Title="Ид записи" Width="65px" TextAlign="TextAlign.Center"
                                             FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="Id">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.ToStringId
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventDTO" Property="EventTime" Title="Время" Width="80px" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.EventTime
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventDTO" Title="Тип события" Property="LogEventTypeDTOFK.Name" Type="typeof(IEnumerable<string>)" Width="80px"
                                             FilterValue="@selectedLogEventTypes" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedLogEventTypes
                                            Change=OnSelectedLogEventTypesChange Data="@(distinctLogEventTypesInList)" AllowClear="true" Multiple="true" Style="width: 500px; font-size:0.75rem"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.LogEventTypeDTOFK.Name
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventDTO" Title="Пользователь" Property="UserDTOFK.UserName" Type="typeof(IEnumerable<string>)" Width="70px"
                                             FilterValue="@selectedUsers" FilterOperator="FilterOperator.Contains" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <FilterTemplate>
                            <RadzenDropDown @bind-Value=@selectedUsers
                                            Change=OnSelectedUsersChange Data="@(distinctUsersInList)" AllowClear="true" Multiple="true" Style="width: 500px; font-size:0.75rem"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
                                            SelectAllText="ВСЕ" SelectedItemsText="элементов выбрано" />
                        </FilterTemplate>
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.UserDTOFK.UserName
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventDTO" Property="Description" Title="Описание" Width="100px" TextAlign="TextAlign.Start"
                                             FilterProperty="Description" FilterOperator="FilterOperator.Contains" SortProperty="Description">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.Description
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventDTO" Property="OldValue" Title="Старое значение" Width="60px" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">                                
                                    @data1.OldValue                                
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventDTO" Property="NewValue" Title="Новое значение" Width="60px" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.NewValue
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventDTO" Property="IsCriticalBool" Title="Крит." Filterable="true" Width="30px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @if (data.IsCriticalBool)
                            {
                                <RadzenCheckBox @bind-Value=data.IsCriticalBool ReadOnly="true" TriState="false" TValue="bool"
                                                Style="background-color: red;border: 1px solid red;" />
                            }
                            else
                            {
                                <RadzenCheckBox @bind-Value=data.IsCriticalBool ReadOnly="true" TriState="false" TValue="bool" />
                            }
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventDTO" Property="IsErrorBool" Title="Ошибка" Filterable="true" Width="30px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @if (data.IsErrorBool)
                            {

                                <RadzenCheckBox @bind-Value=data.IsErrorBool ReadOnly="true" TriState="false" TValue="bool"
                                                Style="background-color: red;border: 1px solid red;" />
                            }
                            else
                            {
                                <RadzenCheckBox @bind-Value=data.IsErrorBool ReadOnly="true" TriState="false" TValue="bool" />
                            }
                        </Template>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventDTO" Property="IsWarningBool" Title="Предупреждение" Filterable="true" Width="30px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsWarningBool ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }

    </div>
}

<style>
    .rz-dropdown-item, .rz-menuitem, .rz-autocomplete-list-item, .rz-multiselect-item, .rz-dropdown-items li, .rz-autocomplete-items li, .rz-multiselect-items li {
        font-size: 0.75rem;
    }
</style>

@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<LogEventDTO>? logEventDTOs;

    RadzenDataGrid<LogEventDTO> logEventDTOGrid;

    IEnumerable<string> selectedLogEventTypes;
    IEnumerable<string> selectedUsers;

    List<string> distinctLogEventTypesInList = new List<string>();
    List<string> distinctUsersInList = new List<string>();

    DateTime startDate = DateTime.Today.AddDays(-1);
    DateTime endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime minEndDate = DateTime.Today.AddDays(-3);

    bool excelExportFlag = false;

    int applyRadioGroupValue = 1;

    bool ApplyButtonDisabled = true;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
            {
                IsAdmin = true;
                applyRadioGroupValue = 1;
                ApplyButtonDisabled = false;

                startDate = DateTime.Today.AddDays(-1);
                endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                minEndDate = DateTime.Today.AddDays(-3);

                IsLoading = true;
                await LoadStateAsync();
                StateHasChanged();

                await GetRows();

                IsLoading = false;
                StateHasChanged();
            }
            else
                _navigationManager.NavigateTo("/EventJournal");
        }
    }


    DataGridSettings _logEventGridSettings;
    public DataGridSettings LogEventGridSettings
    {
        get
        {
            return _logEventGridSettings;
        }
        set
        {
            if (_logEventGridSettings != value)
            {
                _logEventGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        if (!(await SD.CheckPageSettingsVersion("LogEventGridSettings", _jsRuntime)))
            return;
        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "LogEventGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _logEventGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
            if (_logEventGridSettings != null)
            {
                var col_var = _logEventGridSettings.Columns.Where(c => c.Property == "LogEventTypeDTOFK.Name").FirstOrDefault();
                if (col_var.FilterValue != null)
                {
                    selectedLogEventTypes = JsonSerializer.Deserialize<List<string>>(col_var.FilterValue.ToString());
                }
                var col_var2 = _logEventGridSettings.Columns.Where(c => c.Property == "UserDTOFK.UserName").FirstOrDefault();
                if (col_var2.FilterValue != null)
                {
                    selectedUsers = JsonSerializer.Deserialize<List<string>>(col_var2.FilterValue.ToString());
                }
            }
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;
        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('LogEventGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(LogEventGridSettings)}')");
        await SD.SetPageSettingsVersion("LogEventGridSettings", _jsRuntime);
    }


    private async Task ChangeStartDate()
    {
        ApplyButtonDisabled = false;
        maxEndDate = startDate.AddDays(2).AddSeconds(-1);
        minEndDate = startDate.AddDays(-1);
        if (endDate > maxEndDate)
            endDate = maxEndDate;

    }

    private async Task ChangeEndDate()
    {
        ApplyButtonDisabled = false;
    }


    async Task GetRows()
    {
        IsLoading = true;
        await LoadStateAsync();
        StateHasChanged();
        logEventDTOs = await _logEventRepository.GetAllByTimeInterval(startDate, endDate);

        distinctLogEventTypesInList = (List<string>)logEventDTOs.OrderBy(u => u.LogEventTypeDTOFK.Name)
            .Select(u => u.LogEventTypeDTOFK.Name).Distinct().ToList();
        distinctUsersInList = (List<string>)logEventDTOs.OrderBy(u => u.UserDTOFK.UserName)
            .Select(u => u.UserDTOFK.UserName).Distinct().ToList();

        ApplyButtonDisabled = true;
        IsLoading = false;
        StateHasChanged();

    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);

        int viewCount = logEventDTOGrid.View.Count();

        // запас 100 строк на заголовки например
        if (viewCount > (SD.MaxAllowedExcelRows - 100))
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "В выборке " + viewCount.ToString()
                + " записей, что близко или превышает максимально доступное для Excel количество записей в "
                + SD.MaxAllowedExcelRows.ToString() + " строк." +
                "\n\n\n Установите фильтры или уменьшите интервал дат, чтобы количество выгружаемых строк не превышало этот предел.");
        }
        else
        {
            if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
            {
                string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
                string filename = "LogEvent_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
                await _simpleExcelExportRepository.GenerateExcelLogEvent(filename, (IEnumerable<LogEventDTO>)logEventDTOGrid.View);

                await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
            }
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }


    void OnSelectedLogEventTypesChange(object value)
    {
        if (selectedLogEventTypes != null && !selectedLogEventTypes.Any())
        {
            selectedLogEventTypes = null;
        }
    }

    void OnSelectedUsersChange(object value)
    {
        if (selectedUsers != null && !selectedUsers.Any())
        {
            selectedUsers = null;
        }
    }

    private async Task CleanPageSettingsCustom()
    {
        await Task.CompletedTask;
        var selectionResult = await _dialogService.Confirm("Будут очищены пользовательские настройки страницы: видимость колонок, порядок следования колонок, ширина колонок, применённые фильтры", "Сбросить настройки интерфейса страницы",
            new ConfirmOptions { OkButtonText = "Очистить", CancelButtonText = "Отмена", Left = "300px" });

        if (selectionResult != true)
        {
            await InvokeAsync(SaveStateAsync);
            return;
        }

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.removeItem", "LogEventGridSettings");

        LogEventGridSettings = null;

        selectedLogEventTypes = null;
        selectedUsers = null;

        if (logEventDTOs != null)
        {
            distinctLogEventTypesInList = (List<string>)logEventDTOs.OrderBy(u => u.LogEventTypeDTOFK.Name)
            .Select(u => u.LogEventTypeDTOFK.Name).Distinct().ToList();
            distinctUsersInList = (List<string>)logEventDTOs.OrderBy(u => u.UserDTOFK.UserName)
                .Select(u => u.UserDTOFK.UserName).Distinct().ToList();

        }

        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);

    }

    async Task CleanAllFiltersCustom()
    {
        var selectionResult = await _dialogService.Confirm("Будут очищены все фильтры", "Очистить фильтры",
            new ConfirmOptions { OkButtonText = "Очистить", CancelButtonText = "Отмена", Left = "300px" });

        if (selectionResult != true)
        {
            await InvokeAsync(SaveStateAsync);
            return;
        }

        if (LogEventGridSettings != null)
        {
            foreach (var c in LogEventGridSettings.Columns)
            {
                c.FilterValue = null;
                c.SecondFilterValue = null;
            }

        }

        selectedLogEventTypes = null;
        selectedUsers = null;

        if (logEventDTOs != null)
        {
            distinctLogEventTypesInList = (List<string>)logEventDTOs.OrderBy(u => u.LogEventTypeDTOFK.Name)
            .Select(u => u.LogEventTypeDTOFK.Name).Distinct().ToList();
            distinctUsersInList = (List<string>)logEventDTOs.OrderBy(u => u.UserDTOFK.UserName)
                .Select(u => u.UserDTOFK.UserName).Distinct().ToList();

        }

        await InvokeAsync(SaveStateAsync);
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);

    }

    async Task CleanAllOrdersCustom()
    {

        var selectionResult = await _dialogService.Confirm("Будут очищены все сортировки", "Очистить сортировки",
            new ConfirmOptions { OkButtonText = "Очистить", CancelButtonText = "Отмена", Left = "300px" });

        if (selectionResult != true)
        {
            await InvokeAsync(SaveStateAsync);
            return;
        }

        if (LogEventGridSettings != null)
        {
            foreach (var c in LogEventGridSettings.Columns)
            {
                c.SortOrder = null;
            }
            await InvokeAsync(SaveStateAsync);
            await Task.Delay(200);
            await InvokeAsync(StateHasChanged);
        }
    }
}

