@page "/EventJournal/LogEventType"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json
@using DictionaryManagement_Server.Shared

@inject IJSRuntime _jsRuntime
@inject ILogEventTypeRepository _logEventTypeRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository
@inject ILogEventRepository _logEventRepository

@if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">
        <div class="col-12">
            <h6 class="card-title text-primary"><a href="/">Главная</a> - <a href="/EventJournal">Журнал событий</a> - <strong><font style="font-size:1.1rem; color:cornflowerblue;text-decoration: cornflowerblue overline; text-underline-offset: 5px; text-decoration-thickness: 4px;">Типы событий</font></strong></h6>
        </div>

        <RadzenRow AlignItems="AlignItems.Start">
            <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-1 mb-1" Text="Добавить новый тип событий"
                          Click="@InsertRow" 
                          Disabled=@(logEventTypeDTOToInsert != null || logEventTypeDTOToUpdate != null || IsAdmin != AdminMode.IsAdmin || IsLoading) />
            <i class="bi bi-grip-vertical mt-2 mb-1"></i>
            <RadzenButton Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Icon="refresh" class="mt-1 mb-1" Text="Обновить"
                          Click="() => OnAfterRenderAsync(true)"
                          Disabled=@(logEventTypeDTOToInsert != null || logEventTypeDTOToUpdate != null || IsLoading) />
            <i class="bi bi-grip-vertical mt-2 mb-1"></i>
            @if (@excelExportFlag)
            {
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания"
                              Disabled=@(logEventTypeDTOToInsert != null || logEventTypeDTOToUpdate != null || IsLoading)
                              IsBusy=@excelExportFlag BusyText="Выполняется ..." />
            }
            else
            {
                <RadzenButton Size="ButtonSize.Small" class="mt-1 mb-1" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания"
                              Disabled=@(logEventTypeDTOToInsert != null || logEventTypeDTOToUpdate != null || IsLoading)
                              Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" 
                              IsBusy=@excelExportFlag BusyText="Выполняется ...">
                    <i class="bi bi-database"></i><i class="bi bi-arrow-right"></i><i class="bi bi-grid-3x3"></i>&nbsp;&nbsp;Выгрузить в Excel
                </RadzenButton>
            }
        </RadzenRow>

        @if (IsLoading != true)
        {
            <RadzenDataGridApp @ref="logEventTypeDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               @bind-Settings="@LogEventTypeGridSettings" SettingsName="LogEventTypeGridSettings"
                               Data="@logEventTypeDTOs" TItem="LogEventTypeDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.Advanced"
                               AllowColumnResize="false"
                               AllowVirtualization="true"
                               GridLines="DataGridGridLines.Both"
                               Style="height:calc(100vh - 158px)"
                               @bind-Value=@selectedTableLogEventType
                               RowDoubleClick="() => EditRow(selectedTableLogEventType.FirstOrDefault())">
                <Columns>
                    <RadzenDataGridColumnApp TItem="LogEventTypeDTO" Property="Id" Title="Ид записи" Width="120px" />
                    <RadzenDataGridColumnApp TItem="LogEventTypeDTO" Property="Name" Title="Наименование">
                        <Template Context="logEventTypeDTO">
                            <div style="white-space:pre-wrap">
                                @logEventTypeDTO.Name
                            </div>
                        </Template>
                        <EditTemplate Context="logEventTypeDTO">
                            <RadzenTextBox @bind-Value="logEventTypeDTO.Name" Style="width:100%; display: block" Name="Name" />
                            <RadzenRequiredValidator Text="Обязательно к заполнению" Component="Name" />
                            <RadzenLengthValidator Max=100 Text="Не больше 100 символов" Component="Name"/>
                        </EditTemplate>
                    </RadzenDataGridColumnApp>

                    <RadzenDataGridColumnApp TItem="LogEventTypeDTO" Property="IsArchive" Title="Архив" Filterable="true" Width="120px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="true" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumnApp>
                    <RadzenDataGridColumnApp Title="Действия" TItem="LogEventTypeDTO" Context="logEventTypeDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                        <Template Context="logEventTypeDTO">
                            <RadzenButton title="Редактировать" Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@(args => EditRow(logEventTypeDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton>
                            @if (!logEventTypeDTO.IsArchive)
                            {
                                <RadzenButton title="Удалить в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(logEventTypeDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton title="Восстановить из архива" ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                                              Click="@(args => DeleteRow(logEventTypeDTO))" @onclick:stopPropagation="true" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                                </RadzenButton>
                            }
                        </Template>
                        <EditTemplate Context="logEventTypeDTO">
                            <RadzenButton title="Сохранить" Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@((args) => SaveRow(logEventTypeDTO))" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                            </RadzenButton>
                            <RadzenButton title="Отмена" Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(logEventTypeDTO))">
                            </RadzenButton>
                            @*                             <RadzenButton title="Удалить в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1"
                    Click="@(args => DeleteRow(logEventTypeDTO))" Disabled="@(IsAdmin != AdminMode.IsAdmin)">
                    </RadzenButton> *@
                        </EditTemplate>
                    </RadzenDataGridColumnApp>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            <Loading IsLoading="@IsLoading" />
        }
    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    public string DeleteMessage { get; set; } = "";

    RadzenDataGrid<LogEventTypeDTO> logEventTypeDTOGrid;

    IEnumerable<LogEventTypeDTO> logEventTypeDTOs;

    IList<LogEventTypeDTO>? selectedTableLogEventType;

    LogEventTypeDTO logEventTypeDTOToInsert;
    LogEventTypeDTO logEventTypeDTOToUpdate;

    bool firtsInsertRow = true;

    public bool IsLoading { get; set; } = true;
    public AdminMode IsAdmin { get; set; }
    public bool excelExportFlag { get; set; } = false;

    DataGridSettings _logEventTypeGridSettings;
    public DataGridSettings LogEventTypeGridSettings
    {
        get
        {
            return _logEventTypeGridSettings;
        }
        set
        {
            if (_logEventTypeGridSettings != value)
            {
                _logEventTypeGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;
        if (!(await SD.CheckPageSettingsVersion("LogEventTypeGridSettings", _jsRuntime)))
            return;
        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "LogEventTypeGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _logEventTypeGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }
    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;
        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('LogEventTypeGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(LogEventTypeGridSettings)}')");
        await SD.SetPageSettingsVersion("LogEventTypeGridSettings", _jsRuntime);
    }


    void Reset()
    {
        logEventTypeDTOToInsert = null;
        logEventTypeDTOToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsAdmin = await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On);
            if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
            {
                IsLoading = true;
                await LoadStateAsync();
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
                logEventTypeDTOs = _logEventTypeRepository.GetAll(SD.SelectDictionaryScope.All).Result;
                IsLoading = false;
                await Task.Delay(100);
                await InvokeAsync(StateHasChanged);
            }
            else
                _navigationManager.NavigateTo("/EventJournal");
        }
    }

    async Task EditRow(LogEventTypeDTO logEventTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            logEventTypeDTOToUpdate = logEventTypeDTO;
            await logEventTypeDTOGrid.EditRow(logEventTypeDTO);
        }
    }

    async Task OnUpdateRow(LogEventTypeDTO logEventTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (logEventTypeDTO == logEventTypeDTOToInsert)
            {
                logEventTypeDTOToInsert = null;
            }

            logEventTypeDTOToUpdate = null;

            var objectForCheckName = await _logEventTypeRepository.GetByName(logEventTypeDTO.Name);
            if (objectForCheckName != null)
            {
                if (objectForCheckName.Id != logEventTypeDTO.Id)
                {
                    var objectForRestore = await _logEventTypeRepository.Get(logEventTypeDTO.Id);
                    logEventTypeDTO.Name = objectForRestore.Name;
                    await logEventTypeDTOGrid.UpdateRow(logEventTypeDTO);
                    await logEventTypeDTOGrid.Reload();
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть запись типа события с наименованием \"" + objectForCheckName.Name + "\" с ИД записи = " + objectForCheckName.Id.ToString());
                    return;
                }
            }

            LogEventTypeDTO oldLogEventTypeDTO = await _logEventTypeRepository.Get(logEventTypeDTO.Id);
            LogEventTypeDTO newLogEventTypeDTO = await _logEventTypeRepository.Update(logEventTypeDTO, SD.UpdateMode.Update);
            await _logEventRepository.ToLog<LogEventTypeDTO>(oldObject: oldLogEventTypeDTO, newObject: newLogEventTypeDTO, "Изменение типа события", "Тип события: ", _authorizationRepository);
        }
    }

    async Task SaveRow(LogEventTypeDTO logEventTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            await logEventTypeDTOGrid.UpdateRow(logEventTypeDTO);
        }
    }

    void CancelEdit(LogEventTypeDTO logEventTypeDTO)
    {
        if (logEventTypeDTO == logEventTypeDTOToInsert)
        {
            logEventTypeDTOToInsert = null;
        }

        logEventTypeDTOToUpdate = null;

        var objectForRestore = _logEventTypeRepository.Get(logEventTypeDTO.Id).GetAwaiter().GetResult();
        if (objectForRestore != null)
        {
            logEventTypeDTO.Name = objectForRestore.Name;
            logEventTypeDTOGrid.UpdateRow(logEventTypeDTO);
        }
        logEventTypeDTOGrid.Reload();

        logEventTypeDTOGrid.CancelEditRow(logEventTypeDTO);

    }

    async Task DeleteRow(LogEventTypeDTO logEventTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (_dialogs != null)
            {
                if (logEventTypeDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление типа события", "Удалить тип события \"" + logEventTypeDTO.Name + "\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление типа события", "Восстановить тип события \"" + logEventTypeDTO.Name + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }
                }
            }
            if (logEventTypeDTO == logEventTypeDTOToInsert)
            {
                logEventTypeDTOToInsert = null;
            }

            if (logEventTypeDTO == logEventTypeDTOToUpdate)
            {
                logEventTypeDTOToUpdate = null;
            }

            if (logEventTypeDTOs.Contains(logEventTypeDTO))
            {
                LogEventTypeDTO oldLogEventTypeDTO = await _logEventTypeRepository.Get(logEventTypeDTO.Id);
                LogEventTypeDTO newLogEventTypeDTO = new LogEventTypeDTO();
                string logEventTypeName = "";

                if (logEventTypeDTO.IsArchive)
                {
                    await _logEventTypeRepository.Update(logEventTypeDTO, SD.UpdateMode.RestoreFromArchive);
                    logEventTypeDTO.IsArchive = false;
                    await _jsRuntime.ToastrSuccess("Тип событий " + logEventTypeDTO.Name + " восстановлен из архива");
                    logEventTypeName = "Восстановление из архива типа события";
                }
                else
                {
                    await _logEventTypeRepository.Update(logEventTypeDTO, SD.UpdateMode.MoveToArchive);
                    logEventTypeDTO.IsArchive = true;
                    await _jsRuntime.ToastrSuccess("Тип событий " + logEventTypeDTO.Name + " удален в архив");
                    logEventTypeName = "Удаление в архив типа события";
                }
                await _logEventRepository.ToLog<LogEventTypeDTO>(oldObject: oldLogEventTypeDTO, newObject: newLogEventTypeDTO, logEventTypeName, "Тип события: ", _authorizationRepository);
                await logEventTypeDTOGrid.UpdateRow(logEventTypeDTO);
                //await sapEquipmentDTOGrid.Reload();
            }
            else
            {
                logEventTypeDTOGrid.CancelEditRow(logEventTypeDTO);
                await logEventTypeDTOGrid.Reload();
            }
        }
    }

    async Task InsertRow()
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            if (firtsInsertRow)
            {
                firtsInsertRow = false;
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "Добавление новой записи в справочник типов событий не приведёт к появлению событий этого типа в журнале событий без внесения изменений в программный код приложений СИР!");
            }

            logEventTypeDTOToInsert = new LogEventTypeDTO();
            await logEventTypeDTOGrid.InsertRow(logEventTypeDTOToInsert);
        }
    }

    async Task OnCreateRow(LogEventTypeDTO logEventTypeDTO)
    {
        if (IsAdmin == AdminMode.IsAdmin)
        {
            logEventTypeDTOToInsert = null;
            var objectForCheckName = await _logEventTypeRepository.GetByName(logEventTypeDTO.Name);
            if (objectForCheckName != null)
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть запись типа события с наименованием \"" + objectForCheckName.Name + "\" с ИД записи = " + objectForCheckName.Id.ToString());
                logEventTypeDTOGrid.CancelEditRow(logEventTypeDTO);
                await logEventTypeDTOGrid.Reload();
                return;
            }

            var newDTO = await _logEventTypeRepository.Create(logEventTypeDTO);
            await _logEventRepository.ToLog<LogEventTypeDTO>(oldObject: null, newObject: newDTO, "Добавление типа события", "Тип события: ", _authorizationRepository);

            //logEventTypeDTOToInsert.Id = newDTO.Id;
            //await logEventTypeDTOGrid.UpdateRow(logEventTypeDTOToInsert);

            await OnAfterRenderAsync(true);
        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (IsAdmin == AdminMode.IsAdmin || IsAdmin == AdminMode.IsAdminReadOnly)
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "LogEventType_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelLogEventType(filename, (IEnumerable<LogEventTypeDTO>)logEventTypeDTOGrid.View);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }
}


