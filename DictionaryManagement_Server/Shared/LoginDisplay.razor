@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims;
<AuthorizeView>
    @* Пользователь: @context.User.Identity?.Name&nbsp&nbsp;&nbsp; *@
    <div class="container">  
        <div class="row">
            <div class="col-6 justify-content-end text-primary">
                @* Интеграционное решение - Dictionary Management - @SD.AppVersion - @(SD.AppFactoryMode) *@
                Интеграционное решение - Dictionary Management - @SD.AppVersion
            </div>
            @if (UserLogin != null)
            {
                <div class="col-6 justify-content-end" style="position:absolute;right:0">
                    @if (UserLogin.Contains("полный доступ"))
                    {
                        <p>@("Пользователь: " + UserLogin.Replace("полный доступ", ""))<span style="color:green; font-weight:600">полный доступ</span></p>
                    }
                    @if (UserLogin.Contains("только чтение"))
                    {
                        <p>@("Пользователь: " + UserLogin.Replace("только чтение", ""))<span style="color:blue; font-weight:600">только чтение</span></p>
                    }
                    @if (UserLogin.Contains("НЕТ ДОСТУПА"))
                    {
                        <p>@("Пользователь: " + UserLogin.Replace("НЕТ ДОСТУПА", ""))<span style="color:red; font-weight:600">НЕТ ДОСТУПА</span></p>
                    }
                </div>
            }
        </div>
    </div>

    @* <div>Входит в группу BDSHOME-PC\HomeUsers:&nbsp;</div>

    @if (@context.User.IsInRole("BDSHOME-PC\\HomeUsers"))
    {
    <div>Да</div>
    }
    else
    {
    <div>Нет</div>
    }

    <br />
    Входит в группу SIBUR\G601GO-S601AS-MES-CLC_Developers:
    <br />
    @if (@context.User.IsInRole("SIBUR\\G601GO-S601AS-MES-CLC_Developers"))
    {
    <div>Да</div>
    }
    else
    {
    <div>Нет</div>
    }
    *@
</AuthorizeView>

@code
{

    //[CascadingParameter]
    //private Task<AuthenticationState>? authenticationState { get; set; }
    public string UserLogin { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginAndNameAndAccessMode);
            await Task.Delay(100);
            await InvokeAsync(StateHasChanged);
        }
    }
}